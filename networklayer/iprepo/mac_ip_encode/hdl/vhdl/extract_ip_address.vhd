-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity extract_ip_address is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_ip_TVALID : IN STD_LOGIC;
    dataStreamBuffer0_V_din : OUT STD_LOGIC_VECTOR (576 downto 0);
    dataStreamBuffer0_V_full_n : IN STD_LOGIC;
    dataStreamBuffer0_V_write : OUT STD_LOGIC;
    arpTableOut_V_V_TREADY : IN STD_LOGIC;
    s_axis_ip_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_ip_TREADY : OUT STD_LOGIC;
    s_axis_ip_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_ip_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    arpTableOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    arpTableOut_V_V_TVALID : OUT STD_LOGIC;
    regSubNetMask_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regDefaultGateway_V : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of extract_ip_address is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv25_9F : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010011111";
    constant ap_const_lv159_lc_2 : STD_LOGIC_VECTOR (158 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv160_lc_3 : STD_LOGIC_VECTOR (159 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv160_lc_4 : STD_LOGIC_VECTOR (159 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv160_lc_5 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_nbreadreq_fu_102_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal tmp_reg_421_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_458 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op56_write_state3 : BOOLEAN;
    signal ap_predicate_op57_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal regslice_both_arpTableOut_V_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal tmp_reg_421_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_458_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_467_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op66_write_state4 : BOOLEAN;
    signal ap_predicate_op68_write_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal header_ready : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal header_idx : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal header_header_V : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000101";
    signal metaWritten : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal s_axis_ip_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arpTableOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal dataStreamBuffer0_V_blk_n : STD_LOGIC;
    signal tmp_data_V_reg_425 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_keep_V_reg_430 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_last_V_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_435_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal header_ready_load_load_fu_185_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal header_ready_load_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_fu_305_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln53_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dstIpAddress_V_fu_344_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal dstIpAddress_V_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln879_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln67_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln67_reg_471 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln67_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_phi_ln73_reg_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln73_reg_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter2_metaWritten_flag_0_i_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln67_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_allocacmp_header_ready_load : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_381_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_header_idx_load : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_293_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal ap_sig_allocacmp_metaWritten_load : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal Lo_assign_fu_193_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln414_fu_215_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal st5_fu_219_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_V_2_fu_201_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_fu_227_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_81_fu_235_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_2_fu_253_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_3_fu_261_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal and_ln414_fu_269_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal xor_ln414_fu_275_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_1_fu_245_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal and_ln414_1_fu_281_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal and_ln414_2_fu_287_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal or_ln73_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln879_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal arpTableOut_V_V_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal arpTableOut_V_V_TVALID_int : STD_LOGIC;
    signal arpTableOut_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_arpTableOut_V_V_U_vld_out : STD_LOGIC;
    signal ap_condition_119 : BOOLEAN;
    signal ap_condition_216 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_arpTableOut_V_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => arpTableOut_V_V_TDATA_int,
        vld_in => arpTableOut_V_V_TVALID_int,
        ack_in => arpTableOut_V_V_TREADY_int,
        data_out => arpTableOut_V_V_TDATA,
        vld_out => regslice_both_arpTableOut_V_V_U_vld_out,
        ack_out => arpTableOut_V_V_TREADY,
        apdone_blk => regslice_both_arpTableOut_V_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_phi_ln73_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_119)) then
                if (((header_ready_load_load_fu_185_p1 = ap_const_lv1_0) and (tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_phi_ln73_reg_138 <= add_ln67_fu_305_p2;
                elsif (((header_ready_load_load_fu_185_p1 = ap_const_lv1_1) and (tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_phi_ln73_reg_138 <= ap_sig_allocacmp_header_idx_load;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_phi_ln73_reg_138 <= ap_phi_reg_pp0_iter0_phi_ln73_reg_138;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_119)) then
                if (((header_ready_load_load_fu_185_p1 = ap_const_lv1_0) and (tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_147 <= ap_const_lv1_1;
                elsif (((header_ready_load_load_fu_185_p1 = ap_const_lv1_1) and (tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_147 <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_147 <= ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_147;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_metaWritten_flag_0_i_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_216)) then
                if (((tmp_reg_421 = ap_const_lv1_1) and (or_ln53_fu_334_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_metaWritten_flag_0_i_reg_160 <= ap_const_lv1_0;
                elsif (((or_ln53_fu_334_p2 = ap_const_lv1_0) and (tmp_reg_421 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_metaWritten_flag_0_i_reg_160 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_metaWritten_flag_0_i_reg_160 <= ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_160;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_160 <= ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_160;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln53_fu_334_p2 = ap_const_lv1_0) and (tmp_reg_421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dstIpAddress_V_reg_462 <= header_header_V(159 downto 128);
                icmp_ln879_reg_467 <= icmp_ln879_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((header_ready_load_load_fu_185_p1 = ap_const_lv1_0) and (tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                header_header_V <= p_Result_s_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_421 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                header_idx <= select_ln67_fu_381_p3;
                header_ready <= and_ln67_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                header_ready_load_reg_443 <= ap_sig_allocacmp_header_ready_load;
                tmp_data_V_reg_425 <= s_axis_ip_TDATA;
                tmp_keep_V_reg_430 <= s_axis_ip_TKEEP;
                tmp_last_V_reg_435 <= s_axis_ip_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln879_reg_467_pp0_iter2_reg <= icmp_ln879_reg_467;
                or_ln53_reg_458_pp0_iter2_reg <= or_ln53_reg_458;
                tmp_reg_421_pp0_iter2_reg <= tmp_reg_421_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_421_pp0_iter1_reg = ap_const_lv1_1) and (or_ln67_fu_400_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                metaWritten <= xor_ln67_reg_471;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln53_reg_458 <= or_ln53_fu_334_p2;
                xor_ln67_reg_471 <= xor_ln67_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_reg_435_pp0_iter1_reg <= tmp_last_V_reg_435;
                tmp_reg_421 <= tmp_nbreadreq_fu_102_p5;
                tmp_reg_421_pp0_iter1_reg <= tmp_reg_421;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Lo_assign_fu_193_p3 <= (ap_sig_allocacmp_header_idx_load & ap_const_lv9_0);
    add_ln67_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ap_sig_allocacmp_header_idx_load));
    and_ln414_1_fu_281_p2 <= (xor_ln414_fu_275_p2 and header_header_V);
    and_ln414_2_fu_287_p2 <= (select_ln414_1_fu_245_p3 and and_ln414_fu_269_p2);
    and_ln414_fu_269_p2 <= (select_ln414_3_fu_261_p3 and select_ln414_2_fu_253_p3);
    and_ln67_fu_375_p2 <= (xor_ln67_fu_370_p2 and or_ln73_fu_311_p2);
    and_ln879_fu_359_p2 <= (xor_ln879_fu_354_p2 and regSubNetMask_V);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, s_axis_ip_TVALID, tmp_nbreadreq_fu_102_p5, dataStreamBuffer0_V_full_n, tmp_reg_421, regslice_both_arpTableOut_V_V_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((regslice_both_arpTableOut_V_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((tmp_reg_421 = ap_const_lv1_1) and (dataStreamBuffer0_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (s_axis_ip_TVALID = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, s_axis_ip_TVALID, tmp_nbreadreq_fu_102_p5, dataStreamBuffer0_V_full_n, tmp_reg_421, ap_block_state3_io, regslice_both_arpTableOut_V_V_U_apdone_blk, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((tmp_reg_421 = ap_const_lv1_1) and (dataStreamBuffer0_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (s_axis_ip_TVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_arpTableOut_V_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state4_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, s_axis_ip_TVALID, tmp_nbreadreq_fu_102_p5, dataStreamBuffer0_V_full_n, tmp_reg_421, ap_block_state3_io, regslice_both_arpTableOut_V_V_U_apdone_blk, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((tmp_reg_421 = ap_const_lv1_1) and (dataStreamBuffer0_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (s_axis_ip_TVALID = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_arpTableOut_V_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state4_io))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, s_axis_ip_TVALID, tmp_nbreadreq_fu_102_p5)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (s_axis_ip_TVALID = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(dataStreamBuffer0_V_full_n, tmp_reg_421)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((tmp_reg_421 = ap_const_lv1_1) and (dataStreamBuffer0_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(ap_predicate_op56_write_state3, ap_predicate_op57_write_state3, arpTableOut_V_V_TREADY_int)
    begin
                ap_block_state3_io <= (((arpTableOut_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op57_write_state3 = ap_const_boolean_1)) or ((arpTableOut_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op56_write_state3 = ap_const_boolean_1)));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(ap_predicate_op66_write_state4, ap_predicate_op68_write_state4, arpTableOut_V_V_TREADY_int)
    begin
                ap_block_state4_io <= (((arpTableOut_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op68_write_state4 = ap_const_boolean_1)) or ((arpTableOut_V_V_TREADY_int = ap_const_logic_0) and (ap_predicate_op66_write_state4 = ap_const_boolean_1)));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(regslice_both_arpTableOut_V_V_U_apdone_blk)
    begin
                ap_block_state4_pp0_stage0_iter3 <= (regslice_both_arpTableOut_V_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_condition_119_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_119 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_216_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_216 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_160 <= "X";
    ap_phi_reg_pp0_iter0_phi_ln73_reg_138 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_147 <= "X";

    ap_predicate_op56_write_state3_assign_proc : process(tmp_reg_421_pp0_iter1_reg, or_ln53_reg_458, icmp_ln879_reg_467)
    begin
                ap_predicate_op56_write_state3 <= ((icmp_ln879_reg_467 = ap_const_lv1_0) and (or_ln53_reg_458 = ap_const_lv1_0) and (tmp_reg_421_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op57_write_state3_assign_proc : process(tmp_reg_421_pp0_iter1_reg, or_ln53_reg_458, icmp_ln879_reg_467)
    begin
                ap_predicate_op57_write_state3 <= ((or_ln53_reg_458 = ap_const_lv1_0) and (icmp_ln879_reg_467 = ap_const_lv1_1) and (tmp_reg_421_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op66_write_state4_assign_proc : process(tmp_reg_421_pp0_iter2_reg, or_ln53_reg_458_pp0_iter2_reg, icmp_ln879_reg_467_pp0_iter2_reg)
    begin
                ap_predicate_op66_write_state4 <= ((icmp_ln879_reg_467_pp0_iter2_reg = ap_const_lv1_0) and (or_ln53_reg_458_pp0_iter2_reg = ap_const_lv1_0) and (tmp_reg_421_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op68_write_state4_assign_proc : process(tmp_reg_421_pp0_iter2_reg, or_ln53_reg_458_pp0_iter2_reg, icmp_ln879_reg_467_pp0_iter2_reg)
    begin
                ap_predicate_op68_write_state4 <= ((or_ln53_reg_458_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln879_reg_467_pp0_iter2_reg = ap_const_lv1_1) and (tmp_reg_421_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_header_idx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_421, header_idx, ap_block_pp0_stage0, select_ln67_fu_381_p3)
    begin
        if (((tmp_reg_421 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_header_idx_load <= select_ln67_fu_381_p3;
        else 
            ap_sig_allocacmp_header_idx_load <= header_idx;
        end if; 
    end process;


    ap_sig_allocacmp_header_ready_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_421, header_ready, ap_block_pp0_stage0, and_ln67_fu_375_p2)
    begin
        if (((tmp_reg_421 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_header_ready_load <= and_ln67_fu_375_p2;
        else 
            ap_sig_allocacmp_header_ready_load <= header_ready;
        end if; 
    end process;


    ap_sig_allocacmp_metaWritten_load_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_reg_421_pp0_iter1_reg, metaWritten, ap_block_pp0_stage0, xor_ln67_reg_471, or_ln67_fu_400_p2)
    begin
        if (((tmp_reg_421_pp0_iter1_reg = ap_const_lv1_1) and (or_ln67_fu_400_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_metaWritten_load <= xor_ln67_reg_471;
        else 
            ap_sig_allocacmp_metaWritten_load <= metaWritten;
        end if; 
    end process;


    arpTableOut_V_V_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_predicate_op56_write_state3, ap_predicate_op57_write_state3, ap_predicate_op66_write_state4, ap_predicate_op68_write_state4, ap_block_pp0_stage0, arpTableOut_V_V_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op57_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op56_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op68_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_predicate_op66_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            arpTableOut_V_V_TDATA_blk_n <= arpTableOut_V_V_TREADY_int;
        else 
            arpTableOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpTableOut_V_V_TDATA_int_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op56_write_state3, ap_predicate_op57_write_state3, regDefaultGateway_V, dstIpAddress_V_reg_462, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((ap_predicate_op57_write_state3 = ap_const_boolean_1)) then 
                arpTableOut_V_V_TDATA_int <= dstIpAddress_V_reg_462;
            elsif ((ap_predicate_op56_write_state3 = ap_const_boolean_1)) then 
                arpTableOut_V_V_TDATA_int <= regDefaultGateway_V;
            else 
                arpTableOut_V_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            arpTableOut_V_V_TDATA_int <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    arpTableOut_V_V_TVALID <= regslice_both_arpTableOut_V_V_U_vld_out;

    arpTableOut_V_V_TVALID_int_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op56_write_state3, ap_predicate_op57_write_state3, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op57_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op56_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            arpTableOut_V_V_TVALID_int <= ap_const_logic_1;
        else 
            arpTableOut_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    dataStreamBuffer0_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, dataStreamBuffer0_V_full_n, tmp_reg_421, ap_block_pp0_stage0)
    begin
        if (((tmp_reg_421 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dataStreamBuffer0_V_blk_n <= dataStreamBuffer0_V_full_n;
        else 
            dataStreamBuffer0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dataStreamBuffer0_V_din <= ((tmp_last_V_reg_435 & tmp_keep_V_reg_430) & tmp_data_V_reg_425);

    dataStreamBuffer0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_421, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_421 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dataStreamBuffer0_V_write <= ap_const_logic_1;
        else 
            dataStreamBuffer0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dstIpAddress_V_fu_344_p4 <= header_header_V(159 downto 128);
    header_ready_load_load_fu_185_p1 <= ap_sig_allocacmp_header_ready_load;
    icmp_ln414_fu_209_p2 <= "1" when (unsigned(Lo_assign_fu_193_p3) > unsigned(ap_const_lv25_9F)) else "0";
    icmp_ln879_fu_364_p2 <= "1" when (and_ln879_fu_359_p2 = ap_const_lv32_0) else "0";
    or_ln53_fu_334_p2 <= (xor_ln53_fu_328_p2 or ap_sig_allocacmp_metaWritten_load);
    or_ln67_fu_400_p2 <= (tmp_last_V_reg_435_pp0_iter1_reg or ap_phi_reg_pp0_iter2_metaWritten_flag_0_i_reg_160);
    or_ln73_fu_311_p2 <= (header_ready_load_reg_443 or ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_147);
    p_Result_s_fu_293_p2 <= (and_ln414_2_fu_287_p2 or and_ln414_1_fu_281_p2);

    s_axis_ip_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, s_axis_ip_TVALID, tmp_nbreadreq_fu_102_p5, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            s_axis_ip_TDATA_blk_n <= s_axis_ip_TVALID;
        else 
            s_axis_ip_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    s_axis_ip_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_102_p5, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_nbreadreq_fu_102_p5 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_axis_ip_TREADY <= ap_const_logic_1;
        else 
            s_axis_ip_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    select_ln414_1_fu_245_p3 <= 
        tmp_81_fu_235_p4 when (icmp_ln414_fu_209_p2(0) = '1') else 
        tmp_V_2_fu_201_p1;
    select_ln414_2_fu_253_p3 <= 
        ap_const_lv160_lc_3 when (icmp_ln414_fu_209_p2(0) = '1') else 
        ap_const_lv160_lc_4;
    select_ln414_3_fu_261_p3 <= 
        ap_const_lv160_lc_5 when (icmp_ln414_fu_209_p2(0) = '1') else 
        ap_const_lv160_lc_4;
    select_ln414_fu_227_p3 <= 
        st5_fu_219_p3 when (icmp_ln414_fu_209_p2(0) = '1') else 
        tmp_V_2_fu_201_p1;
    select_ln67_fu_381_p3 <= 
        ap_const_lv16_0 when (tmp_last_V_reg_435(0) = '1') else 
        ap_phi_reg_pp0_iter1_phi_ln73_reg_138;
    st5_fu_219_p3 <= (trunc_ln414_fu_215_p1 & ap_const_lv159_lc_2);
    
    tmp_81_fu_235_p4_proc : process(select_ln414_fu_227_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_81_fu_235_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_9F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := select_ln414_fu_227_p3;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_9F(8-1 downto 0)));
            for tmp_81_fu_235_p4_i in 0 to 160-1 loop
                v0_cpy(tmp_81_fu_235_p4_i) := select_ln414_fu_227_p3(160-1-tmp_81_fu_235_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(160-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_81_fu_235_p4 <= resvalue(160-1 downto 0);
    end process;

    tmp_V_2_fu_201_p1 <= s_axis_ip_TDATA(160 - 1 downto 0);
    tmp_nbreadreq_fu_102_p5 <= (0=>(s_axis_ip_TVALID), others=>'-');
    trunc_ln414_fu_215_p1 <= s_axis_ip_TDATA(1 - 1 downto 0);
    xor_ln414_fu_275_p2 <= (ap_const_lv160_lc_4 xor and_ln414_fu_269_p2);
    xor_ln53_fu_328_p2 <= (or_ln73_fu_311_p2 xor ap_const_lv1_1);
    xor_ln67_fu_370_p2 <= (tmp_last_V_reg_435 xor ap_const_lv1_1);
    xor_ln879_fu_354_p2 <= (regDefaultGateway_V xor dstIpAddress_V_fu_344_p4);
end behav;
