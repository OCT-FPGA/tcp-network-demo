// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_arp_pkg_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_TVALID,
        arpTableInsertFifo_V_din,
        arpTableInsertFifo_V_full_n,
        arpTableInsertFifo_V_write,
        arpReplyMetaFifo_V_din,
        arpReplyMetaFifo_V_full_n,
        arpReplyMetaFifo_V_write,
        s_axis_TDATA,
        s_axis_TREADY,
        s_axis_TKEEP,
        s_axis_TLAST,
        myIpAddress_V,
        regRequestCount_V,
        regRequestCount_V_ap_vld,
        regReplyCount_V,
        regReplyCount_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_TVALID;
output  [80:0] arpTableInsertFifo_V_din;
input   arpTableInsertFifo_V_full_n;
output   arpTableInsertFifo_V_write;
output  [127:0] arpReplyMetaFifo_V_din;
input   arpReplyMetaFifo_V_full_n;
output   arpReplyMetaFifo_V_write;
input  [511:0] s_axis_TDATA;
output   s_axis_TREADY;
input  [63:0] s_axis_TKEEP;
input  [0:0] s_axis_TLAST;
input  [31:0] myIpAddress_V;
output  [15:0] regRequestCount_V;
output   regRequestCount_V_ap_vld;
output  [15:0] regReplyCount_V;
output   regReplyCount_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arpTableInsertFifo_V_write;
reg arpReplyMetaFifo_V_write;
reg s_axis_TREADY;
reg regRequestCount_V_ap_vld;
reg regReplyCount_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_128_p5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_reg_511;
reg   [0:0] tmp_reg_511_pp0_iter1_reg;
reg   [0:0] tmp_last_V_reg_515;
reg   [0:0] tmp_last_V_reg_515_pp0_iter1_reg;
reg   [0:0] icmp_ln879_reg_534;
reg   [0:0] icmp_ln879_1_reg_538;
reg   [0:0] icmp_ln879_2_reg_542;
reg    ap_predicate_op59_write_state3;
reg    ap_predicate_op67_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] header_ready;
reg   [15:0] header_idx;
reg   [335:0] header_header_V;
reg   [15:0] pag_requestCounter_V;
reg   [15:0] pag_replyCounter_V;
reg    s_axis_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    arpReplyMetaFifo_V_blk_n;
reg    arpTableInsertFifo_V_blk_n;
wire   [0:0] tmp_last_V_fu_227_p1;
wire   [0:0] header_ready_load_load_fu_231_p1;
reg   [0:0] header_ready_load_reg_519;
wire   [15:0] add_ln67_fu_351_p2;
wire   [0:0] icmp_ln879_fu_377_p2;
wire   [0:0] icmp_ln879_1_fu_392_p2;
wire   [0:0] icmp_ln879_2_fu_398_p2;
reg   [31:0] tmp_ipAddress_V_reg_546;
reg   [47:0] tmp_macAddress_V_reg_551;
reg   [47:0] tmp_srcMacAddr_V_reg_556;
reg   [79:0] tmp_3_reg_561;
reg    ap_block_pp0_stage0_subdone;
wire   [15:0] ap_phi_reg_pp0_iter0_phi_ln73_reg_178;
reg   [15:0] ap_phi_reg_pp0_iter1_phi_ln73_reg_178;
wire   [0:0] ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_187;
reg   [0:0] ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_187;
reg   [0:0] ap_phi_mux_header_ready_1_new_0_phi_fu_204_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_header_ready_1_new_0_reg_200;
reg   [0:0] ap_phi_reg_pp0_iter1_header_ready_1_new_0_reg_200;
wire   [0:0] or_ln73_fu_357_p2;
reg   [15:0] ap_phi_mux_header_idx_new_0_i_phi_fu_215_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_211;
reg   [15:0] ap_phi_reg_pp0_iter1_header_idx_new_0_i_reg_211;
reg   [0:0] ap_sig_allocacmp_header_ready_load;
reg   [15:0] ap_sig_allocacmp_header_idx_load;
wire   [335:0] p_Result_s_fu_339_p2;
wire   [15:0] add_ln700_fu_493_p2;
wire   [15:0] add_ln700_1_fu_469_p2;
reg    ap_block_pp0_stage0_01001;
wire   [24:0] Lo_assign_fu_239_p3;
wire   [0:0] trunc_ln414_fu_261_p1;
wire   [0:0] icmp_ln414_fu_255_p2;
wire   [335:0] st4_fu_265_p3;
wire   [335:0] tmp_V_fu_247_p1;
wire   [335:0] select_ln414_fu_273_p3;
reg   [335:0] tmp_1_fu_281_p4;
wire   [335:0] select_ln414_2_fu_299_p3;
wire   [335:0] select_ln414_3_fu_307_p3;
wire   [335:0] and_ln414_fu_315_p2;
wire   [335:0] xor_ln414_fu_321_p2;
wire   [335:0] select_ln414_1_fu_291_p3;
wire   [335:0] and_ln414_1_fu_327_p2;
wire   [335:0] and_ln414_2_fu_333_p2;
wire   [31:0] p_Result_i41_i_fu_367_p4;
wire   [15:0] p_Result_i43_i_fu_382_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_93;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 header_ready = 1'd0;
#0 header_idx = 16'd0;
#0 header_header_V = 336'd22969770278074827527357335424865723297445183488;
#0 pag_requestCounter_V = 16'd0;
#0 pag_replyCounter_V = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if (((tmp_last_V_fu_227_p1 == 1'd1) & (tmp_nbreadreq_fu_128_p5 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_header_idx_new_0_i_reg_211 <= 16'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_header_idx_new_0_i_reg_211 <= ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_211;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if (((tmp_last_V_fu_227_p1 == 1'd1) & (tmp_nbreadreq_fu_128_p5 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_header_ready_1_new_0_reg_200 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_header_ready_1_new_0_reg_200 <= ap_phi_reg_pp0_iter0_header_ready_1_new_0_reg_200;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if (((header_ready_load_load_fu_231_p1 == 1'd0) & (tmp_nbreadreq_fu_128_p5 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_phi_ln73_reg_178 <= add_ln67_fu_351_p2;
        end else if (((header_ready_load_load_fu_231_p1 == 1'd1) & (tmp_nbreadreq_fu_128_p5 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_phi_ln73_reg_178 <= ap_sig_allocacmp_header_idx_load;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_phi_ln73_reg_178 <= ap_phi_reg_pp0_iter0_phi_ln73_reg_178;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_93)) begin
        if (((header_ready_load_load_fu_231_p1 == 1'd0) & (tmp_nbreadreq_fu_128_p5 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_187 <= 1'd1;
        end else if (((header_ready_load_load_fu_231_p1 == 1'd1) & (tmp_nbreadreq_fu_128_p5 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_187 <= 1'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_187 <= ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_187;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (header_ready_load_load_fu_231_p1 == 1'd0) & (tmp_nbreadreq_fu_128_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_header_V <= p_Result_s_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_511 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_idx <= ap_phi_mux_header_idx_new_0_i_phi_fu_215_p4;
        header_ready <= ap_phi_mux_header_ready_1_new_0_phi_fu_204_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_128_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_ready_load_reg_519 <= ap_sig_allocacmp_header_ready_load;
        tmp_last_V_reg_515 <= s_axis_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_last_V_reg_515 == 1'd1) & (tmp_reg_511 == 1'd1) & (icmp_ln879_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_1_reg_538 <= icmp_ln879_1_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_fu_392_p2 == 1'd0) & (tmp_last_V_reg_515 == 1'd1) & (tmp_reg_511 == 1'd1) & (icmp_ln879_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_2_reg_542 <= icmp_ln879_2_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_last_V_reg_515 == 1'd1) & (tmp_reg_511 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_reg_534 <= icmp_ln879_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_538 == 1'd0) & (icmp_ln879_2_reg_542 == 1'd1) & (icmp_ln879_reg_534 == 1'd1) & (tmp_last_V_reg_515_pp0_iter1_reg == 1'd1) & (tmp_reg_511_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pag_replyCounter_V <= add_ln700_1_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_538 == 1'd1) & (icmp_ln879_reg_534 == 1'd1) & (tmp_last_V_reg_515_pp0_iter1_reg == 1'd1) & (tmp_reg_511_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        pag_requestCounter_V <= add_ln700_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_last_V_reg_515 == 1'd1) & (tmp_reg_511 == 1'd1) & (icmp_ln879_1_fu_392_p2 == 1'd1) & (icmp_ln879_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_561 <= {{header_header_V[255:176]}};
        tmp_srcMacAddr_V_reg_556 <= {{header_header_V[95:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_fu_392_p2 == 1'd0) & (tmp_last_V_reg_515 == 1'd1) & (tmp_reg_511 == 1'd1) & (icmp_ln879_2_fu_398_p2 == 1'd1) & (icmp_ln879_fu_377_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_ipAddress_V_reg_546 <= {{header_header_V[255:224]}};
        tmp_macAddress_V_reg_551 <= {{header_header_V[223:176]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_515_pp0_iter1_reg <= tmp_last_V_reg_515;
        tmp_reg_511 <= tmp_nbreadreq_fu_128_p5;
        tmp_reg_511_pp0_iter1_reg <= tmp_reg_511;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_515 == 1'd0) & (tmp_reg_511 == 1'd1))) begin
        ap_phi_mux_header_idx_new_0_i_phi_fu_215_p4 = ap_phi_reg_pp0_iter1_phi_ln73_reg_178;
    end else begin
        ap_phi_mux_header_idx_new_0_i_phi_fu_215_p4 = ap_phi_reg_pp0_iter1_header_idx_new_0_i_reg_211;
    end
end

always @ (*) begin
    if (((tmp_last_V_reg_515 == 1'd0) & (tmp_reg_511 == 1'd1))) begin
        ap_phi_mux_header_ready_1_new_0_phi_fu_204_p4 = or_ln73_fu_357_p2;
    end else begin
        ap_phi_mux_header_ready_1_new_0_phi_fu_204_p4 = ap_phi_reg_pp0_iter1_header_ready_1_new_0_reg_200;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_511 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_header_idx_load = ap_phi_mux_header_idx_new_0_i_phi_fu_215_p4;
    end else begin
        ap_sig_allocacmp_header_idx_load = header_idx;
    end
end

always @ (*) begin
    if (((tmp_reg_511 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_header_ready_load = ap_phi_mux_header_ready_1_new_0_phi_fu_204_p4;
    end else begin
        ap_sig_allocacmp_header_ready_load = header_ready;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op67_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        arpReplyMetaFifo_V_blk_n = arpReplyMetaFifo_V_full_n;
    end else begin
        arpReplyMetaFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op67_write_state3 == 1'b1))) begin
        arpReplyMetaFifo_V_write = 1'b1;
    end else begin
        arpReplyMetaFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op59_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        arpTableInsertFifo_V_blk_n = arpTableInsertFifo_V_full_n;
    end else begin
        arpTableInsertFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op59_write_state3 == 1'b1))) begin
        arpTableInsertFifo_V_write = 1'b1;
    end else begin
        arpTableInsertFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_538 == 1'd0) & (icmp_ln879_2_reg_542 == 1'd1) & (icmp_ln879_reg_534 == 1'd1) & (tmp_last_V_reg_515_pp0_iter1_reg == 1'd1) & (tmp_reg_511_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        regReplyCount_V_ap_vld = 1'b1;
    end else begin
        regReplyCount_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_538 == 1'd1) & (icmp_ln879_reg_534 == 1'd1) & (tmp_last_V_reg_515_pp0_iter1_reg == 1'd1) & (tmp_reg_511_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        regRequestCount_V_ap_vld = 1'b1;
    end else begin
        regRequestCount_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_128_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        s_axis_TDATA_blk_n = s_axis_TVALID;
    end else begin
        s_axis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_128_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_TREADY = 1'b1;
    end else begin
        s_axis_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_239_p3 = {{ap_sig_allocacmp_header_idx_load}, {9'd0}};

assign add_ln67_fu_351_p2 = (16'd1 + ap_sig_allocacmp_header_idx_load);

assign add_ln700_1_fu_469_p2 = (pag_replyCounter_V + 16'd1);

assign add_ln700_fu_493_p2 = (pag_requestCounter_V + 16'd1);

assign and_ln414_1_fu_327_p2 = (xor_ln414_fu_321_p2 & header_header_V);

assign and_ln414_2_fu_333_p2 = (select_ln414_1_fu_291_p3 & and_ln414_fu_315_p2);

assign and_ln414_fu_315_p2 = (select_ln414_3_fu_307_p3 & select_ln414_2_fu_299_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op67_write_state3 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op59_write_state3 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_128_p5 == 1'd1) & (s_axis_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op67_write_state3 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op59_write_state3 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_128_p5 == 1'd1) & (s_axis_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op67_write_state3 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op59_write_state3 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_128_p5 == 1'd1) & (s_axis_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_128_p5 == 1'd1) & (s_axis_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op67_write_state3 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op59_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_condition_93 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_211 = 'bx;

assign ap_phi_reg_pp0_iter0_header_ready_1_new_0_reg_200 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln73_reg_178 = 'bx;

assign ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_187 = 'bx;

always @ (*) begin
    ap_predicate_op59_write_state3 = ((icmp_ln879_1_reg_538 == 1'd0) & (icmp_ln879_2_reg_542 == 1'd1) & (icmp_ln879_reg_534 == 1'd1) & (tmp_last_V_reg_515_pp0_iter1_reg == 1'd1) & (tmp_reg_511_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op67_write_state3 = ((icmp_ln879_1_reg_538 == 1'd1) & (icmp_ln879_reg_534 == 1'd1) & (tmp_last_V_reg_515_pp0_iter1_reg == 1'd1) & (tmp_reg_511_pp0_iter1_reg == 1'd1));
end

assign arpReplyMetaFifo_V_din = {{tmp_3_reg_561}, {tmp_srcMacAddr_V_reg_556}};

assign arpTableInsertFifo_V_din = {{{{1'd1}, {tmp_macAddress_V_reg_551}}}, {tmp_ipAddress_V_reg_546}};

assign header_ready_load_load_fu_231_p1 = ap_sig_allocacmp_header_ready_load;

assign icmp_ln414_fu_255_p2 = ((Lo_assign_fu_239_p3 > 25'd335) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_392_p2 = ((p_Result_i43_i_fu_382_p4 == 16'd256) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_398_p2 = ((p_Result_i43_i_fu_382_p4 == 16'd512) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_377_p2 = ((p_Result_i41_i_fu_367_p4 == myIpAddress_V) ? 1'b1 : 1'b0);

assign or_ln73_fu_357_p2 = (header_ready_load_reg_519 | ap_phi_reg_pp0_iter1_write_flag_1_i_i_reg_187);

assign p_Result_i41_i_fu_367_p4 = {{header_header_V[335:304]}};

assign p_Result_i43_i_fu_382_p4 = {{header_header_V[175:160]}};

assign p_Result_s_fu_339_p2 = (and_ln414_2_fu_333_p2 | and_ln414_1_fu_327_p2);

assign regReplyCount_V = (pag_replyCounter_V + 16'd1);

assign regRequestCount_V = (pag_requestCounter_V + 16'd1);

assign select_ln414_1_fu_291_p3 = ((icmp_ln414_fu_255_p2[0:0] === 1'b1) ? tmp_1_fu_281_p4 : tmp_V_fu_247_p1);

assign select_ln414_2_fu_299_p3 = ((icmp_ln414_fu_255_p2[0:0] === 1'b1) ? 336'd69992023193056381579920071267763883691301421788582797965624659405118495974380029543152421664737722368 : 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735);

assign select_ln414_3_fu_307_p3 = ((icmp_ln414_fu_255_p2[0:0] === 1'b1) ? 336'd1 : 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735);

assign select_ln414_fu_273_p3 = ((icmp_ln414_fu_255_p2[0:0] === 1'b1) ? st4_fu_265_p3 : tmp_V_fu_247_p1);

assign st4_fu_265_p3 = {{trunc_ln414_fu_261_p1}, {335'd0}};

integer ap_tvar_int_0;

always @ (select_ln414_fu_273_p3) begin
    for (ap_tvar_int_0 = 336 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 335 - 0) begin
            tmp_1_fu_281_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_281_p4[ap_tvar_int_0] = select_ln414_fu_273_p3[335 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_fu_247_p1 = s_axis_TDATA[335:0];

assign tmp_last_V_fu_227_p1 = s_axis_TLAST;

assign tmp_nbreadreq_fu_128_p5 = s_axis_TVALID;

assign trunc_ln414_fu_261_p1 = s_axis_TDATA[0:0];

assign xor_ln414_fu_321_p2 = (336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 ^ and_ln414_fu_315_p2);

endmodule //process_arp_pkg_512_s
