-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generate_arp_pkg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arpRequestMetaFifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    arpRequestMetaFifo_V_empty_n : IN STD_LOGIC;
    arpRequestMetaFifo_V_read : OUT STD_LOGIC;
    arpReplyMetaFifo_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    arpReplyMetaFifo_V_empty_n : IN STD_LOGIC;
    arpReplyMetaFifo_V_read : OUT STD_LOGIC;
    m_axis_TREADY : IN STD_LOGIC;
    m_axis_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_TVALID : OUT STD_LOGIC;
    m_axis_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of generate_arp_pkg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_3FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000111111111111111111111111111111111111111111";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv25_150 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000101010000";
    constant ap_const_lv25_14F : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000101001111";
    constant ap_const_lv336_lc_6 : STD_LOGIC_VECTOR (335 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv336_lc_4 : STD_LOGIC_VECTOR (335 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv336_lc_2 : STD_LOGIC_VECTOR (335 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal gap_state_load_load_fu_177_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_nbreadreq_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_nbreadreq_fu_132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op12_read_state1 : BOOLEAN;
    signal ap_predicate_op20_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal gap_state_load_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_dataOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal gap_state_load_reg_424_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal gap_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal header_idx_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal header_header_V_1 : STD_LOGIC_VECTOR (335 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000110000000000000100000000001000000000000011000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal m_axis_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arpReplyMetaFifo_V_blk_n : STD_LOGIC;
    signal arpRequestMetaFifo_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal select_ln82_fu_397_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_219_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_s_fu_287_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Result_9_fu_181_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_10_fu_193_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal tmp_6_fu_205_p6 : STD_LOGIC_VECTOR (175 downto 0);
    signal trunc_ln321_fu_237_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_7_fu_241_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal tmp_4_fu_265_p4 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_8_fu_253_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal tmp_5_fu_275_p5 : STD_LOGIC_VECTOR (175 downto 0);
    signal Lo_assign_fu_325_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal icmp_ln647_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_345_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln647_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln647_fu_365_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal select_ln647_1_fu_369_p3 : STD_LOGIC_VECTOR (335 downto 0);
    signal select_ln647_2_fu_377_p3 : STD_LOGIC_VECTOR (335 downto 0);
    signal icmp_ln82_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_fu_391_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_385_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal sendWord_data_V_fu_405_p3 : STD_LOGIC_VECTOR (335 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal m_axis_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal m_axis_TVALID_int : STD_LOGIC;
    signal m_axis_TREADY_int : STD_LOGIC;
    signal regslice_both_dataOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dataOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dataOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dataOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dataOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dataOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dataOut_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_365 : BOOLEAN;
    signal ap_condition_151 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_dataOut_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => m_axis_TDATA_int,
        vld_in => m_axis_TVALID_int,
        ack_in => m_axis_TREADY_int,
        data_out => m_axis_TDATA,
        vld_out => regslice_both_dataOut_V_data_V_U_vld_out,
        ack_out => m_axis_TREADY,
        apdone_blk => regslice_both_dataOut_V_data_V_U_apdone_blk);

    regslice_both_dataOut_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv64_3FFFFFFFFFF,
        vld_in => m_axis_TVALID_int,
        ack_in => regslice_both_dataOut_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_TKEEP,
        vld_out => regslice_both_dataOut_V_keep_V_U_vld_out,
        ack_out => m_axis_TREADY,
        apdone_blk => regslice_both_dataOut_V_keep_V_U_apdone_blk);

    regslice_both_dataOut_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_1,
        vld_in => m_axis_TVALID_int,
        ack_in => regslice_both_dataOut_V_last_V_U_ack_in_dummy,
        data_out => m_axis_TLAST,
        vld_out => regslice_both_dataOut_V_last_V_U_vld_out,
        ack_out => m_axis_TREADY,
        apdone_blk => regslice_both_dataOut_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    gap_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (gap_state_load_load_fu_177_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                gap_state <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (gap_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_nbreadreq_fu_132_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_124_p3 = ap_const_lv1_0) and (gap_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                gap_state <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    header_header_V_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_365)) then
                if ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1)) then 
                    header_header_V_1 <= p_Result_s_fu_287_p5;
                elsif (((tmp_3_nbreadreq_fu_132_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_124_p3 = ap_const_lv1_0))) then 
                    header_header_V_1 <= p_Result_6_fu_219_p5;
                end if;
            end if; 
        end if;
    end process;

    header_idx_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_151)) then
                if ((gap_state_load_reg_424 = ap_const_lv1_1)) then 
                    header_idx_1 <= select_ln82_fu_397_p3;
                elsif ((gap_state_load_reg_424 = ap_const_lv1_0)) then 
                    header_idx_1 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gap_state_load_reg_424 <= gap_state;
                gap_state_load_reg_424_pp0_iter1_reg <= gap_state_load_reg_424;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Lo_assign_fu_325_p3 <= (header_idx_1 & ap_const_lv9_0);
    add_ln85_fu_391_p2 <= std_logic_vector(unsigned(header_idx_1) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter2, arpRequestMetaFifo_V_empty_n, ap_predicate_op12_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op20_read_state1, regslice_both_dataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((regslice_both_dataOut_V_data_V_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op20_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestMetaFifo_V_empty_n, ap_predicate_op12_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op20_read_state1, ap_block_state2_io, regslice_both_dataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_dataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op20_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestMetaFifo_V_empty_n, ap_predicate_op12_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op20_read_state1, ap_block_state2_io, regslice_both_dataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_dataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op20_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, arpRequestMetaFifo_V_empty_n, ap_predicate_op12_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op20_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op20_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(gap_state_load_reg_424, m_axis_TREADY_int)
    begin
                ap_block_state2_io <= ((gap_state_load_reg_424 = ap_const_lv1_1) and (m_axis_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(gap_state_load_reg_424_pp0_iter1_reg, m_axis_TREADY_int)
    begin
                ap_block_state3_io <= ((gap_state_load_reg_424_pp0_iter1_reg = ap_const_lv1_1) and (m_axis_TREADY_int = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(regslice_both_dataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (regslice_both_dataOut_V_data_V_U_apdone_blk = ap_const_logic_1);
    end process;


    ap_condition_151_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_151 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_365_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, gap_state)
    begin
                ap_condition_365 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (gap_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op12_read_state1_assign_proc : process(tmp_nbreadreq_fu_124_p3, tmp_3_nbreadreq_fu_132_p3, gap_state)
    begin
                ap_predicate_op12_read_state1 <= ((tmp_3_nbreadreq_fu_132_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_124_p3 = ap_const_lv1_0) and (gap_state = ap_const_lv1_0));
    end process;


    ap_predicate_op20_read_state1_assign_proc : process(tmp_nbreadreq_fu_124_p3, gap_state)
    begin
                ap_predicate_op20_read_state1 <= ((tmp_nbreadreq_fu_124_p3 = ap_const_lv1_1) and (gap_state = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    arpReplyMetaFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, arpReplyMetaFifo_V_empty_n, ap_predicate_op20_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpReplyMetaFifo_V_blk_n <= arpReplyMetaFifo_V_empty_n;
        else 
            arpReplyMetaFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpReplyMetaFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op20_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op20_read_state1 = ap_const_boolean_1))) then 
            arpReplyMetaFifo_V_read <= ap_const_logic_1;
        else 
            arpReplyMetaFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;


    arpRequestMetaFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, arpRequestMetaFifo_V_empty_n, ap_predicate_op12_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpRequestMetaFifo_V_blk_n <= arpRequestMetaFifo_V_empty_n;
        else 
            arpRequestMetaFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpRequestMetaFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op12_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1))) then 
            arpRequestMetaFifo_V_read <= ap_const_logic_1;
        else 
            arpRequestMetaFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    gap_state_load_load_fu_177_p1 <= gap_state;
    icmp_ln647_fu_339_p2 <= "1" when (unsigned(Lo_assign_fu_325_p3) > unsigned(ap_const_lv25_14F)) else "0";
    icmp_ln82_fu_333_p2 <= "1" when (unsigned(Lo_assign_fu_325_p3) < unsigned(ap_const_lv25_150)) else "0";

    m_axis_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, gap_state_load_reg_424, gap_state_load_reg_424_pp0_iter1_reg, ap_block_pp0_stage0, m_axis_TREADY_int)
    begin
        if ((((gap_state_load_reg_424_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((gap_state_load_reg_424 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            m_axis_TDATA_blk_n <= m_axis_TREADY_int;
        else 
            m_axis_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sendWord_data_V_fu_405_p3),512));
    m_axis_TVALID <= regslice_both_dataOut_V_data_V_U_vld_out;

    m_axis_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gap_state_load_reg_424, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (gap_state_load_reg_424 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_193_p5 <= (p_Result_9_fu_181_p5(335 downto 96) & myMacAddress_V & p_Result_9_fu_181_p5(47 downto 0));
    p_Result_11_fu_385_p2 <= (select_ln647_2_fu_377_p3 and select_ln647_1_fu_369_p3);
    p_Result_6_fu_219_p5 <= (tmp_6_fu_205_p6 & p_Result_10_fu_193_p5(159 downto 0));
    p_Result_7_fu_241_p5 <= (header_header_V_1(335 downto 48) & trunc_ln321_fu_237_p1);
    p_Result_8_fu_253_p5 <= (p_Result_7_fu_241_p5(335 downto 96) & myMacAddress_V & p_Result_7_fu_241_p5(47 downto 0));
    p_Result_9_fu_181_p5 <= (header_header_V_1(335 downto 48) & ap_const_lv48_FFFFFFFFFFFF);
    p_Result_s_fu_287_p5 <= (tmp_5_fu_275_p5 & p_Result_8_fu_253_p5(159 downto 0));
    select_ln647_1_fu_369_p3 <= 
        zext_ln647_fu_365_p1 when (icmp_ln647_fu_339_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_2_fu_377_p3 <= 
        ap_const_lv336_lc_6 when (icmp_ln647_fu_339_p2(0) = '1') else 
        ap_const_lv336_lc_4;
    select_ln647_fu_357_p3 <= 
        trunc_ln647_fu_345_p1 when (icmp_ln647_fu_339_p2(0) = '1') else 
        tmp_7_fu_349_p3;
    select_ln82_fu_397_p3 <= 
        add_ln85_fu_391_p2 when (icmp_ln82_fu_333_p2(0) = '1') else 
        header_idx_1;
    sendWord_data_V_fu_405_p3 <= 
        p_Result_11_fu_385_p2 when (icmp_ln82_fu_333_p2(0) = '1') else 
        ap_const_lv336_lc_2;
    tmp_3_nbreadreq_fu_132_p3 <= (0=>(arpRequestMetaFifo_V_empty_n), others=>'-');
    tmp_4_fu_265_p4 <= arpReplyMetaFifo_V_dout(127 downto 48);
    tmp_5_fu_275_p5 <= (((tmp_4_fu_265_p4 & myIpAddress_V) & myMacAddress_V) & ap_const_lv16_200);
    tmp_6_fu_205_p6 <= ((((arpRequestMetaFifo_V_dout & ap_const_lv48_0) & myIpAddress_V) & myMacAddress_V) & ap_const_lv16_100);
    tmp_7_fu_349_p3 <= header_header_V_1(335 downto 335);
    tmp_nbreadreq_fu_124_p3 <= (0=>(arpReplyMetaFifo_V_empty_n), others=>'-');
    trunc_ln321_fu_237_p1 <= arpReplyMetaFifo_V_dout(48 - 1 downto 0);
    trunc_ln647_fu_345_p1 <= header_header_V_1(1 - 1 downto 0);
    zext_ln647_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_fu_357_p3),336));
end behav;
