-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iperf_client is
port (
    m_axis_listen_port_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_axis_listen_port_status_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_notifications_V_TDATA : IN STD_LOGIC_VECTOR (87 downto 0);
    m_axis_read_package_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axis_rx_metadata_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_open_connection_V_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    s_axis_open_status_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    m_axis_close_connection_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axis_tx_metadata_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tx_status_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    runExperiment_V : IN STD_LOGIC_VECTOR (0 downto 0);
    dualModeEn_V : IN STD_LOGIC_VECTOR (0 downto 0);
    useConn_V : IN STD_LOGIC_VECTOR (13 downto 0);
    pkgWordCount_V : IN STD_LOGIC_VECTOR (7 downto 0);
    packetGap_V : IN STD_LOGIC_VECTOR (7 downto 0);
    timeInSeconds_V : IN STD_LOGIC_VECTOR (31 downto 0);
    timeInCycles_V : IN STD_LOGIC_VECTOR (63 downto 0);
    useIpAddr_V : IN STD_LOGIC_VECTOR (15 downto 0);
    regBasePort_V : IN STD_LOGIC_VECTOR (15 downto 0);
    regIpAddress0_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress1_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress2_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress3_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress4_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress5_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress6_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress7_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress8_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress9_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_tx_status_V_TVALID : IN STD_LOGIC;
    s_axis_tx_status_V_TREADY : OUT STD_LOGIC;
    s_axis_open_status_V_TVALID : IN STD_LOGIC;
    s_axis_open_status_V_TREADY : OUT STD_LOGIC;
    m_axis_tx_metadata_V_TVALID : OUT STD_LOGIC;
    m_axis_tx_metadata_V_TREADY : IN STD_LOGIC;
    m_axis_tx_data_TVALID : OUT STD_LOGIC;
    m_axis_tx_data_TREADY : IN STD_LOGIC;
    m_axis_open_connection_V_TVALID : OUT STD_LOGIC;
    m_axis_open_connection_V_TREADY : IN STD_LOGIC;
    m_axis_close_connection_V_V_TVALID : OUT STD_LOGIC;
    m_axis_close_connection_V_V_TREADY : IN STD_LOGIC;
    m_axis_listen_port_V_V_TVALID : OUT STD_LOGIC;
    m_axis_listen_port_V_V_TREADY : IN STD_LOGIC;
    s_axis_listen_port_status_V_TVALID : IN STD_LOGIC;
    s_axis_listen_port_status_V_TREADY : OUT STD_LOGIC;
    s_axis_notifications_V_TVALID : IN STD_LOGIC;
    s_axis_notifications_V_TREADY : OUT STD_LOGIC;
    m_axis_read_package_V_TVALID : OUT STD_LOGIC;
    m_axis_read_package_V_TREADY : IN STD_LOGIC;
    s_axis_rx_metadata_V_V_TVALID : IN STD_LOGIC;
    s_axis_rx_metadata_V_V_TREADY : OUT STD_LOGIC;
    s_axis_rx_data_TVALID : IN STD_LOGIC;
    s_axis_rx_data_TREADY : OUT STD_LOGIC );
end;


architecture behav of iperf_client is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iperf_client,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.800000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=38,HLS_SYN_DSP=0,HLS_SYN_FF=3707,HLS_SYN_LUT=4924,HLS_VERSION=2020_1}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal iperf_client_entry3_U0_ap_start : STD_LOGIC;
    signal iperf_client_entry3_U0_ap_done : STD_LOGIC;
    signal iperf_client_entry3_U0_ap_continue : STD_LOGIC;
    signal iperf_client_entry3_U0_ap_idle : STD_LOGIC;
    signal iperf_client_entry3_U0_ap_ready : STD_LOGIC;
    signal iperf_client_entry3_U0_runExperiment_V_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal iperf_client_entry3_U0_runExperiment_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_dualModeEn_V_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal iperf_client_entry3_U0_dualModeEn_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_useConn_V_out_din : STD_LOGIC_VECTOR (13 downto 0);
    signal iperf_client_entry3_U0_useConn_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_pkgWordCount_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal iperf_client_entry3_U0_pkgWordCount_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_packetGap_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal iperf_client_entry3_U0_packetGap_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_timeInSeconds_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_timeInSeconds_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_timeInCycles_V_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal iperf_client_entry3_U0_timeInCycles_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_useIpAddr_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal iperf_client_entry3_U0_useIpAddr_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress0_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress0_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress1_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress1_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress2_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress2_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress3_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress3_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress4_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress4_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress5_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress5_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress6_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress6_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress7_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress7_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress8_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress8_V_out_write : STD_LOGIC;
    signal iperf_client_entry3_U0_regIpAddress9_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry3_U0_regIpAddress9_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_ap_start : STD_LOGIC;
    signal iperf_client_entry20_U0_ap_done : STD_LOGIC;
    signal iperf_client_entry20_U0_ap_continue : STD_LOGIC;
    signal iperf_client_entry20_U0_ap_idle : STD_LOGIC;
    signal iperf_client_entry20_U0_ap_ready : STD_LOGIC;
    signal iperf_client_entry20_U0_runExperiment_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_dualModeEn_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_useConn_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_pkgWordCount_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_packetGap_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_timeInSeconds_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_timeInCycles_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_useIpAddr_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress0_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress1_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress2_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress3_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress4_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress5_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress6_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress7_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress8_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress9_V_read : STD_LOGIC;
    signal iperf_client_entry20_U0_runExperiment_V_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal iperf_client_entry20_U0_runExperiment_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_dualModeEn_V_out_din : STD_LOGIC_VECTOR (0 downto 0);
    signal iperf_client_entry20_U0_dualModeEn_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_useConn_V_out_din : STD_LOGIC_VECTOR (13 downto 0);
    signal iperf_client_entry20_U0_useConn_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_pkgWordCount_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal iperf_client_entry20_U0_pkgWordCount_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_packetGap_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal iperf_client_entry20_U0_packetGap_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_timeInSeconds_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_timeInSeconds_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_timeInCycles_V_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal iperf_client_entry20_U0_timeInCycles_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_useIpAddr_V_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal iperf_client_entry20_U0_useIpAddr_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress0_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress0_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress1_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress1_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress2_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress2_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress3_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress3_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress4_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress4_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress5_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress5_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress6_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress6_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress7_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress7_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress8_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress8_V_out_write : STD_LOGIC;
    signal iperf_client_entry20_U0_regIpAddress9_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal iperf_client_entry20_U0_regIpAddress9_V_out_write : STD_LOGIC;
    signal status_handler_U0_ap_start : STD_LOGIC;
    signal status_handler_U0_ap_done : STD_LOGIC;
    signal status_handler_U0_ap_continue : STD_LOGIC;
    signal status_handler_U0_ap_idle : STD_LOGIC;
    signal status_handler_U0_ap_ready : STD_LOGIC;
    signal status_handler_U0_txStatusBuffer_V_ses_din : STD_LOGIC_VECTOR (15 downto 0);
    signal status_handler_U0_txStatusBuffer_V_ses_write : STD_LOGIC;
    signal status_handler_U0_txStatusBuffer_V_err_din : STD_LOGIC_VECTOR (1 downto 0);
    signal status_handler_U0_txStatusBuffer_V_err_write : STD_LOGIC;
    signal status_handler_U0_txStatus_V_TREADY : STD_LOGIC;
    signal openStatus_handler_U0_ap_start : STD_LOGIC;
    signal openStatus_handler_U0_ap_done : STD_LOGIC;
    signal openStatus_handler_U0_ap_continue : STD_LOGIC;
    signal openStatus_handler_U0_ap_idle : STD_LOGIC;
    signal openStatus_handler_U0_ap_ready : STD_LOGIC;
    signal openStatus_handler_U0_openConStatusBuffer_1_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal openStatus_handler_U0_openConStatusBuffer_1_0_write : STD_LOGIC;
    signal openStatus_handler_U0_openConStatusBuffer_s_1_din : STD_LOGIC_VECTOR (0 downto 0);
    signal openStatus_handler_U0_openConStatusBuffer_s_1_write : STD_LOGIC;
    signal openStatus_handler_U0_openConStatus_V_TREADY : STD_LOGIC;
    signal txMetaData_handler_U0_ap_start : STD_LOGIC;
    signal txMetaData_handler_U0_ap_done : STD_LOGIC;
    signal txMetaData_handler_U0_ap_continue : STD_LOGIC;
    signal txMetaData_handler_U0_ap_idle : STD_LOGIC;
    signal txMetaData_handler_U0_ap_ready : STD_LOGIC;
    signal txMetaData_handler_U0_txMetaDataBuffer_V_s_read : STD_LOGIC;
    signal txMetaData_handler_U0_txMetaDataBuffer_V_l_read : STD_LOGIC;
    signal txMetaData_handler_U0_txMetaData_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal txMetaData_handler_U0_txMetaData_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal txDataBuffer_handler_U0_ap_start : STD_LOGIC;
    signal txDataBuffer_handler_U0_ap_done : STD_LOGIC;
    signal txDataBuffer_handler_U0_ap_continue : STD_LOGIC;
    signal txDataBuffer_handler_U0_ap_idle : STD_LOGIC;
    signal txDataBuffer_handler_U0_ap_ready : STD_LOGIC;
    signal txDataBuffer_handler_U0_txDataBuffer_V_data_s_read : STD_LOGIC;
    signal txDataBuffer_handler_U0_txDataBuffer_V_keep_s_read : STD_LOGIC;
    signal txDataBuffer_handler_U0_txDataBuffer_V_last_s_read : STD_LOGIC;
    signal txDataBuffer_handler_U0_m_axis_tx_data_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal txDataBuffer_handler_U0_m_axis_tx_data_TVALID : STD_LOGIC;
    signal txDataBuffer_handler_U0_m_axis_tx_data_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal txDataBuffer_handler_U0_m_axis_tx_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal client_512_U0_ap_start : STD_LOGIC;
    signal client_512_U0_ap_done : STD_LOGIC;
    signal client_512_U0_ap_continue : STD_LOGIC;
    signal client_512_U0_ap_idle : STD_LOGIC;
    signal client_512_U0_ap_ready : STD_LOGIC;
    signal client_512_U0_runExperiment_V_read : STD_LOGIC;
    signal client_512_U0_dualModeEn_V_read : STD_LOGIC;
    signal client_512_U0_useConn_V_read : STD_LOGIC;
    signal client_512_U0_useIpAddr_V_read : STD_LOGIC;
    signal client_512_U0_pkgWordCount_V_read : STD_LOGIC;
    signal client_512_U0_packetGap_V_read : STD_LOGIC;
    signal client_512_U0_timeInSeconds_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress0_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress1_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress2_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress3_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress4_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress5_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress6_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress7_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress8_V_read : STD_LOGIC;
    signal client_512_U0_regIpAddress9_V_read : STD_LOGIC;
    signal client_512_U0_txStatusBuffer_V_ses_read : STD_LOGIC;
    signal client_512_U0_txStatusBuffer_V_err_read : STD_LOGIC;
    signal client_512_U0_openConStatusBuffer_1_0_read : STD_LOGIC;
    signal client_512_U0_openConStatusBuffer_s_1_read : STD_LOGIC;
    signal client_512_U0_txDataBuffer_V_data_s_din : STD_LOGIC_VECTOR (511 downto 0);
    signal client_512_U0_txDataBuffer_V_data_s_write : STD_LOGIC;
    signal client_512_U0_txDataBuffer_V_keep_s_din : STD_LOGIC_VECTOR (63 downto 0);
    signal client_512_U0_txDataBuffer_V_keep_s_write : STD_LOGIC;
    signal client_512_U0_txDataBuffer_V_last_s_din : STD_LOGIC_VECTOR (0 downto 0);
    signal client_512_U0_txDataBuffer_V_last_s_write : STD_LOGIC;
    signal client_512_U0_txMetaDataBuffer_V_s_din : STD_LOGIC_VECTOR (15 downto 0);
    signal client_512_U0_txMetaDataBuffer_V_s_write : STD_LOGIC;
    signal client_512_U0_txMetaDataBuffer_V_l_din : STD_LOGIC_VECTOR (15 downto 0);
    signal client_512_U0_txMetaDataBuffer_V_l_write : STD_LOGIC;
    signal client_512_U0_startSignalFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal client_512_U0_startSignalFifo_V_write : STD_LOGIC;
    signal client_512_U0_stopSignalFifo_V_read : STD_LOGIC;
    signal client_512_U0_openConnection_V_TDATA : STD_LOGIC_VECTOR (47 downto 0);
    signal client_512_U0_openConnection_V_TVALID : STD_LOGIC;
    signal client_512_U0_closeConnection_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal client_512_U0_closeConnection_V_V_TVALID : STD_LOGIC;
    signal server_512_U0_ap_start : STD_LOGIC;
    signal server_512_U0_ap_done : STD_LOGIC;
    signal server_512_U0_ap_continue : STD_LOGIC;
    signal server_512_U0_ap_idle : STD_LOGIC;
    signal server_512_U0_ap_ready : STD_LOGIC;
    signal server_512_U0_listenPort_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal server_512_U0_listenPort_V_V_TVALID : STD_LOGIC;
    signal server_512_U0_listenPortStatus_V_TREADY : STD_LOGIC;
    signal server_512_U0_notifications_V_TREADY : STD_LOGIC;
    signal server_512_U0_readRequest_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal server_512_U0_readRequest_V_TVALID : STD_LOGIC;
    signal server_512_U0_rxMetaData_V_V_TREADY : STD_LOGIC;
    signal server_512_U0_s_axis_rx_data_TREADY : STD_LOGIC;
    signal clock_U0_ap_start : STD_LOGIC;
    signal clock_U0_ap_done : STD_LOGIC;
    signal clock_U0_ap_continue : STD_LOGIC;
    signal clock_U0_ap_idle : STD_LOGIC;
    signal clock_U0_ap_ready : STD_LOGIC;
    signal clock_U0_timeInCycles_V_read : STD_LOGIC;
    signal clock_U0_startSignalFifo_V_read : STD_LOGIC;
    signal clock_U0_stopSignalFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal clock_U0_stopSignalFifo_V_write : STD_LOGIC;
    signal runExperiment_V_c1_full_n : STD_LOGIC;
    signal runExperiment_V_c1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal runExperiment_V_c1_empty_n : STD_LOGIC;
    signal dualModeEn_V_c2_full_n : STD_LOGIC;
    signal dualModeEn_V_c2_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal dualModeEn_V_c2_empty_n : STD_LOGIC;
    signal useConn_V_c3_full_n : STD_LOGIC;
    signal useConn_V_c3_dout : STD_LOGIC_VECTOR (13 downto 0);
    signal useConn_V_c3_empty_n : STD_LOGIC;
    signal pkgWordCount_V_c4_full_n : STD_LOGIC;
    signal pkgWordCount_V_c4_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal pkgWordCount_V_c4_empty_n : STD_LOGIC;
    signal packetGap_V_c5_full_n : STD_LOGIC;
    signal packetGap_V_c5_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal packetGap_V_c5_empty_n : STD_LOGIC;
    signal timeInSeconds_V_c6_full_n : STD_LOGIC;
    signal timeInSeconds_V_c6_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal timeInSeconds_V_c6_empty_n : STD_LOGIC;
    signal timeInCycles_V_c7_full_n : STD_LOGIC;
    signal timeInCycles_V_c7_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal timeInCycles_V_c7_empty_n : STD_LOGIC;
    signal useIpAddr_V_c8_full_n : STD_LOGIC;
    signal useIpAddr_V_c8_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal useIpAddr_V_c8_empty_n : STD_LOGIC;
    signal regIpAddress0_V_c9_full_n : STD_LOGIC;
    signal regIpAddress0_V_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress0_V_c9_empty_n : STD_LOGIC;
    signal regIpAddress1_V_c10_full_n : STD_LOGIC;
    signal regIpAddress1_V_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress1_V_c10_empty_n : STD_LOGIC;
    signal regIpAddress2_V_c11_full_n : STD_LOGIC;
    signal regIpAddress2_V_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress2_V_c11_empty_n : STD_LOGIC;
    signal regIpAddress3_V_c12_full_n : STD_LOGIC;
    signal regIpAddress3_V_c12_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress3_V_c12_empty_n : STD_LOGIC;
    signal regIpAddress4_V_c13_full_n : STD_LOGIC;
    signal regIpAddress4_V_c13_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress4_V_c13_empty_n : STD_LOGIC;
    signal regIpAddress5_V_c14_full_n : STD_LOGIC;
    signal regIpAddress5_V_c14_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress5_V_c14_empty_n : STD_LOGIC;
    signal regIpAddress6_V_c15_full_n : STD_LOGIC;
    signal regIpAddress6_V_c15_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress6_V_c15_empty_n : STD_LOGIC;
    signal regIpAddress7_V_c16_full_n : STD_LOGIC;
    signal regIpAddress7_V_c16_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress7_V_c16_empty_n : STD_LOGIC;
    signal regIpAddress8_V_c17_full_n : STD_LOGIC;
    signal regIpAddress8_V_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress8_V_c17_empty_n : STD_LOGIC;
    signal regIpAddress9_V_c18_full_n : STD_LOGIC;
    signal regIpAddress9_V_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress9_V_c18_empty_n : STD_LOGIC;
    signal runExperiment_V_c_full_n : STD_LOGIC;
    signal runExperiment_V_c_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal runExperiment_V_c_empty_n : STD_LOGIC;
    signal dualModeEn_V_c_full_n : STD_LOGIC;
    signal dualModeEn_V_c_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal dualModeEn_V_c_empty_n : STD_LOGIC;
    signal useConn_V_c_full_n : STD_LOGIC;
    signal useConn_V_c_dout : STD_LOGIC_VECTOR (13 downto 0);
    signal useConn_V_c_empty_n : STD_LOGIC;
    signal pkgWordCount_V_c_full_n : STD_LOGIC;
    signal pkgWordCount_V_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal pkgWordCount_V_c_empty_n : STD_LOGIC;
    signal packetGap_V_c_full_n : STD_LOGIC;
    signal packetGap_V_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal packetGap_V_c_empty_n : STD_LOGIC;
    signal timeInSeconds_V_c_full_n : STD_LOGIC;
    signal timeInSeconds_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal timeInSeconds_V_c_empty_n : STD_LOGIC;
    signal timeInCycles_V_c_full_n : STD_LOGIC;
    signal timeInCycles_V_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal timeInCycles_V_c_empty_n : STD_LOGIC;
    signal useIpAddr_V_c_full_n : STD_LOGIC;
    signal useIpAddr_V_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal useIpAddr_V_c_empty_n : STD_LOGIC;
    signal regIpAddress0_V_c_full_n : STD_LOGIC;
    signal regIpAddress0_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress0_V_c_empty_n : STD_LOGIC;
    signal regIpAddress1_V_c_full_n : STD_LOGIC;
    signal regIpAddress1_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress1_V_c_empty_n : STD_LOGIC;
    signal regIpAddress2_V_c_full_n : STD_LOGIC;
    signal regIpAddress2_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress2_V_c_empty_n : STD_LOGIC;
    signal regIpAddress3_V_c_full_n : STD_LOGIC;
    signal regIpAddress3_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress3_V_c_empty_n : STD_LOGIC;
    signal regIpAddress4_V_c_full_n : STD_LOGIC;
    signal regIpAddress4_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress4_V_c_empty_n : STD_LOGIC;
    signal regIpAddress5_V_c_full_n : STD_LOGIC;
    signal regIpAddress5_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress5_V_c_empty_n : STD_LOGIC;
    signal regIpAddress6_V_c_full_n : STD_LOGIC;
    signal regIpAddress6_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress6_V_c_empty_n : STD_LOGIC;
    signal regIpAddress7_V_c_full_n : STD_LOGIC;
    signal regIpAddress7_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress7_V_c_empty_n : STD_LOGIC;
    signal regIpAddress8_V_c_full_n : STD_LOGIC;
    signal regIpAddress8_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress8_V_c_empty_n : STD_LOGIC;
    signal regIpAddress9_V_c_full_n : STD_LOGIC;
    signal regIpAddress9_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress9_V_c_empty_n : STD_LOGIC;
    signal txStatusBuffer_V_ses_full_n : STD_LOGIC;
    signal txStatusBuffer_V_ses_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal txStatusBuffer_V_ses_empty_n : STD_LOGIC;
    signal txStatusBuffer_V_err_full_n : STD_LOGIC;
    signal txStatusBuffer_V_err_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal txStatusBuffer_V_err_empty_n : STD_LOGIC;
    signal openConStatusBuffer_1_0_full_n : STD_LOGIC;
    signal openConStatusBuffer_1_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal openConStatusBuffer_1_0_empty_n : STD_LOGIC;
    signal openConStatusBuffer_s_1_full_n : STD_LOGIC;
    signal openConStatusBuffer_s_1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal openConStatusBuffer_s_1_empty_n : STD_LOGIC;
    signal txMetaDataBuffer_V_s_full_n : STD_LOGIC;
    signal txMetaDataBuffer_V_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal txMetaDataBuffer_V_s_empty_n : STD_LOGIC;
    signal txMetaDataBuffer_V_l_full_n : STD_LOGIC;
    signal txMetaDataBuffer_V_l_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal txMetaDataBuffer_V_l_empty_n : STD_LOGIC;
    signal txDataBuffer_V_data_s_full_n : STD_LOGIC;
    signal txDataBuffer_V_data_s_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal txDataBuffer_V_data_s_empty_n : STD_LOGIC;
    signal txDataBuffer_V_keep_s_full_n : STD_LOGIC;
    signal txDataBuffer_V_keep_s_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal txDataBuffer_V_keep_s_empty_n : STD_LOGIC;
    signal txDataBuffer_V_last_s_full_n : STD_LOGIC;
    signal txDataBuffer_V_last_s_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal txDataBuffer_V_last_s_empty_n : STD_LOGIC;
    signal startSignalFifo_V_full_n : STD_LOGIC;
    signal startSignalFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal startSignalFifo_V_empty_n : STD_LOGIC;
    signal stopSignalFifo_V_full_n : STD_LOGIC;
    signal stopSignalFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal stopSignalFifo_V_empty_n : STD_LOGIC;

    component iperf_client_entry3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        runExperiment_V : IN STD_LOGIC_VECTOR (0 downto 0);
        dualModeEn_V : IN STD_LOGIC_VECTOR (0 downto 0);
        useConn_V : IN STD_LOGIC_VECTOR (13 downto 0);
        pkgWordCount_V : IN STD_LOGIC_VECTOR (7 downto 0);
        packetGap_V : IN STD_LOGIC_VECTOR (7 downto 0);
        timeInSeconds_V : IN STD_LOGIC_VECTOR (31 downto 0);
        timeInCycles_V : IN STD_LOGIC_VECTOR (63 downto 0);
        useIpAddr_V : IN STD_LOGIC_VECTOR (15 downto 0);
        regIpAddress0_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_V : IN STD_LOGIC_VECTOR (31 downto 0);
        runExperiment_V_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_V_out_full_n : IN STD_LOGIC;
        runExperiment_V_out_write : OUT STD_LOGIC;
        dualModeEn_V_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        dualModeEn_V_out_full_n : IN STD_LOGIC;
        dualModeEn_V_out_write : OUT STD_LOGIC;
        useConn_V_out_din : OUT STD_LOGIC_VECTOR (13 downto 0);
        useConn_V_out_full_n : IN STD_LOGIC;
        useConn_V_out_write : OUT STD_LOGIC;
        pkgWordCount_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        pkgWordCount_V_out_full_n : IN STD_LOGIC;
        pkgWordCount_V_out_write : OUT STD_LOGIC;
        packetGap_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        packetGap_V_out_full_n : IN STD_LOGIC;
        packetGap_V_out_write : OUT STD_LOGIC;
        timeInSeconds_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        timeInSeconds_V_out_full_n : IN STD_LOGIC;
        timeInSeconds_V_out_write : OUT STD_LOGIC;
        timeInCycles_V_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        timeInCycles_V_out_full_n : IN STD_LOGIC;
        timeInCycles_V_out_write : OUT STD_LOGIC;
        useIpAddr_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        useIpAddr_V_out_full_n : IN STD_LOGIC;
        useIpAddr_V_out_write : OUT STD_LOGIC;
        regIpAddress0_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress0_V_out_full_n : IN STD_LOGIC;
        regIpAddress0_V_out_write : OUT STD_LOGIC;
        regIpAddress1_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_V_out_full_n : IN STD_LOGIC;
        regIpAddress1_V_out_write : OUT STD_LOGIC;
        regIpAddress2_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_V_out_full_n : IN STD_LOGIC;
        regIpAddress2_V_out_write : OUT STD_LOGIC;
        regIpAddress3_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_V_out_full_n : IN STD_LOGIC;
        regIpAddress3_V_out_write : OUT STD_LOGIC;
        regIpAddress4_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_V_out_full_n : IN STD_LOGIC;
        regIpAddress4_V_out_write : OUT STD_LOGIC;
        regIpAddress5_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_V_out_full_n : IN STD_LOGIC;
        regIpAddress5_V_out_write : OUT STD_LOGIC;
        regIpAddress6_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_V_out_full_n : IN STD_LOGIC;
        regIpAddress6_V_out_write : OUT STD_LOGIC;
        regIpAddress7_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_V_out_full_n : IN STD_LOGIC;
        regIpAddress7_V_out_write : OUT STD_LOGIC;
        regIpAddress8_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_V_out_full_n : IN STD_LOGIC;
        regIpAddress8_V_out_write : OUT STD_LOGIC;
        regIpAddress9_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_V_out_full_n : IN STD_LOGIC;
        regIpAddress9_V_out_write : OUT STD_LOGIC );
    end component;


    component iperf_client_entry20 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        runExperiment_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_V_empty_n : IN STD_LOGIC;
        runExperiment_V_read : OUT STD_LOGIC;
        dualModeEn_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        dualModeEn_V_empty_n : IN STD_LOGIC;
        dualModeEn_V_read : OUT STD_LOGIC;
        useConn_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
        useConn_V_empty_n : IN STD_LOGIC;
        useConn_V_read : OUT STD_LOGIC;
        pkgWordCount_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        pkgWordCount_V_empty_n : IN STD_LOGIC;
        pkgWordCount_V_read : OUT STD_LOGIC;
        packetGap_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        packetGap_V_empty_n : IN STD_LOGIC;
        packetGap_V_read : OUT STD_LOGIC;
        timeInSeconds_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        timeInSeconds_V_empty_n : IN STD_LOGIC;
        timeInSeconds_V_read : OUT STD_LOGIC;
        timeInCycles_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        timeInCycles_V_empty_n : IN STD_LOGIC;
        timeInCycles_V_read : OUT STD_LOGIC;
        useIpAddr_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        useIpAddr_V_empty_n : IN STD_LOGIC;
        useIpAddr_V_read : OUT STD_LOGIC;
        regIpAddress0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress0_V_empty_n : IN STD_LOGIC;
        regIpAddress0_V_read : OUT STD_LOGIC;
        regIpAddress1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_V_empty_n : IN STD_LOGIC;
        regIpAddress1_V_read : OUT STD_LOGIC;
        regIpAddress2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_V_empty_n : IN STD_LOGIC;
        regIpAddress2_V_read : OUT STD_LOGIC;
        regIpAddress3_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_V_empty_n : IN STD_LOGIC;
        regIpAddress3_V_read : OUT STD_LOGIC;
        regIpAddress4_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_V_empty_n : IN STD_LOGIC;
        regIpAddress4_V_read : OUT STD_LOGIC;
        regIpAddress5_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_V_empty_n : IN STD_LOGIC;
        regIpAddress5_V_read : OUT STD_LOGIC;
        regIpAddress6_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_V_empty_n : IN STD_LOGIC;
        regIpAddress6_V_read : OUT STD_LOGIC;
        regIpAddress7_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_V_empty_n : IN STD_LOGIC;
        regIpAddress7_V_read : OUT STD_LOGIC;
        regIpAddress8_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_V_empty_n : IN STD_LOGIC;
        regIpAddress8_V_read : OUT STD_LOGIC;
        regIpAddress9_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_V_empty_n : IN STD_LOGIC;
        regIpAddress9_V_read : OUT STD_LOGIC;
        runExperiment_V_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_V_out_full_n : IN STD_LOGIC;
        runExperiment_V_out_write : OUT STD_LOGIC;
        dualModeEn_V_out_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        dualModeEn_V_out_full_n : IN STD_LOGIC;
        dualModeEn_V_out_write : OUT STD_LOGIC;
        useConn_V_out_din : OUT STD_LOGIC_VECTOR (13 downto 0);
        useConn_V_out_full_n : IN STD_LOGIC;
        useConn_V_out_write : OUT STD_LOGIC;
        pkgWordCount_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        pkgWordCount_V_out_full_n : IN STD_LOGIC;
        pkgWordCount_V_out_write : OUT STD_LOGIC;
        packetGap_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        packetGap_V_out_full_n : IN STD_LOGIC;
        packetGap_V_out_write : OUT STD_LOGIC;
        timeInSeconds_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        timeInSeconds_V_out_full_n : IN STD_LOGIC;
        timeInSeconds_V_out_write : OUT STD_LOGIC;
        timeInCycles_V_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        timeInCycles_V_out_full_n : IN STD_LOGIC;
        timeInCycles_V_out_write : OUT STD_LOGIC;
        useIpAddr_V_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        useIpAddr_V_out_full_n : IN STD_LOGIC;
        useIpAddr_V_out_write : OUT STD_LOGIC;
        regIpAddress0_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress0_V_out_full_n : IN STD_LOGIC;
        regIpAddress0_V_out_write : OUT STD_LOGIC;
        regIpAddress1_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_V_out_full_n : IN STD_LOGIC;
        regIpAddress1_V_out_write : OUT STD_LOGIC;
        regIpAddress2_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_V_out_full_n : IN STD_LOGIC;
        regIpAddress2_V_out_write : OUT STD_LOGIC;
        regIpAddress3_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_V_out_full_n : IN STD_LOGIC;
        regIpAddress3_V_out_write : OUT STD_LOGIC;
        regIpAddress4_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_V_out_full_n : IN STD_LOGIC;
        regIpAddress4_V_out_write : OUT STD_LOGIC;
        regIpAddress5_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_V_out_full_n : IN STD_LOGIC;
        regIpAddress5_V_out_write : OUT STD_LOGIC;
        regIpAddress6_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_V_out_full_n : IN STD_LOGIC;
        regIpAddress6_V_out_write : OUT STD_LOGIC;
        regIpAddress7_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_V_out_full_n : IN STD_LOGIC;
        regIpAddress7_V_out_write : OUT STD_LOGIC;
        regIpAddress8_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_V_out_full_n : IN STD_LOGIC;
        regIpAddress8_V_out_write : OUT STD_LOGIC;
        regIpAddress9_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_V_out_full_n : IN STD_LOGIC;
        regIpAddress9_V_out_write : OUT STD_LOGIC );
    end component;


    component status_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        txStatus_V_TVALID : IN STD_LOGIC;
        txStatusBuffer_V_ses_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        txStatusBuffer_V_ses_full_n : IN STD_LOGIC;
        txStatusBuffer_V_ses_write : OUT STD_LOGIC;
        txStatusBuffer_V_err_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        txStatusBuffer_V_err_full_n : IN STD_LOGIC;
        txStatusBuffer_V_err_write : OUT STD_LOGIC;
        txStatus_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        txStatus_V_TREADY : OUT STD_LOGIC );
    end component;


    component openStatus_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        openConStatus_V_TVALID : IN STD_LOGIC;
        openConStatusBuffer_1_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        openConStatusBuffer_1_0_full_n : IN STD_LOGIC;
        openConStatusBuffer_1_0_write : OUT STD_LOGIC;
        openConStatusBuffer_s_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        openConStatusBuffer_s_1_full_n : IN STD_LOGIC;
        openConStatusBuffer_s_1_write : OUT STD_LOGIC;
        openConStatus_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        openConStatus_V_TREADY : OUT STD_LOGIC );
    end component;


    component txMetaData_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        txMetaDataBuffer_V_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        txMetaDataBuffer_V_s_empty_n : IN STD_LOGIC;
        txMetaDataBuffer_V_s_read : OUT STD_LOGIC;
        txMetaDataBuffer_V_l_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        txMetaDataBuffer_V_l_empty_n : IN STD_LOGIC;
        txMetaDataBuffer_V_l_read : OUT STD_LOGIC;
        txMetaData_V_TREADY : IN STD_LOGIC;
        txMetaData_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        txMetaData_V_TVALID : OUT STD_LOGIC );
    end component;


    component txDataBuffer_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        txDataBuffer_V_data_s_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        txDataBuffer_V_data_s_empty_n : IN STD_LOGIC;
        txDataBuffer_V_data_s_read : OUT STD_LOGIC;
        txDataBuffer_V_keep_s_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        txDataBuffer_V_keep_s_empty_n : IN STD_LOGIC;
        txDataBuffer_V_keep_s_read : OUT STD_LOGIC;
        txDataBuffer_V_last_s_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        txDataBuffer_V_last_s_empty_n : IN STD_LOGIC;
        txDataBuffer_V_last_s_read : OUT STD_LOGIC;
        m_axis_tx_data_TREADY : IN STD_LOGIC;
        m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_tx_data_TVALID : OUT STD_LOGIC;
        m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component client_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        runExperiment_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_V_empty_n : IN STD_LOGIC;
        runExperiment_V_read : OUT STD_LOGIC;
        dualModeEn_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        dualModeEn_V_empty_n : IN STD_LOGIC;
        dualModeEn_V_read : OUT STD_LOGIC;
        useConn_V_dout : IN STD_LOGIC_VECTOR (13 downto 0);
        useConn_V_empty_n : IN STD_LOGIC;
        useConn_V_read : OUT STD_LOGIC;
        useIpAddr_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        useIpAddr_V_empty_n : IN STD_LOGIC;
        useIpAddr_V_read : OUT STD_LOGIC;
        pkgWordCount_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        pkgWordCount_V_empty_n : IN STD_LOGIC;
        pkgWordCount_V_read : OUT STD_LOGIC;
        packetGap_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        packetGap_V_empty_n : IN STD_LOGIC;
        packetGap_V_read : OUT STD_LOGIC;
        timeInSeconds_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        timeInSeconds_V_empty_n : IN STD_LOGIC;
        timeInSeconds_V_read : OUT STD_LOGIC;
        regIpAddress0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress0_V_empty_n : IN STD_LOGIC;
        regIpAddress0_V_read : OUT STD_LOGIC;
        regIpAddress1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_V_empty_n : IN STD_LOGIC;
        regIpAddress1_V_read : OUT STD_LOGIC;
        regIpAddress2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_V_empty_n : IN STD_LOGIC;
        regIpAddress2_V_read : OUT STD_LOGIC;
        regIpAddress3_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_V_empty_n : IN STD_LOGIC;
        regIpAddress3_V_read : OUT STD_LOGIC;
        regIpAddress4_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_V_empty_n : IN STD_LOGIC;
        regIpAddress4_V_read : OUT STD_LOGIC;
        regIpAddress5_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_V_empty_n : IN STD_LOGIC;
        regIpAddress5_V_read : OUT STD_LOGIC;
        regIpAddress6_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_V_empty_n : IN STD_LOGIC;
        regIpAddress6_V_read : OUT STD_LOGIC;
        regIpAddress7_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_V_empty_n : IN STD_LOGIC;
        regIpAddress7_V_read : OUT STD_LOGIC;
        regIpAddress8_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_V_empty_n : IN STD_LOGIC;
        regIpAddress8_V_read : OUT STD_LOGIC;
        regIpAddress9_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_V_empty_n : IN STD_LOGIC;
        regIpAddress9_V_read : OUT STD_LOGIC;
        txStatusBuffer_V_ses_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        txStatusBuffer_V_ses_empty_n : IN STD_LOGIC;
        txStatusBuffer_V_ses_read : OUT STD_LOGIC;
        txStatusBuffer_V_err_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        txStatusBuffer_V_err_empty_n : IN STD_LOGIC;
        txStatusBuffer_V_err_read : OUT STD_LOGIC;
        openConStatusBuffer_1_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        openConStatusBuffer_1_0_empty_n : IN STD_LOGIC;
        openConStatusBuffer_1_0_read : OUT STD_LOGIC;
        openConStatusBuffer_s_1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        openConStatusBuffer_s_1_empty_n : IN STD_LOGIC;
        openConStatusBuffer_s_1_read : OUT STD_LOGIC;
        txDataBuffer_V_data_s_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        txDataBuffer_V_data_s_full_n : IN STD_LOGIC;
        txDataBuffer_V_data_s_write : OUT STD_LOGIC;
        txDataBuffer_V_keep_s_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        txDataBuffer_V_keep_s_full_n : IN STD_LOGIC;
        txDataBuffer_V_keep_s_write : OUT STD_LOGIC;
        txDataBuffer_V_last_s_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        txDataBuffer_V_last_s_full_n : IN STD_LOGIC;
        txDataBuffer_V_last_s_write : OUT STD_LOGIC;
        txMetaDataBuffer_V_s_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        txMetaDataBuffer_V_s_full_n : IN STD_LOGIC;
        txMetaDataBuffer_V_s_write : OUT STD_LOGIC;
        txMetaDataBuffer_V_l_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        txMetaDataBuffer_V_l_full_n : IN STD_LOGIC;
        txMetaDataBuffer_V_l_write : OUT STD_LOGIC;
        startSignalFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        startSignalFifo_V_full_n : IN STD_LOGIC;
        startSignalFifo_V_write : OUT STD_LOGIC;
        stopSignalFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        stopSignalFifo_V_empty_n : IN STD_LOGIC;
        stopSignalFifo_V_read : OUT STD_LOGIC;
        closeConnection_V_V_TREADY : IN STD_LOGIC;
        openConnection_V_TREADY : IN STD_LOGIC;
        openConnection_V_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
        openConnection_V_TVALID : OUT STD_LOGIC;
        closeConnection_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        closeConnection_V_V_TVALID : OUT STD_LOGIC );
    end component;


    component server_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        listenPortStatus_V_TVALID : IN STD_LOGIC;
        notifications_V_TVALID : IN STD_LOGIC;
        rxMetaData_V_V_TVALID : IN STD_LOGIC;
        s_axis_rx_data_TVALID : IN STD_LOGIC;
        listenPort_V_V_TREADY : IN STD_LOGIC;
        readRequest_V_TREADY : IN STD_LOGIC;
        listenPort_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        listenPort_V_V_TVALID : OUT STD_LOGIC;
        listenPortStatus_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        listenPortStatus_V_TREADY : OUT STD_LOGIC;
        notifications_V_TDATA : IN STD_LOGIC_VECTOR (87 downto 0);
        notifications_V_TREADY : OUT STD_LOGIC;
        readRequest_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        readRequest_V_TVALID : OUT STD_LOGIC;
        rxMetaData_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        rxMetaData_V_V_TREADY : OUT STD_LOGIC;
        s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_axis_rx_data_TREADY : OUT STD_LOGIC;
        s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component clock IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        timeInCycles_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        timeInCycles_V_empty_n : IN STD_LOGIC;
        timeInCycles_V_read : OUT STD_LOGIC;
        startSignalFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        startSignalFifo_V_empty_n : IN STD_LOGIC;
        startSignalFifo_V_read : OUT STD_LOGIC;
        stopSignalFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        stopSignalFifo_V_full_n : IN STD_LOGIC;
        stopSignalFifo_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w14_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (13 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w14_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (13 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w2_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w512_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    iperf_client_entry3_U0 : component iperf_client_entry3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => iperf_client_entry3_U0_ap_start,
        ap_done => iperf_client_entry3_U0_ap_done,
        ap_continue => iperf_client_entry3_U0_ap_continue,
        ap_idle => iperf_client_entry3_U0_ap_idle,
        ap_ready => iperf_client_entry3_U0_ap_ready,
        runExperiment_V => runExperiment_V,
        dualModeEn_V => dualModeEn_V,
        useConn_V => useConn_V,
        pkgWordCount_V => pkgWordCount_V,
        packetGap_V => packetGap_V,
        timeInSeconds_V => timeInSeconds_V,
        timeInCycles_V => timeInCycles_V,
        useIpAddr_V => useIpAddr_V,
        regIpAddress0_V => regIpAddress0_V,
        regIpAddress1_V => regIpAddress1_V,
        regIpAddress2_V => regIpAddress2_V,
        regIpAddress3_V => regIpAddress3_V,
        regIpAddress4_V => regIpAddress4_V,
        regIpAddress5_V => regIpAddress5_V,
        regIpAddress6_V => regIpAddress6_V,
        regIpAddress7_V => regIpAddress7_V,
        regIpAddress8_V => regIpAddress8_V,
        regIpAddress9_V => regIpAddress9_V,
        runExperiment_V_out_din => iperf_client_entry3_U0_runExperiment_V_out_din,
        runExperiment_V_out_full_n => runExperiment_V_c1_full_n,
        runExperiment_V_out_write => iperf_client_entry3_U0_runExperiment_V_out_write,
        dualModeEn_V_out_din => iperf_client_entry3_U0_dualModeEn_V_out_din,
        dualModeEn_V_out_full_n => dualModeEn_V_c2_full_n,
        dualModeEn_V_out_write => iperf_client_entry3_U0_dualModeEn_V_out_write,
        useConn_V_out_din => iperf_client_entry3_U0_useConn_V_out_din,
        useConn_V_out_full_n => useConn_V_c3_full_n,
        useConn_V_out_write => iperf_client_entry3_U0_useConn_V_out_write,
        pkgWordCount_V_out_din => iperf_client_entry3_U0_pkgWordCount_V_out_din,
        pkgWordCount_V_out_full_n => pkgWordCount_V_c4_full_n,
        pkgWordCount_V_out_write => iperf_client_entry3_U0_pkgWordCount_V_out_write,
        packetGap_V_out_din => iperf_client_entry3_U0_packetGap_V_out_din,
        packetGap_V_out_full_n => packetGap_V_c5_full_n,
        packetGap_V_out_write => iperf_client_entry3_U0_packetGap_V_out_write,
        timeInSeconds_V_out_din => iperf_client_entry3_U0_timeInSeconds_V_out_din,
        timeInSeconds_V_out_full_n => timeInSeconds_V_c6_full_n,
        timeInSeconds_V_out_write => iperf_client_entry3_U0_timeInSeconds_V_out_write,
        timeInCycles_V_out_din => iperf_client_entry3_U0_timeInCycles_V_out_din,
        timeInCycles_V_out_full_n => timeInCycles_V_c7_full_n,
        timeInCycles_V_out_write => iperf_client_entry3_U0_timeInCycles_V_out_write,
        useIpAddr_V_out_din => iperf_client_entry3_U0_useIpAddr_V_out_din,
        useIpAddr_V_out_full_n => useIpAddr_V_c8_full_n,
        useIpAddr_V_out_write => iperf_client_entry3_U0_useIpAddr_V_out_write,
        regIpAddress0_V_out_din => iperf_client_entry3_U0_regIpAddress0_V_out_din,
        regIpAddress0_V_out_full_n => regIpAddress0_V_c9_full_n,
        regIpAddress0_V_out_write => iperf_client_entry3_U0_regIpAddress0_V_out_write,
        regIpAddress1_V_out_din => iperf_client_entry3_U0_regIpAddress1_V_out_din,
        regIpAddress1_V_out_full_n => regIpAddress1_V_c10_full_n,
        regIpAddress1_V_out_write => iperf_client_entry3_U0_regIpAddress1_V_out_write,
        regIpAddress2_V_out_din => iperf_client_entry3_U0_regIpAddress2_V_out_din,
        regIpAddress2_V_out_full_n => regIpAddress2_V_c11_full_n,
        regIpAddress2_V_out_write => iperf_client_entry3_U0_regIpAddress2_V_out_write,
        regIpAddress3_V_out_din => iperf_client_entry3_U0_regIpAddress3_V_out_din,
        regIpAddress3_V_out_full_n => regIpAddress3_V_c12_full_n,
        regIpAddress3_V_out_write => iperf_client_entry3_U0_regIpAddress3_V_out_write,
        regIpAddress4_V_out_din => iperf_client_entry3_U0_regIpAddress4_V_out_din,
        regIpAddress4_V_out_full_n => regIpAddress4_V_c13_full_n,
        regIpAddress4_V_out_write => iperf_client_entry3_U0_regIpAddress4_V_out_write,
        regIpAddress5_V_out_din => iperf_client_entry3_U0_regIpAddress5_V_out_din,
        regIpAddress5_V_out_full_n => regIpAddress5_V_c14_full_n,
        regIpAddress5_V_out_write => iperf_client_entry3_U0_regIpAddress5_V_out_write,
        regIpAddress6_V_out_din => iperf_client_entry3_U0_regIpAddress6_V_out_din,
        regIpAddress6_V_out_full_n => regIpAddress6_V_c15_full_n,
        regIpAddress6_V_out_write => iperf_client_entry3_U0_regIpAddress6_V_out_write,
        regIpAddress7_V_out_din => iperf_client_entry3_U0_regIpAddress7_V_out_din,
        regIpAddress7_V_out_full_n => regIpAddress7_V_c16_full_n,
        regIpAddress7_V_out_write => iperf_client_entry3_U0_regIpAddress7_V_out_write,
        regIpAddress8_V_out_din => iperf_client_entry3_U0_regIpAddress8_V_out_din,
        regIpAddress8_V_out_full_n => regIpAddress8_V_c17_full_n,
        regIpAddress8_V_out_write => iperf_client_entry3_U0_regIpAddress8_V_out_write,
        regIpAddress9_V_out_din => iperf_client_entry3_U0_regIpAddress9_V_out_din,
        regIpAddress9_V_out_full_n => regIpAddress9_V_c18_full_n,
        regIpAddress9_V_out_write => iperf_client_entry3_U0_regIpAddress9_V_out_write);

    iperf_client_entry20_U0 : component iperf_client_entry20
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => iperf_client_entry20_U0_ap_start,
        ap_done => iperf_client_entry20_U0_ap_done,
        ap_continue => iperf_client_entry20_U0_ap_continue,
        ap_idle => iperf_client_entry20_U0_ap_idle,
        ap_ready => iperf_client_entry20_U0_ap_ready,
        runExperiment_V_dout => runExperiment_V_c1_dout,
        runExperiment_V_empty_n => runExperiment_V_c1_empty_n,
        runExperiment_V_read => iperf_client_entry20_U0_runExperiment_V_read,
        dualModeEn_V_dout => dualModeEn_V_c2_dout,
        dualModeEn_V_empty_n => dualModeEn_V_c2_empty_n,
        dualModeEn_V_read => iperf_client_entry20_U0_dualModeEn_V_read,
        useConn_V_dout => useConn_V_c3_dout,
        useConn_V_empty_n => useConn_V_c3_empty_n,
        useConn_V_read => iperf_client_entry20_U0_useConn_V_read,
        pkgWordCount_V_dout => pkgWordCount_V_c4_dout,
        pkgWordCount_V_empty_n => pkgWordCount_V_c4_empty_n,
        pkgWordCount_V_read => iperf_client_entry20_U0_pkgWordCount_V_read,
        packetGap_V_dout => packetGap_V_c5_dout,
        packetGap_V_empty_n => packetGap_V_c5_empty_n,
        packetGap_V_read => iperf_client_entry20_U0_packetGap_V_read,
        timeInSeconds_V_dout => timeInSeconds_V_c6_dout,
        timeInSeconds_V_empty_n => timeInSeconds_V_c6_empty_n,
        timeInSeconds_V_read => iperf_client_entry20_U0_timeInSeconds_V_read,
        timeInCycles_V_dout => timeInCycles_V_c7_dout,
        timeInCycles_V_empty_n => timeInCycles_V_c7_empty_n,
        timeInCycles_V_read => iperf_client_entry20_U0_timeInCycles_V_read,
        useIpAddr_V_dout => useIpAddr_V_c8_dout,
        useIpAddr_V_empty_n => useIpAddr_V_c8_empty_n,
        useIpAddr_V_read => iperf_client_entry20_U0_useIpAddr_V_read,
        regIpAddress0_V_dout => regIpAddress0_V_c9_dout,
        regIpAddress0_V_empty_n => regIpAddress0_V_c9_empty_n,
        regIpAddress0_V_read => iperf_client_entry20_U0_regIpAddress0_V_read,
        regIpAddress1_V_dout => regIpAddress1_V_c10_dout,
        regIpAddress1_V_empty_n => regIpAddress1_V_c10_empty_n,
        regIpAddress1_V_read => iperf_client_entry20_U0_regIpAddress1_V_read,
        regIpAddress2_V_dout => regIpAddress2_V_c11_dout,
        regIpAddress2_V_empty_n => regIpAddress2_V_c11_empty_n,
        regIpAddress2_V_read => iperf_client_entry20_U0_regIpAddress2_V_read,
        regIpAddress3_V_dout => regIpAddress3_V_c12_dout,
        regIpAddress3_V_empty_n => regIpAddress3_V_c12_empty_n,
        regIpAddress3_V_read => iperf_client_entry20_U0_regIpAddress3_V_read,
        regIpAddress4_V_dout => regIpAddress4_V_c13_dout,
        regIpAddress4_V_empty_n => regIpAddress4_V_c13_empty_n,
        regIpAddress4_V_read => iperf_client_entry20_U0_regIpAddress4_V_read,
        regIpAddress5_V_dout => regIpAddress5_V_c14_dout,
        regIpAddress5_V_empty_n => regIpAddress5_V_c14_empty_n,
        regIpAddress5_V_read => iperf_client_entry20_U0_regIpAddress5_V_read,
        regIpAddress6_V_dout => regIpAddress6_V_c15_dout,
        regIpAddress6_V_empty_n => regIpAddress6_V_c15_empty_n,
        regIpAddress6_V_read => iperf_client_entry20_U0_regIpAddress6_V_read,
        regIpAddress7_V_dout => regIpAddress7_V_c16_dout,
        regIpAddress7_V_empty_n => regIpAddress7_V_c16_empty_n,
        regIpAddress7_V_read => iperf_client_entry20_U0_regIpAddress7_V_read,
        regIpAddress8_V_dout => regIpAddress8_V_c17_dout,
        regIpAddress8_V_empty_n => regIpAddress8_V_c17_empty_n,
        regIpAddress8_V_read => iperf_client_entry20_U0_regIpAddress8_V_read,
        regIpAddress9_V_dout => regIpAddress9_V_c18_dout,
        regIpAddress9_V_empty_n => regIpAddress9_V_c18_empty_n,
        regIpAddress9_V_read => iperf_client_entry20_U0_regIpAddress9_V_read,
        runExperiment_V_out_din => iperf_client_entry20_U0_runExperiment_V_out_din,
        runExperiment_V_out_full_n => runExperiment_V_c_full_n,
        runExperiment_V_out_write => iperf_client_entry20_U0_runExperiment_V_out_write,
        dualModeEn_V_out_din => iperf_client_entry20_U0_dualModeEn_V_out_din,
        dualModeEn_V_out_full_n => dualModeEn_V_c_full_n,
        dualModeEn_V_out_write => iperf_client_entry20_U0_dualModeEn_V_out_write,
        useConn_V_out_din => iperf_client_entry20_U0_useConn_V_out_din,
        useConn_V_out_full_n => useConn_V_c_full_n,
        useConn_V_out_write => iperf_client_entry20_U0_useConn_V_out_write,
        pkgWordCount_V_out_din => iperf_client_entry20_U0_pkgWordCount_V_out_din,
        pkgWordCount_V_out_full_n => pkgWordCount_V_c_full_n,
        pkgWordCount_V_out_write => iperf_client_entry20_U0_pkgWordCount_V_out_write,
        packetGap_V_out_din => iperf_client_entry20_U0_packetGap_V_out_din,
        packetGap_V_out_full_n => packetGap_V_c_full_n,
        packetGap_V_out_write => iperf_client_entry20_U0_packetGap_V_out_write,
        timeInSeconds_V_out_din => iperf_client_entry20_U0_timeInSeconds_V_out_din,
        timeInSeconds_V_out_full_n => timeInSeconds_V_c_full_n,
        timeInSeconds_V_out_write => iperf_client_entry20_U0_timeInSeconds_V_out_write,
        timeInCycles_V_out_din => iperf_client_entry20_U0_timeInCycles_V_out_din,
        timeInCycles_V_out_full_n => timeInCycles_V_c_full_n,
        timeInCycles_V_out_write => iperf_client_entry20_U0_timeInCycles_V_out_write,
        useIpAddr_V_out_din => iperf_client_entry20_U0_useIpAddr_V_out_din,
        useIpAddr_V_out_full_n => useIpAddr_V_c_full_n,
        useIpAddr_V_out_write => iperf_client_entry20_U0_useIpAddr_V_out_write,
        regIpAddress0_V_out_din => iperf_client_entry20_U0_regIpAddress0_V_out_din,
        regIpAddress0_V_out_full_n => regIpAddress0_V_c_full_n,
        regIpAddress0_V_out_write => iperf_client_entry20_U0_regIpAddress0_V_out_write,
        regIpAddress1_V_out_din => iperf_client_entry20_U0_regIpAddress1_V_out_din,
        regIpAddress1_V_out_full_n => regIpAddress1_V_c_full_n,
        regIpAddress1_V_out_write => iperf_client_entry20_U0_regIpAddress1_V_out_write,
        regIpAddress2_V_out_din => iperf_client_entry20_U0_regIpAddress2_V_out_din,
        regIpAddress2_V_out_full_n => regIpAddress2_V_c_full_n,
        regIpAddress2_V_out_write => iperf_client_entry20_U0_regIpAddress2_V_out_write,
        regIpAddress3_V_out_din => iperf_client_entry20_U0_regIpAddress3_V_out_din,
        regIpAddress3_V_out_full_n => regIpAddress3_V_c_full_n,
        regIpAddress3_V_out_write => iperf_client_entry20_U0_regIpAddress3_V_out_write,
        regIpAddress4_V_out_din => iperf_client_entry20_U0_regIpAddress4_V_out_din,
        regIpAddress4_V_out_full_n => regIpAddress4_V_c_full_n,
        regIpAddress4_V_out_write => iperf_client_entry20_U0_regIpAddress4_V_out_write,
        regIpAddress5_V_out_din => iperf_client_entry20_U0_regIpAddress5_V_out_din,
        regIpAddress5_V_out_full_n => regIpAddress5_V_c_full_n,
        regIpAddress5_V_out_write => iperf_client_entry20_U0_regIpAddress5_V_out_write,
        regIpAddress6_V_out_din => iperf_client_entry20_U0_regIpAddress6_V_out_din,
        regIpAddress6_V_out_full_n => regIpAddress6_V_c_full_n,
        regIpAddress6_V_out_write => iperf_client_entry20_U0_regIpAddress6_V_out_write,
        regIpAddress7_V_out_din => iperf_client_entry20_U0_regIpAddress7_V_out_din,
        regIpAddress7_V_out_full_n => regIpAddress7_V_c_full_n,
        regIpAddress7_V_out_write => iperf_client_entry20_U0_regIpAddress7_V_out_write,
        regIpAddress8_V_out_din => iperf_client_entry20_U0_regIpAddress8_V_out_din,
        regIpAddress8_V_out_full_n => regIpAddress8_V_c_full_n,
        regIpAddress8_V_out_write => iperf_client_entry20_U0_regIpAddress8_V_out_write,
        regIpAddress9_V_out_din => iperf_client_entry20_U0_regIpAddress9_V_out_din,
        regIpAddress9_V_out_full_n => regIpAddress9_V_c_full_n,
        regIpAddress9_V_out_write => iperf_client_entry20_U0_regIpAddress9_V_out_write);

    status_handler_U0 : component status_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => status_handler_U0_ap_start,
        ap_done => status_handler_U0_ap_done,
        ap_continue => status_handler_U0_ap_continue,
        ap_idle => status_handler_U0_ap_idle,
        ap_ready => status_handler_U0_ap_ready,
        txStatus_V_TVALID => s_axis_tx_status_V_TVALID,
        txStatusBuffer_V_ses_din => status_handler_U0_txStatusBuffer_V_ses_din,
        txStatusBuffer_V_ses_full_n => txStatusBuffer_V_ses_full_n,
        txStatusBuffer_V_ses_write => status_handler_U0_txStatusBuffer_V_ses_write,
        txStatusBuffer_V_err_din => status_handler_U0_txStatusBuffer_V_err_din,
        txStatusBuffer_V_err_full_n => txStatusBuffer_V_err_full_n,
        txStatusBuffer_V_err_write => status_handler_U0_txStatusBuffer_V_err_write,
        txStatus_V_TDATA => s_axis_tx_status_V_TDATA,
        txStatus_V_TREADY => status_handler_U0_txStatus_V_TREADY);

    openStatus_handler_U0 : component openStatus_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => openStatus_handler_U0_ap_start,
        ap_done => openStatus_handler_U0_ap_done,
        ap_continue => openStatus_handler_U0_ap_continue,
        ap_idle => openStatus_handler_U0_ap_idle,
        ap_ready => openStatus_handler_U0_ap_ready,
        openConStatus_V_TVALID => s_axis_open_status_V_TVALID,
        openConStatusBuffer_1_0_din => openStatus_handler_U0_openConStatusBuffer_1_0_din,
        openConStatusBuffer_1_0_full_n => openConStatusBuffer_1_0_full_n,
        openConStatusBuffer_1_0_write => openStatus_handler_U0_openConStatusBuffer_1_0_write,
        openConStatusBuffer_s_1_din => openStatus_handler_U0_openConStatusBuffer_s_1_din,
        openConStatusBuffer_s_1_full_n => openConStatusBuffer_s_1_full_n,
        openConStatusBuffer_s_1_write => openStatus_handler_U0_openConStatusBuffer_s_1_write,
        openConStatus_V_TDATA => s_axis_open_status_V_TDATA,
        openConStatus_V_TREADY => openStatus_handler_U0_openConStatus_V_TREADY);

    txMetaData_handler_U0 : component txMetaData_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => txMetaData_handler_U0_ap_start,
        ap_done => txMetaData_handler_U0_ap_done,
        ap_continue => txMetaData_handler_U0_ap_continue,
        ap_idle => txMetaData_handler_U0_ap_idle,
        ap_ready => txMetaData_handler_U0_ap_ready,
        txMetaDataBuffer_V_s_dout => txMetaDataBuffer_V_s_dout,
        txMetaDataBuffer_V_s_empty_n => txMetaDataBuffer_V_s_empty_n,
        txMetaDataBuffer_V_s_read => txMetaData_handler_U0_txMetaDataBuffer_V_s_read,
        txMetaDataBuffer_V_l_dout => txMetaDataBuffer_V_l_dout,
        txMetaDataBuffer_V_l_empty_n => txMetaDataBuffer_V_l_empty_n,
        txMetaDataBuffer_V_l_read => txMetaData_handler_U0_txMetaDataBuffer_V_l_read,
        txMetaData_V_TREADY => m_axis_tx_metadata_V_TREADY,
        txMetaData_V_TDATA => txMetaData_handler_U0_txMetaData_V_TDATA,
        txMetaData_V_TVALID => txMetaData_handler_U0_txMetaData_V_TVALID);

    txDataBuffer_handler_U0 : component txDataBuffer_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => txDataBuffer_handler_U0_ap_start,
        ap_done => txDataBuffer_handler_U0_ap_done,
        ap_continue => txDataBuffer_handler_U0_ap_continue,
        ap_idle => txDataBuffer_handler_U0_ap_idle,
        ap_ready => txDataBuffer_handler_U0_ap_ready,
        txDataBuffer_V_data_s_dout => txDataBuffer_V_data_s_dout,
        txDataBuffer_V_data_s_empty_n => txDataBuffer_V_data_s_empty_n,
        txDataBuffer_V_data_s_read => txDataBuffer_handler_U0_txDataBuffer_V_data_s_read,
        txDataBuffer_V_keep_s_dout => txDataBuffer_V_keep_s_dout,
        txDataBuffer_V_keep_s_empty_n => txDataBuffer_V_keep_s_empty_n,
        txDataBuffer_V_keep_s_read => txDataBuffer_handler_U0_txDataBuffer_V_keep_s_read,
        txDataBuffer_V_last_s_dout => txDataBuffer_V_last_s_dout,
        txDataBuffer_V_last_s_empty_n => txDataBuffer_V_last_s_empty_n,
        txDataBuffer_V_last_s_read => txDataBuffer_handler_U0_txDataBuffer_V_last_s_read,
        m_axis_tx_data_TREADY => m_axis_tx_data_TREADY,
        m_axis_tx_data_TDATA => txDataBuffer_handler_U0_m_axis_tx_data_TDATA,
        m_axis_tx_data_TVALID => txDataBuffer_handler_U0_m_axis_tx_data_TVALID,
        m_axis_tx_data_TKEEP => txDataBuffer_handler_U0_m_axis_tx_data_TKEEP,
        m_axis_tx_data_TLAST => txDataBuffer_handler_U0_m_axis_tx_data_TLAST);

    client_512_U0 : component client_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => client_512_U0_ap_start,
        ap_done => client_512_U0_ap_done,
        ap_continue => client_512_U0_ap_continue,
        ap_idle => client_512_U0_ap_idle,
        ap_ready => client_512_U0_ap_ready,
        runExperiment_V_dout => runExperiment_V_c_dout,
        runExperiment_V_empty_n => runExperiment_V_c_empty_n,
        runExperiment_V_read => client_512_U0_runExperiment_V_read,
        dualModeEn_V_dout => dualModeEn_V_c_dout,
        dualModeEn_V_empty_n => dualModeEn_V_c_empty_n,
        dualModeEn_V_read => client_512_U0_dualModeEn_V_read,
        useConn_V_dout => useConn_V_c_dout,
        useConn_V_empty_n => useConn_V_c_empty_n,
        useConn_V_read => client_512_U0_useConn_V_read,
        useIpAddr_V_dout => useIpAddr_V_c_dout,
        useIpAddr_V_empty_n => useIpAddr_V_c_empty_n,
        useIpAddr_V_read => client_512_U0_useIpAddr_V_read,
        pkgWordCount_V_dout => pkgWordCount_V_c_dout,
        pkgWordCount_V_empty_n => pkgWordCount_V_c_empty_n,
        pkgWordCount_V_read => client_512_U0_pkgWordCount_V_read,
        packetGap_V_dout => packetGap_V_c_dout,
        packetGap_V_empty_n => packetGap_V_c_empty_n,
        packetGap_V_read => client_512_U0_packetGap_V_read,
        timeInSeconds_V_dout => timeInSeconds_V_c_dout,
        timeInSeconds_V_empty_n => timeInSeconds_V_c_empty_n,
        timeInSeconds_V_read => client_512_U0_timeInSeconds_V_read,
        regIpAddress0_V_dout => regIpAddress0_V_c_dout,
        regIpAddress0_V_empty_n => regIpAddress0_V_c_empty_n,
        regIpAddress0_V_read => client_512_U0_regIpAddress0_V_read,
        regIpAddress1_V_dout => regIpAddress1_V_c_dout,
        regIpAddress1_V_empty_n => regIpAddress1_V_c_empty_n,
        regIpAddress1_V_read => client_512_U0_regIpAddress1_V_read,
        regIpAddress2_V_dout => regIpAddress2_V_c_dout,
        regIpAddress2_V_empty_n => regIpAddress2_V_c_empty_n,
        regIpAddress2_V_read => client_512_U0_regIpAddress2_V_read,
        regIpAddress3_V_dout => regIpAddress3_V_c_dout,
        regIpAddress3_V_empty_n => regIpAddress3_V_c_empty_n,
        regIpAddress3_V_read => client_512_U0_regIpAddress3_V_read,
        regIpAddress4_V_dout => regIpAddress4_V_c_dout,
        regIpAddress4_V_empty_n => regIpAddress4_V_c_empty_n,
        regIpAddress4_V_read => client_512_U0_regIpAddress4_V_read,
        regIpAddress5_V_dout => regIpAddress5_V_c_dout,
        regIpAddress5_V_empty_n => regIpAddress5_V_c_empty_n,
        regIpAddress5_V_read => client_512_U0_regIpAddress5_V_read,
        regIpAddress6_V_dout => regIpAddress6_V_c_dout,
        regIpAddress6_V_empty_n => regIpAddress6_V_c_empty_n,
        regIpAddress6_V_read => client_512_U0_regIpAddress6_V_read,
        regIpAddress7_V_dout => regIpAddress7_V_c_dout,
        regIpAddress7_V_empty_n => regIpAddress7_V_c_empty_n,
        regIpAddress7_V_read => client_512_U0_regIpAddress7_V_read,
        regIpAddress8_V_dout => regIpAddress8_V_c_dout,
        regIpAddress8_V_empty_n => regIpAddress8_V_c_empty_n,
        regIpAddress8_V_read => client_512_U0_regIpAddress8_V_read,
        regIpAddress9_V_dout => regIpAddress9_V_c_dout,
        regIpAddress9_V_empty_n => regIpAddress9_V_c_empty_n,
        regIpAddress9_V_read => client_512_U0_regIpAddress9_V_read,
        txStatusBuffer_V_ses_dout => txStatusBuffer_V_ses_dout,
        txStatusBuffer_V_ses_empty_n => txStatusBuffer_V_ses_empty_n,
        txStatusBuffer_V_ses_read => client_512_U0_txStatusBuffer_V_ses_read,
        txStatusBuffer_V_err_dout => txStatusBuffer_V_err_dout,
        txStatusBuffer_V_err_empty_n => txStatusBuffer_V_err_empty_n,
        txStatusBuffer_V_err_read => client_512_U0_txStatusBuffer_V_err_read,
        openConStatusBuffer_1_0_dout => openConStatusBuffer_1_0_dout,
        openConStatusBuffer_1_0_empty_n => openConStatusBuffer_1_0_empty_n,
        openConStatusBuffer_1_0_read => client_512_U0_openConStatusBuffer_1_0_read,
        openConStatusBuffer_s_1_dout => openConStatusBuffer_s_1_dout,
        openConStatusBuffer_s_1_empty_n => openConStatusBuffer_s_1_empty_n,
        openConStatusBuffer_s_1_read => client_512_U0_openConStatusBuffer_s_1_read,
        txDataBuffer_V_data_s_din => client_512_U0_txDataBuffer_V_data_s_din,
        txDataBuffer_V_data_s_full_n => txDataBuffer_V_data_s_full_n,
        txDataBuffer_V_data_s_write => client_512_U0_txDataBuffer_V_data_s_write,
        txDataBuffer_V_keep_s_din => client_512_U0_txDataBuffer_V_keep_s_din,
        txDataBuffer_V_keep_s_full_n => txDataBuffer_V_keep_s_full_n,
        txDataBuffer_V_keep_s_write => client_512_U0_txDataBuffer_V_keep_s_write,
        txDataBuffer_V_last_s_din => client_512_U0_txDataBuffer_V_last_s_din,
        txDataBuffer_V_last_s_full_n => txDataBuffer_V_last_s_full_n,
        txDataBuffer_V_last_s_write => client_512_U0_txDataBuffer_V_last_s_write,
        txMetaDataBuffer_V_s_din => client_512_U0_txMetaDataBuffer_V_s_din,
        txMetaDataBuffer_V_s_full_n => txMetaDataBuffer_V_s_full_n,
        txMetaDataBuffer_V_s_write => client_512_U0_txMetaDataBuffer_V_s_write,
        txMetaDataBuffer_V_l_din => client_512_U0_txMetaDataBuffer_V_l_din,
        txMetaDataBuffer_V_l_full_n => txMetaDataBuffer_V_l_full_n,
        txMetaDataBuffer_V_l_write => client_512_U0_txMetaDataBuffer_V_l_write,
        startSignalFifo_V_din => client_512_U0_startSignalFifo_V_din,
        startSignalFifo_V_full_n => startSignalFifo_V_full_n,
        startSignalFifo_V_write => client_512_U0_startSignalFifo_V_write,
        stopSignalFifo_V_dout => stopSignalFifo_V_dout,
        stopSignalFifo_V_empty_n => stopSignalFifo_V_empty_n,
        stopSignalFifo_V_read => client_512_U0_stopSignalFifo_V_read,
        closeConnection_V_V_TREADY => m_axis_close_connection_V_V_TREADY,
        openConnection_V_TREADY => m_axis_open_connection_V_TREADY,
        openConnection_V_TDATA => client_512_U0_openConnection_V_TDATA,
        openConnection_V_TVALID => client_512_U0_openConnection_V_TVALID,
        closeConnection_V_V_TDATA => client_512_U0_closeConnection_V_V_TDATA,
        closeConnection_V_V_TVALID => client_512_U0_closeConnection_V_V_TVALID);

    server_512_U0 : component server_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => server_512_U0_ap_start,
        ap_done => server_512_U0_ap_done,
        ap_continue => server_512_U0_ap_continue,
        ap_idle => server_512_U0_ap_idle,
        ap_ready => server_512_U0_ap_ready,
        listenPortStatus_V_TVALID => s_axis_listen_port_status_V_TVALID,
        notifications_V_TVALID => s_axis_notifications_V_TVALID,
        rxMetaData_V_V_TVALID => s_axis_rx_metadata_V_V_TVALID,
        s_axis_rx_data_TVALID => s_axis_rx_data_TVALID,
        listenPort_V_V_TREADY => m_axis_listen_port_V_V_TREADY,
        readRequest_V_TREADY => m_axis_read_package_V_TREADY,
        listenPort_V_V_TDATA => server_512_U0_listenPort_V_V_TDATA,
        listenPort_V_V_TVALID => server_512_U0_listenPort_V_V_TVALID,
        listenPortStatus_V_TDATA => s_axis_listen_port_status_V_TDATA,
        listenPortStatus_V_TREADY => server_512_U0_listenPortStatus_V_TREADY,
        notifications_V_TDATA => s_axis_notifications_V_TDATA,
        notifications_V_TREADY => server_512_U0_notifications_V_TREADY,
        readRequest_V_TDATA => server_512_U0_readRequest_V_TDATA,
        readRequest_V_TVALID => server_512_U0_readRequest_V_TVALID,
        rxMetaData_V_V_TDATA => s_axis_rx_metadata_V_V_TDATA,
        rxMetaData_V_V_TREADY => server_512_U0_rxMetaData_V_V_TREADY,
        s_axis_rx_data_TDATA => s_axis_rx_data_TDATA,
        s_axis_rx_data_TREADY => server_512_U0_s_axis_rx_data_TREADY,
        s_axis_rx_data_TKEEP => s_axis_rx_data_TKEEP,
        s_axis_rx_data_TLAST => s_axis_rx_data_TLAST);

    clock_U0 : component clock
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => clock_U0_ap_start,
        ap_done => clock_U0_ap_done,
        ap_continue => clock_U0_ap_continue,
        ap_idle => clock_U0_ap_idle,
        ap_ready => clock_U0_ap_ready,
        timeInCycles_V_dout => timeInCycles_V_c_dout,
        timeInCycles_V_empty_n => timeInCycles_V_c_empty_n,
        timeInCycles_V_read => clock_U0_timeInCycles_V_read,
        startSignalFifo_V_dout => startSignalFifo_V_dout,
        startSignalFifo_V_empty_n => startSignalFifo_V_empty_n,
        startSignalFifo_V_read => clock_U0_startSignalFifo_V_read,
        stopSignalFifo_V_din => clock_U0_stopSignalFifo_V_din,
        stopSignalFifo_V_full_n => stopSignalFifo_V_full_n,
        stopSignalFifo_V_write => clock_U0_stopSignalFifo_V_write);

    runExperiment_V_c1_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_runExperiment_V_out_din,
        if_full_n => runExperiment_V_c1_full_n,
        if_write => iperf_client_entry3_U0_runExperiment_V_out_write,
        if_dout => runExperiment_V_c1_dout,
        if_empty_n => runExperiment_V_c1_empty_n,
        if_read => iperf_client_entry20_U0_runExperiment_V_read);

    dualModeEn_V_c2_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_dualModeEn_V_out_din,
        if_full_n => dualModeEn_V_c2_full_n,
        if_write => iperf_client_entry3_U0_dualModeEn_V_out_write,
        if_dout => dualModeEn_V_c2_dout,
        if_empty_n => dualModeEn_V_c2_empty_n,
        if_read => iperf_client_entry20_U0_dualModeEn_V_read);

    useConn_V_c3_U : component fifo_w14_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_useConn_V_out_din,
        if_full_n => useConn_V_c3_full_n,
        if_write => iperf_client_entry3_U0_useConn_V_out_write,
        if_dout => useConn_V_c3_dout,
        if_empty_n => useConn_V_c3_empty_n,
        if_read => iperf_client_entry20_U0_useConn_V_read);

    pkgWordCount_V_c4_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_pkgWordCount_V_out_din,
        if_full_n => pkgWordCount_V_c4_full_n,
        if_write => iperf_client_entry3_U0_pkgWordCount_V_out_write,
        if_dout => pkgWordCount_V_c4_dout,
        if_empty_n => pkgWordCount_V_c4_empty_n,
        if_read => iperf_client_entry20_U0_pkgWordCount_V_read);

    packetGap_V_c5_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_packetGap_V_out_din,
        if_full_n => packetGap_V_c5_full_n,
        if_write => iperf_client_entry3_U0_packetGap_V_out_write,
        if_dout => packetGap_V_c5_dout,
        if_empty_n => packetGap_V_c5_empty_n,
        if_read => iperf_client_entry20_U0_packetGap_V_read);

    timeInSeconds_V_c6_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_timeInSeconds_V_out_din,
        if_full_n => timeInSeconds_V_c6_full_n,
        if_write => iperf_client_entry3_U0_timeInSeconds_V_out_write,
        if_dout => timeInSeconds_V_c6_dout,
        if_empty_n => timeInSeconds_V_c6_empty_n,
        if_read => iperf_client_entry20_U0_timeInSeconds_V_read);

    timeInCycles_V_c7_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_timeInCycles_V_out_din,
        if_full_n => timeInCycles_V_c7_full_n,
        if_write => iperf_client_entry3_U0_timeInCycles_V_out_write,
        if_dout => timeInCycles_V_c7_dout,
        if_empty_n => timeInCycles_V_c7_empty_n,
        if_read => iperf_client_entry20_U0_timeInCycles_V_read);

    useIpAddr_V_c8_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_useIpAddr_V_out_din,
        if_full_n => useIpAddr_V_c8_full_n,
        if_write => iperf_client_entry3_U0_useIpAddr_V_out_write,
        if_dout => useIpAddr_V_c8_dout,
        if_empty_n => useIpAddr_V_c8_empty_n,
        if_read => iperf_client_entry20_U0_useIpAddr_V_read);

    regIpAddress0_V_c9_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress0_V_out_din,
        if_full_n => regIpAddress0_V_c9_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress0_V_out_write,
        if_dout => regIpAddress0_V_c9_dout,
        if_empty_n => regIpAddress0_V_c9_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress0_V_read);

    regIpAddress1_V_c10_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress1_V_out_din,
        if_full_n => regIpAddress1_V_c10_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress1_V_out_write,
        if_dout => regIpAddress1_V_c10_dout,
        if_empty_n => regIpAddress1_V_c10_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress1_V_read);

    regIpAddress2_V_c11_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress2_V_out_din,
        if_full_n => regIpAddress2_V_c11_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress2_V_out_write,
        if_dout => regIpAddress2_V_c11_dout,
        if_empty_n => regIpAddress2_V_c11_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress2_V_read);

    regIpAddress3_V_c12_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress3_V_out_din,
        if_full_n => regIpAddress3_V_c12_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress3_V_out_write,
        if_dout => regIpAddress3_V_c12_dout,
        if_empty_n => regIpAddress3_V_c12_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress3_V_read);

    regIpAddress4_V_c13_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress4_V_out_din,
        if_full_n => regIpAddress4_V_c13_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress4_V_out_write,
        if_dout => regIpAddress4_V_c13_dout,
        if_empty_n => regIpAddress4_V_c13_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress4_V_read);

    regIpAddress5_V_c14_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress5_V_out_din,
        if_full_n => regIpAddress5_V_c14_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress5_V_out_write,
        if_dout => regIpAddress5_V_c14_dout,
        if_empty_n => regIpAddress5_V_c14_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress5_V_read);

    regIpAddress6_V_c15_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress6_V_out_din,
        if_full_n => regIpAddress6_V_c15_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress6_V_out_write,
        if_dout => regIpAddress6_V_c15_dout,
        if_empty_n => regIpAddress6_V_c15_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress6_V_read);

    regIpAddress7_V_c16_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress7_V_out_din,
        if_full_n => regIpAddress7_V_c16_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress7_V_out_write,
        if_dout => regIpAddress7_V_c16_dout,
        if_empty_n => regIpAddress7_V_c16_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress7_V_read);

    regIpAddress8_V_c17_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress8_V_out_din,
        if_full_n => regIpAddress8_V_c17_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress8_V_out_write,
        if_dout => regIpAddress8_V_c17_dout,
        if_empty_n => regIpAddress8_V_c17_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress8_V_read);

    regIpAddress9_V_c18_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry3_U0_regIpAddress9_V_out_din,
        if_full_n => regIpAddress9_V_c18_full_n,
        if_write => iperf_client_entry3_U0_regIpAddress9_V_out_write,
        if_dout => regIpAddress9_V_c18_dout,
        if_empty_n => regIpAddress9_V_c18_empty_n,
        if_read => iperf_client_entry20_U0_regIpAddress9_V_read);

    runExperiment_V_c_U : component fifo_w1_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_runExperiment_V_out_din,
        if_full_n => runExperiment_V_c_full_n,
        if_write => iperf_client_entry20_U0_runExperiment_V_out_write,
        if_dout => runExperiment_V_c_dout,
        if_empty_n => runExperiment_V_c_empty_n,
        if_read => client_512_U0_runExperiment_V_read);

    dualModeEn_V_c_U : component fifo_w1_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_dualModeEn_V_out_din,
        if_full_n => dualModeEn_V_c_full_n,
        if_write => iperf_client_entry20_U0_dualModeEn_V_out_write,
        if_dout => dualModeEn_V_c_dout,
        if_empty_n => dualModeEn_V_c_empty_n,
        if_read => client_512_U0_dualModeEn_V_read);

    useConn_V_c_U : component fifo_w14_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_useConn_V_out_din,
        if_full_n => useConn_V_c_full_n,
        if_write => iperf_client_entry20_U0_useConn_V_out_write,
        if_dout => useConn_V_c_dout,
        if_empty_n => useConn_V_c_empty_n,
        if_read => client_512_U0_useConn_V_read);

    pkgWordCount_V_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_pkgWordCount_V_out_din,
        if_full_n => pkgWordCount_V_c_full_n,
        if_write => iperf_client_entry20_U0_pkgWordCount_V_out_write,
        if_dout => pkgWordCount_V_c_dout,
        if_empty_n => pkgWordCount_V_c_empty_n,
        if_read => client_512_U0_pkgWordCount_V_read);

    packetGap_V_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_packetGap_V_out_din,
        if_full_n => packetGap_V_c_full_n,
        if_write => iperf_client_entry20_U0_packetGap_V_out_write,
        if_dout => packetGap_V_c_dout,
        if_empty_n => packetGap_V_c_empty_n,
        if_read => client_512_U0_packetGap_V_read);

    timeInSeconds_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_timeInSeconds_V_out_din,
        if_full_n => timeInSeconds_V_c_full_n,
        if_write => iperf_client_entry20_U0_timeInSeconds_V_out_write,
        if_dout => timeInSeconds_V_c_dout,
        if_empty_n => timeInSeconds_V_c_empty_n,
        if_read => client_512_U0_timeInSeconds_V_read);

    timeInCycles_V_c_U : component fifo_w64_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_timeInCycles_V_out_din,
        if_full_n => timeInCycles_V_c_full_n,
        if_write => iperf_client_entry20_U0_timeInCycles_V_out_write,
        if_dout => timeInCycles_V_c_dout,
        if_empty_n => timeInCycles_V_c_empty_n,
        if_read => clock_U0_timeInCycles_V_read);

    useIpAddr_V_c_U : component fifo_w16_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_useIpAddr_V_out_din,
        if_full_n => useIpAddr_V_c_full_n,
        if_write => iperf_client_entry20_U0_useIpAddr_V_out_write,
        if_dout => useIpAddr_V_c_dout,
        if_empty_n => useIpAddr_V_c_empty_n,
        if_read => client_512_U0_useIpAddr_V_read);

    regIpAddress0_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress0_V_out_din,
        if_full_n => regIpAddress0_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress0_V_out_write,
        if_dout => regIpAddress0_V_c_dout,
        if_empty_n => regIpAddress0_V_c_empty_n,
        if_read => client_512_U0_regIpAddress0_V_read);

    regIpAddress1_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress1_V_out_din,
        if_full_n => regIpAddress1_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress1_V_out_write,
        if_dout => regIpAddress1_V_c_dout,
        if_empty_n => regIpAddress1_V_c_empty_n,
        if_read => client_512_U0_regIpAddress1_V_read);

    regIpAddress2_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress2_V_out_din,
        if_full_n => regIpAddress2_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress2_V_out_write,
        if_dout => regIpAddress2_V_c_dout,
        if_empty_n => regIpAddress2_V_c_empty_n,
        if_read => client_512_U0_regIpAddress2_V_read);

    regIpAddress3_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress3_V_out_din,
        if_full_n => regIpAddress3_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress3_V_out_write,
        if_dout => regIpAddress3_V_c_dout,
        if_empty_n => regIpAddress3_V_c_empty_n,
        if_read => client_512_U0_regIpAddress3_V_read);

    regIpAddress4_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress4_V_out_din,
        if_full_n => regIpAddress4_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress4_V_out_write,
        if_dout => regIpAddress4_V_c_dout,
        if_empty_n => regIpAddress4_V_c_empty_n,
        if_read => client_512_U0_regIpAddress4_V_read);

    regIpAddress5_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress5_V_out_din,
        if_full_n => regIpAddress5_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress5_V_out_write,
        if_dout => regIpAddress5_V_c_dout,
        if_empty_n => regIpAddress5_V_c_empty_n,
        if_read => client_512_U0_regIpAddress5_V_read);

    regIpAddress6_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress6_V_out_din,
        if_full_n => regIpAddress6_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress6_V_out_write,
        if_dout => regIpAddress6_V_c_dout,
        if_empty_n => regIpAddress6_V_c_empty_n,
        if_read => client_512_U0_regIpAddress6_V_read);

    regIpAddress7_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress7_V_out_din,
        if_full_n => regIpAddress7_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress7_V_out_write,
        if_dout => regIpAddress7_V_c_dout,
        if_empty_n => regIpAddress7_V_c_empty_n,
        if_read => client_512_U0_regIpAddress7_V_read);

    regIpAddress8_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress8_V_out_din,
        if_full_n => regIpAddress8_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress8_V_out_write,
        if_dout => regIpAddress8_V_c_dout,
        if_empty_n => regIpAddress8_V_c_empty_n,
        if_read => client_512_U0_regIpAddress8_V_read);

    regIpAddress9_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iperf_client_entry20_U0_regIpAddress9_V_out_din,
        if_full_n => regIpAddress9_V_c_full_n,
        if_write => iperf_client_entry20_U0_regIpAddress9_V_out_write,
        if_dout => regIpAddress9_V_c_dout,
        if_empty_n => regIpAddress9_V_c_empty_n,
        if_read => client_512_U0_regIpAddress9_V_read);

    txStatusBuffer_V_ses_U : component fifo_w16_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => status_handler_U0_txStatusBuffer_V_ses_din,
        if_full_n => txStatusBuffer_V_ses_full_n,
        if_write => status_handler_U0_txStatusBuffer_V_ses_write,
        if_dout => txStatusBuffer_V_ses_dout,
        if_empty_n => txStatusBuffer_V_ses_empty_n,
        if_read => client_512_U0_txStatusBuffer_V_ses_read);

    txStatusBuffer_V_err_U : component fifo_w2_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => status_handler_U0_txStatusBuffer_V_err_din,
        if_full_n => txStatusBuffer_V_err_full_n,
        if_write => status_handler_U0_txStatusBuffer_V_err_write,
        if_dout => txStatusBuffer_V_err_dout,
        if_empty_n => txStatusBuffer_V_err_empty_n,
        if_read => client_512_U0_txStatusBuffer_V_err_read);

    openConStatusBuffer_1_0_U : component fifo_w16_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => openStatus_handler_U0_openConStatusBuffer_1_0_din,
        if_full_n => openConStatusBuffer_1_0_full_n,
        if_write => openStatus_handler_U0_openConStatusBuffer_1_0_write,
        if_dout => openConStatusBuffer_1_0_dout,
        if_empty_n => openConStatusBuffer_1_0_empty_n,
        if_read => client_512_U0_openConStatusBuffer_1_0_read);

    openConStatusBuffer_s_1_U : component fifo_w1_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => openStatus_handler_U0_openConStatusBuffer_s_1_din,
        if_full_n => openConStatusBuffer_s_1_full_n,
        if_write => openStatus_handler_U0_openConStatusBuffer_s_1_write,
        if_dout => openConStatusBuffer_s_1_dout,
        if_empty_n => openConStatusBuffer_s_1_empty_n,
        if_read => client_512_U0_openConStatusBuffer_s_1_read);

    txMetaDataBuffer_V_s_U : component fifo_w16_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_txMetaDataBuffer_V_s_din,
        if_full_n => txMetaDataBuffer_V_s_full_n,
        if_write => client_512_U0_txMetaDataBuffer_V_s_write,
        if_dout => txMetaDataBuffer_V_s_dout,
        if_empty_n => txMetaDataBuffer_V_s_empty_n,
        if_read => txMetaData_handler_U0_txMetaDataBuffer_V_s_read);

    txMetaDataBuffer_V_l_U : component fifo_w16_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_txMetaDataBuffer_V_l_din,
        if_full_n => txMetaDataBuffer_V_l_full_n,
        if_write => client_512_U0_txMetaDataBuffer_V_l_write,
        if_dout => txMetaDataBuffer_V_l_dout,
        if_empty_n => txMetaDataBuffer_V_l_empty_n,
        if_read => txMetaData_handler_U0_txMetaDataBuffer_V_l_read);

    txDataBuffer_V_data_s_U : component fifo_w512_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_txDataBuffer_V_data_s_din,
        if_full_n => txDataBuffer_V_data_s_full_n,
        if_write => client_512_U0_txDataBuffer_V_data_s_write,
        if_dout => txDataBuffer_V_data_s_dout,
        if_empty_n => txDataBuffer_V_data_s_empty_n,
        if_read => txDataBuffer_handler_U0_txDataBuffer_V_data_s_read);

    txDataBuffer_V_keep_s_U : component fifo_w64_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_txDataBuffer_V_keep_s_din,
        if_full_n => txDataBuffer_V_keep_s_full_n,
        if_write => client_512_U0_txDataBuffer_V_keep_s_write,
        if_dout => txDataBuffer_V_keep_s_dout,
        if_empty_n => txDataBuffer_V_keep_s_empty_n,
        if_read => txDataBuffer_handler_U0_txDataBuffer_V_keep_s_read);

    txDataBuffer_V_last_s_U : component fifo_w1_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_txDataBuffer_V_last_s_din,
        if_full_n => txDataBuffer_V_last_s_full_n,
        if_write => client_512_U0_txDataBuffer_V_last_s_write,
        if_dout => txDataBuffer_V_last_s_dout,
        if_empty_n => txDataBuffer_V_last_s_empty_n,
        if_read => txDataBuffer_handler_U0_txDataBuffer_V_last_s_read);

    startSignalFifo_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_startSignalFifo_V_din,
        if_full_n => startSignalFifo_V_full_n,
        if_write => client_512_U0_startSignalFifo_V_write,
        if_dout => startSignalFifo_V_dout,
        if_empty_n => startSignalFifo_V_empty_n,
        if_read => clock_U0_startSignalFifo_V_read);

    stopSignalFifo_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => clock_U0_stopSignalFifo_V_din,
        if_full_n => stopSignalFifo_V_full_n,
        if_write => clock_U0_stopSignalFifo_V_write,
        if_dout => stopSignalFifo_V_dout,
        if_empty_n => stopSignalFifo_V_empty_n,
        if_read => client_512_U0_stopSignalFifo_V_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    client_512_U0_ap_continue <= ap_const_logic_1;
    client_512_U0_ap_start <= ap_const_logic_1;
    clock_U0_ap_continue <= ap_const_logic_1;
    clock_U0_ap_start <= ap_const_logic_1;
    iperf_client_entry20_U0_ap_continue <= ap_const_logic_1;
    iperf_client_entry20_U0_ap_start <= ap_const_logic_1;
    iperf_client_entry3_U0_ap_continue <= ap_const_logic_1;
    iperf_client_entry3_U0_ap_start <= ap_const_logic_1;
    m_axis_close_connection_V_V_TDATA <= client_512_U0_closeConnection_V_V_TDATA;
    m_axis_close_connection_V_V_TVALID <= client_512_U0_closeConnection_V_V_TVALID;
    m_axis_listen_port_V_V_TDATA <= server_512_U0_listenPort_V_V_TDATA;
    m_axis_listen_port_V_V_TVALID <= server_512_U0_listenPort_V_V_TVALID;
    m_axis_open_connection_V_TDATA <= client_512_U0_openConnection_V_TDATA;
    m_axis_open_connection_V_TVALID <= client_512_U0_openConnection_V_TVALID;
    m_axis_read_package_V_TDATA <= server_512_U0_readRequest_V_TDATA;
    m_axis_read_package_V_TVALID <= server_512_U0_readRequest_V_TVALID;
    m_axis_tx_data_TDATA <= txDataBuffer_handler_U0_m_axis_tx_data_TDATA;
    m_axis_tx_data_TKEEP <= txDataBuffer_handler_U0_m_axis_tx_data_TKEEP;
    m_axis_tx_data_TLAST <= txDataBuffer_handler_U0_m_axis_tx_data_TLAST;
    m_axis_tx_data_TVALID <= txDataBuffer_handler_U0_m_axis_tx_data_TVALID;
    m_axis_tx_metadata_V_TDATA <= txMetaData_handler_U0_txMetaData_V_TDATA;
    m_axis_tx_metadata_V_TVALID <= txMetaData_handler_U0_txMetaData_V_TVALID;
    openStatus_handler_U0_ap_continue <= ap_const_logic_1;
    openStatus_handler_U0_ap_start <= ap_const_logic_1;
    s_axis_listen_port_status_V_TREADY <= server_512_U0_listenPortStatus_V_TREADY;
    s_axis_notifications_V_TREADY <= server_512_U0_notifications_V_TREADY;
    s_axis_open_status_V_TREADY <= openStatus_handler_U0_openConStatus_V_TREADY;
    s_axis_rx_data_TREADY <= server_512_U0_s_axis_rx_data_TREADY;
    s_axis_rx_metadata_V_V_TREADY <= server_512_U0_rxMetaData_V_V_TREADY;
    s_axis_tx_status_V_TREADY <= status_handler_U0_txStatus_V_TREADY;
    server_512_U0_ap_continue <= ap_const_logic_1;
    server_512_U0_ap_start <= ap_const_logic_1;
    status_handler_U0_ap_continue <= ap_const_logic_1;
    status_handler_U0_ap_start <= ap_const_logic_1;
    txDataBuffer_handler_U0_ap_continue <= ap_const_logic_1;
    txDataBuffer_handler_U0_ap_start <= ap_const_logic_1;
    txMetaData_handler_U0_ap_continue <= ap_const_logic_1;
    txMetaData_handler_U0_ap_start <= ap_const_logic_1;
end behav;
