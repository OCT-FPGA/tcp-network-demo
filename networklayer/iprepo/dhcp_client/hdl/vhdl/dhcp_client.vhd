-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dhcp_client is
port (
    m_axis_open_port_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_axis_open_port_status_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_rx_metadata_V_sourceSocket_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    s_axis_rx_metadata_V_destinationSocket_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tx_metadata_V_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    m_axis_tx_length_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dhcpEnable_V : IN STD_LOGIC_VECTOR (0 downto 0);
    inputIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
    dhcpIpAddressOut_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axis_open_port_V_V_TVALID : OUT STD_LOGIC;
    m_axis_open_port_V_V_TREADY : IN STD_LOGIC;
    s_axis_open_port_status_V_TVALID : IN STD_LOGIC;
    s_axis_open_port_status_V_TREADY : OUT STD_LOGIC;
    s_axis_rx_metadata_V_sourceSocket_TVALID : IN STD_LOGIC;
    s_axis_rx_metadata_V_sourceSocket_TREADY : OUT STD_LOGIC;
    s_axis_rx_metadata_V_destinationSocket_TVALID : IN STD_LOGIC;
    s_axis_rx_metadata_V_destinationSocket_TREADY : OUT STD_LOGIC;
    s_axis_rx_data_TVALID : IN STD_LOGIC;
    s_axis_rx_data_TREADY : OUT STD_LOGIC;
    dhcpIpAddressOut_V_ap_vld : OUT STD_LOGIC;
    m_axis_tx_metadata_V_TVALID : OUT STD_LOGIC;
    m_axis_tx_metadata_V_TREADY : IN STD_LOGIC;
    m_axis_tx_length_V_V_TVALID : OUT STD_LOGIC;
    m_axis_tx_length_V_V_TREADY : IN STD_LOGIC;
    m_axis_tx_data_TVALID : OUT STD_LOGIC;
    m_axis_tx_data_TREADY : IN STD_LOGIC );
end;


architecture behav of dhcp_client is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dhcp_client,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.215500,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=621,HLS_SYN_LUT=1281,HLS_VERSION=2020_1}";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal open_dhcp_port_U0_ap_start : STD_LOGIC;
    signal open_dhcp_port_U0_ap_done : STD_LOGIC;
    signal open_dhcp_port_U0_ap_continue : STD_LOGIC;
    signal open_dhcp_port_U0_ap_idle : STD_LOGIC;
    signal open_dhcp_port_U0_ap_ready : STD_LOGIC;
    signal open_dhcp_port_U0_portOpen_V_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal open_dhcp_port_U0_portOpen_V_V_write : STD_LOGIC;
    signal open_dhcp_port_U0_openPort_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal open_dhcp_port_U0_openPort_V_V_TVALID : STD_LOGIC;
    signal open_dhcp_port_U0_confirmPortStatus_V_TREADY : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal receive_message_U0_ap_start : STD_LOGIC;
    signal receive_message_U0_ap_done : STD_LOGIC;
    signal receive_message_U0_ap_continue : STD_LOGIC;
    signal receive_message_U0_ap_idle : STD_LOGIC;
    signal receive_message_U0_ap_ready : STD_LOGIC;
    signal receive_message_U0_dhcp_replyMetaFifo_V_din : STD_LOGIC_VECTOR (103 downto 0);
    signal receive_message_U0_dhcp_replyMetaFifo_V_write : STD_LOGIC;
    signal receive_message_U0_dataInMeta_V_sourceS_TREADY : STD_LOGIC;
    signal receive_message_U0_dataInMeta_V_destina_TREADY : STD_LOGIC;
    signal receive_message_U0_s_axis_rx_data_TREADY : STD_LOGIC;
    signal dhcp_fsm_U0_ap_start : STD_LOGIC;
    signal dhcp_fsm_U0_ap_done : STD_LOGIC;
    signal dhcp_fsm_U0_ap_continue : STD_LOGIC;
    signal dhcp_fsm_U0_ap_idle : STD_LOGIC;
    signal dhcp_fsm_U0_ap_ready : STD_LOGIC;
    signal dhcp_fsm_U0_dhcp_replyMetaFifo_V_read : STD_LOGIC;
    signal dhcp_fsm_U0_portOpen_V_V_read : STD_LOGIC;
    signal dhcp_fsm_U0_dhcp_requestMetaFifo_1_din : STD_LOGIC_VECTOR (71 downto 0);
    signal dhcp_fsm_U0_dhcp_requestMetaFifo_1_write : STD_LOGIC;
    signal dhcp_fsm_U0_ipAddressOut_V : STD_LOGIC_VECTOR (31 downto 0);
    signal dhcp_fsm_U0_ipAddressOut_V_ap_vld : STD_LOGIC;
    signal send_message_U0_ap_start : STD_LOGIC;
    signal send_message_U0_ap_done : STD_LOGIC;
    signal send_message_U0_ap_continue : STD_LOGIC;
    signal send_message_U0_ap_idle : STD_LOGIC;
    signal send_message_U0_ap_ready : STD_LOGIC;
    signal send_message_U0_dhcp_requestMetaFifo_1_read : STD_LOGIC;
    signal send_message_U0_dataOutMeta_V_TDATA : STD_LOGIC_VECTOR (95 downto 0);
    signal send_message_U0_dataOutMeta_V_TVALID : STD_LOGIC;
    signal send_message_U0_dataOutLength_V_V_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal send_message_U0_dataOutLength_V_V_TVALID : STD_LOGIC;
    signal send_message_U0_m_axis_tx_data_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal send_message_U0_m_axis_tx_data_TVALID : STD_LOGIC;
    signal send_message_U0_m_axis_tx_data_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal send_message_U0_m_axis_tx_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal portOpen_V_V_full_n : STD_LOGIC;
    signal portOpen_V_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal portOpen_V_V_empty_n : STD_LOGIC;
    signal dhcp_replyMetaFifo_V_full_n : STD_LOGIC;
    signal dhcp_replyMetaFifo_V_dout : STD_LOGIC_VECTOR (103 downto 0);
    signal dhcp_replyMetaFifo_V_empty_n : STD_LOGIC;
    signal dhcp_requestMetaFifo_1_full_n : STD_LOGIC;
    signal dhcp_requestMetaFifo_1_dout : STD_LOGIC_VECTOR (71 downto 0);
    signal dhcp_requestMetaFifo_1_empty_n : STD_LOGIC;

    component open_dhcp_port IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        confirmPortStatus_V_TVALID : IN STD_LOGIC;
        openPort_V_V_TREADY : IN STD_LOGIC;
        portOpen_V_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        portOpen_V_V_full_n : IN STD_LOGIC;
        portOpen_V_V_write : OUT STD_LOGIC;
        openPort_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        openPort_V_V_TVALID : OUT STD_LOGIC;
        confirmPortStatus_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        confirmPortStatus_V_TREADY : OUT STD_LOGIC );
    end component;


    component receive_message IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_rx_data_TVALID : IN STD_LOGIC;
        dataInMeta_V_sourceS_TVALID : IN STD_LOGIC;
        dataInMeta_V_destina_TVALID : IN STD_LOGIC;
        dhcp_replyMetaFifo_V_din : OUT STD_LOGIC_VECTOR (103 downto 0);
        dhcp_replyMetaFifo_V_full_n : IN STD_LOGIC;
        dhcp_replyMetaFifo_V_write : OUT STD_LOGIC;
        dataInMeta_V_sourceS_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
        dataInMeta_V_sourceS_TREADY : OUT STD_LOGIC;
        dataInMeta_V_destina_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
        dataInMeta_V_destina_TREADY : OUT STD_LOGIC;
        s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_rx_data_TREADY : OUT STD_LOGIC;
        s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component dhcp_fsm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dhcp_replyMetaFifo_V_dout : IN STD_LOGIC_VECTOR (103 downto 0);
        dhcp_replyMetaFifo_V_empty_n : IN STD_LOGIC;
        dhcp_replyMetaFifo_V_read : OUT STD_LOGIC;
        portOpen_V_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        portOpen_V_V_empty_n : IN STD_LOGIC;
        portOpen_V_V_read : OUT STD_LOGIC;
        dhcp_requestMetaFifo_1_din : OUT STD_LOGIC_VECTOR (71 downto 0);
        dhcp_requestMetaFifo_1_full_n : IN STD_LOGIC;
        dhcp_requestMetaFifo_1_write : OUT STD_LOGIC;
        ipAddressOut_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        ipAddressOut_V_ap_vld : OUT STD_LOGIC;
        dhcpEnable_V : IN STD_LOGIC_VECTOR (0 downto 0);
        inputIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component send_message IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dhcp_requestMetaFifo_1_dout : IN STD_LOGIC_VECTOR (71 downto 0);
        dhcp_requestMetaFifo_1_empty_n : IN STD_LOGIC;
        dhcp_requestMetaFifo_1_read : OUT STD_LOGIC;
        m_axis_tx_data_TREADY : IN STD_LOGIC;
        dataOutMeta_V_TREADY : IN STD_LOGIC;
        dataOutLength_V_V_TREADY : IN STD_LOGIC;
        dataOutMeta_V_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
        dataOutMeta_V_TVALID : OUT STD_LOGIC;
        dataOutLength_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        dataOutLength_V_V_TVALID : OUT STD_LOGIC;
        m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tx_data_TVALID : OUT STD_LOGIC;
        m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w104_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (103 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (103 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w72_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (71 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (71 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    open_dhcp_port_U0 : component open_dhcp_port
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => open_dhcp_port_U0_ap_start,
        ap_done => open_dhcp_port_U0_ap_done,
        ap_continue => open_dhcp_port_U0_ap_continue,
        ap_idle => open_dhcp_port_U0_ap_idle,
        ap_ready => open_dhcp_port_U0_ap_ready,
        confirmPortStatus_V_TVALID => s_axis_open_port_status_V_TVALID,
        openPort_V_V_TREADY => m_axis_open_port_V_V_TREADY,
        portOpen_V_V_din => open_dhcp_port_U0_portOpen_V_V_din,
        portOpen_V_V_full_n => portOpen_V_V_full_n,
        portOpen_V_V_write => open_dhcp_port_U0_portOpen_V_V_write,
        openPort_V_V_TDATA => open_dhcp_port_U0_openPort_V_V_TDATA,
        openPort_V_V_TVALID => open_dhcp_port_U0_openPort_V_V_TVALID,
        confirmPortStatus_V_TDATA => s_axis_open_port_status_V_TDATA,
        confirmPortStatus_V_TREADY => open_dhcp_port_U0_confirmPortStatus_V_TREADY);

    receive_message_U0 : component receive_message
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => receive_message_U0_ap_start,
        ap_done => receive_message_U0_ap_done,
        ap_continue => receive_message_U0_ap_continue,
        ap_idle => receive_message_U0_ap_idle,
        ap_ready => receive_message_U0_ap_ready,
        s_axis_rx_data_TVALID => s_axis_rx_data_TVALID,
        dataInMeta_V_sourceS_TVALID => s_axis_rx_metadata_V_sourceSocket_TVALID,
        dataInMeta_V_destina_TVALID => s_axis_rx_metadata_V_destinationSocket_TVALID,
        dhcp_replyMetaFifo_V_din => receive_message_U0_dhcp_replyMetaFifo_V_din,
        dhcp_replyMetaFifo_V_full_n => dhcp_replyMetaFifo_V_full_n,
        dhcp_replyMetaFifo_V_write => receive_message_U0_dhcp_replyMetaFifo_V_write,
        dataInMeta_V_sourceS_TDATA => s_axis_rx_metadata_V_sourceSocket_TDATA,
        dataInMeta_V_sourceS_TREADY => receive_message_U0_dataInMeta_V_sourceS_TREADY,
        dataInMeta_V_destina_TDATA => s_axis_rx_metadata_V_destinationSocket_TDATA,
        dataInMeta_V_destina_TREADY => receive_message_U0_dataInMeta_V_destina_TREADY,
        s_axis_rx_data_TDATA => s_axis_rx_data_TDATA,
        s_axis_rx_data_TREADY => receive_message_U0_s_axis_rx_data_TREADY,
        s_axis_rx_data_TKEEP => s_axis_rx_data_TKEEP,
        s_axis_rx_data_TLAST => s_axis_rx_data_TLAST,
        myMacAddress_V => myMacAddress_V);

    dhcp_fsm_U0 : component dhcp_fsm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => dhcp_fsm_U0_ap_start,
        ap_done => dhcp_fsm_U0_ap_done,
        ap_continue => dhcp_fsm_U0_ap_continue,
        ap_idle => dhcp_fsm_U0_ap_idle,
        ap_ready => dhcp_fsm_U0_ap_ready,
        dhcp_replyMetaFifo_V_dout => dhcp_replyMetaFifo_V_dout,
        dhcp_replyMetaFifo_V_empty_n => dhcp_replyMetaFifo_V_empty_n,
        dhcp_replyMetaFifo_V_read => dhcp_fsm_U0_dhcp_replyMetaFifo_V_read,
        portOpen_V_V_dout => portOpen_V_V_dout,
        portOpen_V_V_empty_n => portOpen_V_V_empty_n,
        portOpen_V_V_read => dhcp_fsm_U0_portOpen_V_V_read,
        dhcp_requestMetaFifo_1_din => dhcp_fsm_U0_dhcp_requestMetaFifo_1_din,
        dhcp_requestMetaFifo_1_full_n => dhcp_requestMetaFifo_1_full_n,
        dhcp_requestMetaFifo_1_write => dhcp_fsm_U0_dhcp_requestMetaFifo_1_write,
        ipAddressOut_V => dhcp_fsm_U0_ipAddressOut_V,
        ipAddressOut_V_ap_vld => dhcp_fsm_U0_ipAddressOut_V_ap_vld,
        dhcpEnable_V => dhcpEnable_V,
        inputIpAddress_V => inputIpAddress_V);

    send_message_U0 : component send_message
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => send_message_U0_ap_start,
        ap_done => send_message_U0_ap_done,
        ap_continue => send_message_U0_ap_continue,
        ap_idle => send_message_U0_ap_idle,
        ap_ready => send_message_U0_ap_ready,
        dhcp_requestMetaFifo_1_dout => dhcp_requestMetaFifo_1_dout,
        dhcp_requestMetaFifo_1_empty_n => dhcp_requestMetaFifo_1_empty_n,
        dhcp_requestMetaFifo_1_read => send_message_U0_dhcp_requestMetaFifo_1_read,
        m_axis_tx_data_TREADY => m_axis_tx_data_TREADY,
        dataOutMeta_V_TREADY => m_axis_tx_metadata_V_TREADY,
        dataOutLength_V_V_TREADY => m_axis_tx_length_V_V_TREADY,
        dataOutMeta_V_TDATA => send_message_U0_dataOutMeta_V_TDATA,
        dataOutMeta_V_TVALID => send_message_U0_dataOutMeta_V_TVALID,
        dataOutLength_V_V_TDATA => send_message_U0_dataOutLength_V_V_TDATA,
        dataOutLength_V_V_TVALID => send_message_U0_dataOutLength_V_V_TVALID,
        m_axis_tx_data_TDATA => send_message_U0_m_axis_tx_data_TDATA,
        m_axis_tx_data_TVALID => send_message_U0_m_axis_tx_data_TVALID,
        m_axis_tx_data_TKEEP => send_message_U0_m_axis_tx_data_TKEEP,
        m_axis_tx_data_TLAST => send_message_U0_m_axis_tx_data_TLAST,
        myMacAddress_V => myMacAddress_V);

    portOpen_V_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => open_dhcp_port_U0_portOpen_V_V_din,
        if_full_n => portOpen_V_V_full_n,
        if_write => open_dhcp_port_U0_portOpen_V_V_write,
        if_dout => portOpen_V_V_dout,
        if_empty_n => portOpen_V_V_empty_n,
        if_read => dhcp_fsm_U0_portOpen_V_V_read);

    dhcp_replyMetaFifo_V_U : component fifo_w104_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => receive_message_U0_dhcp_replyMetaFifo_V_din,
        if_full_n => dhcp_replyMetaFifo_V_full_n,
        if_write => receive_message_U0_dhcp_replyMetaFifo_V_write,
        if_dout => dhcp_replyMetaFifo_V_dout,
        if_empty_n => dhcp_replyMetaFifo_V_empty_n,
        if_read => dhcp_fsm_U0_dhcp_replyMetaFifo_V_read);

    dhcp_requestMetaFifo_1_U : component fifo_w72_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dhcp_fsm_U0_dhcp_requestMetaFifo_1_din,
        if_full_n => dhcp_requestMetaFifo_1_full_n,
        if_write => dhcp_fsm_U0_dhcp_requestMetaFifo_1_write,
        if_dout => dhcp_requestMetaFifo_1_dout,
        if_empty_n => dhcp_requestMetaFifo_1_empty_n,
        if_read => send_message_U0_dhcp_requestMetaFifo_1_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    dhcpIpAddressOut_V <= dhcp_fsm_U0_ipAddressOut_V;
    dhcpIpAddressOut_V_ap_vld <= dhcp_fsm_U0_ipAddressOut_V_ap_vld;
    dhcp_fsm_U0_ap_continue <= ap_const_logic_1;
    dhcp_fsm_U0_ap_start <= ap_const_logic_1;
    m_axis_open_port_V_V_TDATA <= open_dhcp_port_U0_openPort_V_V_TDATA;
    m_axis_open_port_V_V_TVALID <= open_dhcp_port_U0_openPort_V_V_TVALID;
    m_axis_tx_data_TDATA <= send_message_U0_m_axis_tx_data_TDATA;
    m_axis_tx_data_TKEEP <= send_message_U0_m_axis_tx_data_TKEEP;
    m_axis_tx_data_TLAST <= send_message_U0_m_axis_tx_data_TLAST;
    m_axis_tx_data_TVALID <= send_message_U0_m_axis_tx_data_TVALID;
    m_axis_tx_length_V_V_TDATA <= send_message_U0_dataOutLength_V_V_TDATA;
    m_axis_tx_length_V_V_TVALID <= send_message_U0_dataOutLength_V_V_TVALID;
    m_axis_tx_metadata_V_TDATA <= send_message_U0_dataOutMeta_V_TDATA;
    m_axis_tx_metadata_V_TVALID <= send_message_U0_dataOutMeta_V_TVALID;
    open_dhcp_port_U0_ap_continue <= ap_const_logic_1;
    open_dhcp_port_U0_ap_start <= ap_const_logic_1;
    receive_message_U0_ap_continue <= ap_const_logic_1;
    receive_message_U0_ap_start <= ap_const_logic_1;
    s_axis_open_port_status_V_TREADY <= open_dhcp_port_U0_confirmPortStatus_V_TREADY;
    s_axis_rx_data_TREADY <= receive_message_U0_s_axis_rx_data_TREADY;
    s_axis_rx_metadata_V_destinationSocket_TREADY <= receive_message_U0_dataInMeta_V_destina_TREADY;
    s_axis_rx_metadata_V_sourceSocket_TREADY <= receive_message_U0_dataInMeta_V_sourceS_TREADY;
    send_message_U0_ap_continue <= ap_const_logic_1;
    send_message_U0_ap_start <= ap_const_logic_1;
end behav;
