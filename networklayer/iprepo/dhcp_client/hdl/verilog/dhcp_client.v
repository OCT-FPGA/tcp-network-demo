// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dhcp_client,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.215500,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=621,HLS_SYN_LUT=1281,HLS_VERSION=2020_1}" *)

module dhcp_client (
        m_axis_open_port_V_V_TDATA,
        s_axis_open_port_status_V_TDATA,
        s_axis_rx_metadata_V_sourceSocket_TDATA,
        s_axis_rx_metadata_V_destinationSocket_TDATA,
        s_axis_rx_data_TDATA,
        s_axis_rx_data_TKEEP,
        s_axis_rx_data_TLAST,
        m_axis_tx_metadata_V_TDATA,
        m_axis_tx_length_V_V_TDATA,
        m_axis_tx_data_TDATA,
        m_axis_tx_data_TKEEP,
        m_axis_tx_data_TLAST,
        dhcpEnable_V,
        inputIpAddress_V,
        dhcpIpAddressOut_V,
        myMacAddress_V,
        ap_clk,
        ap_rst_n,
        m_axis_open_port_V_V_TVALID,
        m_axis_open_port_V_V_TREADY,
        s_axis_open_port_status_V_TVALID,
        s_axis_open_port_status_V_TREADY,
        s_axis_rx_metadata_V_sourceSocket_TVALID,
        s_axis_rx_metadata_V_sourceSocket_TREADY,
        s_axis_rx_metadata_V_destinationSocket_TVALID,
        s_axis_rx_metadata_V_destinationSocket_TREADY,
        s_axis_rx_data_TVALID,
        s_axis_rx_data_TREADY,
        dhcpIpAddressOut_V_ap_vld,
        m_axis_tx_metadata_V_TVALID,
        m_axis_tx_metadata_V_TREADY,
        m_axis_tx_length_V_V_TVALID,
        m_axis_tx_length_V_V_TREADY,
        m_axis_tx_data_TVALID,
        m_axis_tx_data_TREADY
);


output  [15:0] m_axis_open_port_V_V_TDATA;
input  [7:0] s_axis_open_port_status_V_TDATA;
input  [47:0] s_axis_rx_metadata_V_sourceSocket_TDATA;
input  [47:0] s_axis_rx_metadata_V_destinationSocket_TDATA;
input  [63:0] s_axis_rx_data_TDATA;
input  [7:0] s_axis_rx_data_TKEEP;
input  [0:0] s_axis_rx_data_TLAST;
output  [95:0] m_axis_tx_metadata_V_TDATA;
output  [15:0] m_axis_tx_length_V_V_TDATA;
output  [63:0] m_axis_tx_data_TDATA;
output  [7:0] m_axis_tx_data_TKEEP;
output  [0:0] m_axis_tx_data_TLAST;
input  [0:0] dhcpEnable_V;
input  [31:0] inputIpAddress_V;
output  [31:0] dhcpIpAddressOut_V;
input  [47:0] myMacAddress_V;
input   ap_clk;
input   ap_rst_n;
output   m_axis_open_port_V_V_TVALID;
input   m_axis_open_port_V_V_TREADY;
input   s_axis_open_port_status_V_TVALID;
output   s_axis_open_port_status_V_TREADY;
input   s_axis_rx_metadata_V_sourceSocket_TVALID;
output   s_axis_rx_metadata_V_sourceSocket_TREADY;
input   s_axis_rx_metadata_V_destinationSocket_TVALID;
output   s_axis_rx_metadata_V_destinationSocket_TREADY;
input   s_axis_rx_data_TVALID;
output   s_axis_rx_data_TREADY;
output   dhcpIpAddressOut_V_ap_vld;
output   m_axis_tx_metadata_V_TVALID;
input   m_axis_tx_metadata_V_TREADY;
output   m_axis_tx_length_V_V_TVALID;
input   m_axis_tx_length_V_V_TREADY;
output   m_axis_tx_data_TVALID;
input   m_axis_tx_data_TREADY;

 reg    ap_rst_n_inv;
wire    open_dhcp_port_U0_ap_start;
wire    open_dhcp_port_U0_ap_done;
wire    open_dhcp_port_U0_ap_continue;
wire    open_dhcp_port_U0_ap_idle;
wire    open_dhcp_port_U0_ap_ready;
wire   [0:0] open_dhcp_port_U0_portOpen_V_V_din;
wire    open_dhcp_port_U0_portOpen_V_V_write;
wire   [15:0] open_dhcp_port_U0_openPort_V_V_TDATA;
wire    open_dhcp_port_U0_openPort_V_V_TVALID;
wire    open_dhcp_port_U0_confirmPortStatus_V_TREADY;
wire    ap_sync_continue;
wire    receive_message_U0_ap_start;
wire    receive_message_U0_ap_done;
wire    receive_message_U0_ap_continue;
wire    receive_message_U0_ap_idle;
wire    receive_message_U0_ap_ready;
wire   [103:0] receive_message_U0_dhcp_replyMetaFifo_V_din;
wire    receive_message_U0_dhcp_replyMetaFifo_V_write;
wire    receive_message_U0_dataInMeta_V_sourceS_TREADY;
wire    receive_message_U0_dataInMeta_V_destina_TREADY;
wire    receive_message_U0_s_axis_rx_data_TREADY;
wire    dhcp_fsm_U0_ap_start;
wire    dhcp_fsm_U0_ap_done;
wire    dhcp_fsm_U0_ap_continue;
wire    dhcp_fsm_U0_ap_idle;
wire    dhcp_fsm_U0_ap_ready;
wire    dhcp_fsm_U0_dhcp_replyMetaFifo_V_read;
wire    dhcp_fsm_U0_portOpen_V_V_read;
wire   [71:0] dhcp_fsm_U0_dhcp_requestMetaFifo_1_din;
wire    dhcp_fsm_U0_dhcp_requestMetaFifo_1_write;
wire   [31:0] dhcp_fsm_U0_ipAddressOut_V;
wire    dhcp_fsm_U0_ipAddressOut_V_ap_vld;
wire    send_message_U0_ap_start;
wire    send_message_U0_ap_done;
wire    send_message_U0_ap_continue;
wire    send_message_U0_ap_idle;
wire    send_message_U0_ap_ready;
wire    send_message_U0_dhcp_requestMetaFifo_1_read;
wire   [95:0] send_message_U0_dataOutMeta_V_TDATA;
wire    send_message_U0_dataOutMeta_V_TVALID;
wire   [15:0] send_message_U0_dataOutLength_V_V_TDATA;
wire    send_message_U0_dataOutLength_V_V_TVALID;
wire   [63:0] send_message_U0_m_axis_tx_data_TDATA;
wire    send_message_U0_m_axis_tx_data_TVALID;
wire   [7:0] send_message_U0_m_axis_tx_data_TKEEP;
wire   [0:0] send_message_U0_m_axis_tx_data_TLAST;
wire    portOpen_V_V_full_n;
wire   [0:0] portOpen_V_V_dout;
wire    portOpen_V_V_empty_n;
wire    dhcp_replyMetaFifo_V_full_n;
wire   [103:0] dhcp_replyMetaFifo_V_dout;
wire    dhcp_replyMetaFifo_V_empty_n;
wire    dhcp_requestMetaFifo_1_full_n;
wire   [71:0] dhcp_requestMetaFifo_1_dout;
wire    dhcp_requestMetaFifo_1_empty_n;

open_dhcp_port open_dhcp_port_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(open_dhcp_port_U0_ap_start),
    .ap_done(open_dhcp_port_U0_ap_done),
    .ap_continue(open_dhcp_port_U0_ap_continue),
    .ap_idle(open_dhcp_port_U0_ap_idle),
    .ap_ready(open_dhcp_port_U0_ap_ready),
    .confirmPortStatus_V_TVALID(s_axis_open_port_status_V_TVALID),
    .openPort_V_V_TREADY(m_axis_open_port_V_V_TREADY),
    .portOpen_V_V_din(open_dhcp_port_U0_portOpen_V_V_din),
    .portOpen_V_V_full_n(portOpen_V_V_full_n),
    .portOpen_V_V_write(open_dhcp_port_U0_portOpen_V_V_write),
    .openPort_V_V_TDATA(open_dhcp_port_U0_openPort_V_V_TDATA),
    .openPort_V_V_TVALID(open_dhcp_port_U0_openPort_V_V_TVALID),
    .confirmPortStatus_V_TDATA(s_axis_open_port_status_V_TDATA),
    .confirmPortStatus_V_TREADY(open_dhcp_port_U0_confirmPortStatus_V_TREADY)
);

receive_message receive_message_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(receive_message_U0_ap_start),
    .ap_done(receive_message_U0_ap_done),
    .ap_continue(receive_message_U0_ap_continue),
    .ap_idle(receive_message_U0_ap_idle),
    .ap_ready(receive_message_U0_ap_ready),
    .s_axis_rx_data_TVALID(s_axis_rx_data_TVALID),
    .dataInMeta_V_sourceS_TVALID(s_axis_rx_metadata_V_sourceSocket_TVALID),
    .dataInMeta_V_destina_TVALID(s_axis_rx_metadata_V_destinationSocket_TVALID),
    .dhcp_replyMetaFifo_V_din(receive_message_U0_dhcp_replyMetaFifo_V_din),
    .dhcp_replyMetaFifo_V_full_n(dhcp_replyMetaFifo_V_full_n),
    .dhcp_replyMetaFifo_V_write(receive_message_U0_dhcp_replyMetaFifo_V_write),
    .dataInMeta_V_sourceS_TDATA(s_axis_rx_metadata_V_sourceSocket_TDATA),
    .dataInMeta_V_sourceS_TREADY(receive_message_U0_dataInMeta_V_sourceS_TREADY),
    .dataInMeta_V_destina_TDATA(s_axis_rx_metadata_V_destinationSocket_TDATA),
    .dataInMeta_V_destina_TREADY(receive_message_U0_dataInMeta_V_destina_TREADY),
    .s_axis_rx_data_TDATA(s_axis_rx_data_TDATA),
    .s_axis_rx_data_TREADY(receive_message_U0_s_axis_rx_data_TREADY),
    .s_axis_rx_data_TKEEP(s_axis_rx_data_TKEEP),
    .s_axis_rx_data_TLAST(s_axis_rx_data_TLAST),
    .myMacAddress_V(myMacAddress_V)
);

dhcp_fsm dhcp_fsm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(dhcp_fsm_U0_ap_start),
    .ap_done(dhcp_fsm_U0_ap_done),
    .ap_continue(dhcp_fsm_U0_ap_continue),
    .ap_idle(dhcp_fsm_U0_ap_idle),
    .ap_ready(dhcp_fsm_U0_ap_ready),
    .dhcp_replyMetaFifo_V_dout(dhcp_replyMetaFifo_V_dout),
    .dhcp_replyMetaFifo_V_empty_n(dhcp_replyMetaFifo_V_empty_n),
    .dhcp_replyMetaFifo_V_read(dhcp_fsm_U0_dhcp_replyMetaFifo_V_read),
    .portOpen_V_V_dout(portOpen_V_V_dout),
    .portOpen_V_V_empty_n(portOpen_V_V_empty_n),
    .portOpen_V_V_read(dhcp_fsm_U0_portOpen_V_V_read),
    .dhcp_requestMetaFifo_1_din(dhcp_fsm_U0_dhcp_requestMetaFifo_1_din),
    .dhcp_requestMetaFifo_1_full_n(dhcp_requestMetaFifo_1_full_n),
    .dhcp_requestMetaFifo_1_write(dhcp_fsm_U0_dhcp_requestMetaFifo_1_write),
    .ipAddressOut_V(dhcp_fsm_U0_ipAddressOut_V),
    .ipAddressOut_V_ap_vld(dhcp_fsm_U0_ipAddressOut_V_ap_vld),
    .dhcpEnable_V(dhcpEnable_V),
    .inputIpAddress_V(inputIpAddress_V)
);

send_message send_message_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(send_message_U0_ap_start),
    .ap_done(send_message_U0_ap_done),
    .ap_continue(send_message_U0_ap_continue),
    .ap_idle(send_message_U0_ap_idle),
    .ap_ready(send_message_U0_ap_ready),
    .dhcp_requestMetaFifo_1_dout(dhcp_requestMetaFifo_1_dout),
    .dhcp_requestMetaFifo_1_empty_n(dhcp_requestMetaFifo_1_empty_n),
    .dhcp_requestMetaFifo_1_read(send_message_U0_dhcp_requestMetaFifo_1_read),
    .m_axis_tx_data_TREADY(m_axis_tx_data_TREADY),
    .dataOutMeta_V_TREADY(m_axis_tx_metadata_V_TREADY),
    .dataOutLength_V_V_TREADY(m_axis_tx_length_V_V_TREADY),
    .dataOutMeta_V_TDATA(send_message_U0_dataOutMeta_V_TDATA),
    .dataOutMeta_V_TVALID(send_message_U0_dataOutMeta_V_TVALID),
    .dataOutLength_V_V_TDATA(send_message_U0_dataOutLength_V_V_TDATA),
    .dataOutLength_V_V_TVALID(send_message_U0_dataOutLength_V_V_TVALID),
    .m_axis_tx_data_TDATA(send_message_U0_m_axis_tx_data_TDATA),
    .m_axis_tx_data_TVALID(send_message_U0_m_axis_tx_data_TVALID),
    .m_axis_tx_data_TKEEP(send_message_U0_m_axis_tx_data_TKEEP),
    .m_axis_tx_data_TLAST(send_message_U0_m_axis_tx_data_TLAST),
    .myMacAddress_V(myMacAddress_V)
);

fifo_w1_d2_A portOpen_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(open_dhcp_port_U0_portOpen_V_V_din),
    .if_full_n(portOpen_V_V_full_n),
    .if_write(open_dhcp_port_U0_portOpen_V_V_write),
    .if_dout(portOpen_V_V_dout),
    .if_empty_n(portOpen_V_V_empty_n),
    .if_read(dhcp_fsm_U0_portOpen_V_V_read)
);

fifo_w104_d4_A dhcp_replyMetaFifo_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(receive_message_U0_dhcp_replyMetaFifo_V_din),
    .if_full_n(dhcp_replyMetaFifo_V_full_n),
    .if_write(receive_message_U0_dhcp_replyMetaFifo_V_write),
    .if_dout(dhcp_replyMetaFifo_V_dout),
    .if_empty_n(dhcp_replyMetaFifo_V_empty_n),
    .if_read(dhcp_fsm_U0_dhcp_replyMetaFifo_V_read)
);

fifo_w72_d4_A dhcp_requestMetaFifo_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dhcp_fsm_U0_dhcp_requestMetaFifo_1_din),
    .if_full_n(dhcp_requestMetaFifo_1_full_n),
    .if_write(dhcp_fsm_U0_dhcp_requestMetaFifo_1_write),
    .if_dout(dhcp_requestMetaFifo_1_dout),
    .if_empty_n(dhcp_requestMetaFifo_1_empty_n),
    .if_read(send_message_U0_dhcp_requestMetaFifo_1_read)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_continue = 1'b0;

assign dhcpIpAddressOut_V = dhcp_fsm_U0_ipAddressOut_V;

assign dhcpIpAddressOut_V_ap_vld = dhcp_fsm_U0_ipAddressOut_V_ap_vld;

assign dhcp_fsm_U0_ap_continue = 1'b1;

assign dhcp_fsm_U0_ap_start = 1'b1;

assign m_axis_open_port_V_V_TDATA = open_dhcp_port_U0_openPort_V_V_TDATA;

assign m_axis_open_port_V_V_TVALID = open_dhcp_port_U0_openPort_V_V_TVALID;

assign m_axis_tx_data_TDATA = send_message_U0_m_axis_tx_data_TDATA;

assign m_axis_tx_data_TKEEP = send_message_U0_m_axis_tx_data_TKEEP;

assign m_axis_tx_data_TLAST = send_message_U0_m_axis_tx_data_TLAST;

assign m_axis_tx_data_TVALID = send_message_U0_m_axis_tx_data_TVALID;

assign m_axis_tx_length_V_V_TDATA = send_message_U0_dataOutLength_V_V_TDATA;

assign m_axis_tx_length_V_V_TVALID = send_message_U0_dataOutLength_V_V_TVALID;

assign m_axis_tx_metadata_V_TDATA = send_message_U0_dataOutMeta_V_TDATA;

assign m_axis_tx_metadata_V_TVALID = send_message_U0_dataOutMeta_V_TVALID;

assign open_dhcp_port_U0_ap_continue = 1'b1;

assign open_dhcp_port_U0_ap_start = 1'b1;

assign receive_message_U0_ap_continue = 1'b1;

assign receive_message_U0_ap_start = 1'b1;

assign s_axis_open_port_status_V_TREADY = open_dhcp_port_U0_confirmPortStatus_V_TREADY;

assign s_axis_rx_data_TREADY = receive_message_U0_s_axis_rx_data_TREADY;

assign s_axis_rx_metadata_V_destinationSocket_TREADY = receive_message_U0_dataInMeta_V_destina_TREADY;

assign s_axis_rx_metadata_V_sourceSocket_TREADY = receive_message_U0_dataInMeta_V_sourceS_TREADY;

assign send_message_U0_ap_continue = 1'b1;

assign send_message_U0_ap_start = 1'b1;

endmodule //dhcp_client
