// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module open_dhcp_port (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        confirmPortStatus_V_TVALID,
        openPort_V_V_TREADY,
        portOpen_V_V_din,
        portOpen_V_V_full_n,
        portOpen_V_V_write,
        openPort_V_V_TDATA,
        openPort_V_V_TVALID,
        confirmPortStatus_V_TDATA,
        confirmPortStatus_V_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   confirmPortStatus_V_TVALID;
input   openPort_V_V_TREADY;
output  [0:0] portOpen_V_V_din;
input   portOpen_V_V_full_n;
output   portOpen_V_V_write;
output  [15:0] openPort_V_V_TDATA;
output   openPort_V_V_TVALID;
input  [7:0] confirmPortStatus_V_TDATA;
output   confirmPortStatus_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg portOpen_V_V_write;
reg openPort_V_V_TVALID;
reg confirmPortStatus_V_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln879_fu_94_p2;
wire   [0:0] tmp_nbwritereq_fu_52_p3;
wire   [0:0] and_ln50_fu_132_p2;
wire   [0:0] or_ln46_fu_120_p2;
reg    ap_predicate_op19_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_predicate_op14_write_state1;
reg    ap_block_state1_io;
reg   [0:0] icmp_ln879_reg_148;
reg   [0:0] tmp_reg_156;
reg   [0:0] and_ln50_reg_160;
reg   [0:0] or_ln46_reg_152;
reg    ap_predicate_op28_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] openPortWaitTime_V;
reg   [0:0] odp_listenDone;
reg   [0:0] odp_waitListenStatus;
reg    openPort_V_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    confirmPortStatus_V_TDATA_blk_n;
reg    portOpen_V_V_blk_n;
reg    ap_block_pp0_stage0_subdone;
wire   [31:0] add_ln701_fu_100_p2;
wire   [0:0] tmp_3_fu_138_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_2_nbreadreq_fu_68_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 openPortWaitTime_V = 32'd750750750;
#0 odp_listenDone = 1'd0;
#0 odp_waitListenStatus = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((or_ln46_fu_120_p2 == 1'd1) & (icmp_ln879_fu_94_p2 == 1'd1)) | ((tmp_nbwritereq_fu_52_p3 == 1'd0) & (icmp_ln879_fu_94_p2 == 1'd1))))) begin
        and_ln50_reg_160 <= and_ln50_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_reg_148 <= icmp_ln879_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((or_ln46_fu_120_p2 == 1'd1) & (1'd1 == and_ln50_fu_132_p2) & (icmp_ln879_fu_94_p2 == 1'd1)) | ((tmp_nbwritereq_fu_52_p3 == 1'd0) & (1'd1 == and_ln50_fu_132_p2) & (icmp_ln879_fu_94_p2 == 1'd1))))) begin
        odp_listenDone <= tmp_3_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln46_fu_120_p2 == 1'd0) & (tmp_nbwritereq_fu_52_p3 == 1'd1) & (icmp_ln879_fu_94_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        odp_waitListenStatus <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_fu_94_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        openPortWaitTime_V <= add_ln701_fu_100_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln46_reg_152 <= or_ln46_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln46_fu_120_p2 == 1'd0) & (icmp_ln879_fu_94_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_156 <= openPort_V_V_TREADY;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op19_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        confirmPortStatus_V_TDATA_blk_n = confirmPortStatus_V_TVALID;
    end else begin
        confirmPortStatus_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op19_read_state1 == 1'b1))) begin
        confirmPortStatus_V_TREADY = 1'b1;
    end else begin
        confirmPortStatus_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_write_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        openPort_V_V_TDATA_blk_n = openPort_V_V_TREADY;
    end else begin
        openPort_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_write_state1 == 1'b1))) begin
        openPort_V_V_TVALID = 1'b1;
    end else begin
        openPort_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op28_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        portOpen_V_V_blk_n = portOpen_V_V_full_n;
    end else begin
        portOpen_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op28_write_state2 == 1'b1))) begin
        portOpen_V_V_write = 1'b1;
    end else begin
        portOpen_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln701_fu_100_p2 = ($signed(openPortWaitTime_V) + $signed(32'd4294967295));

assign and_ln50_fu_132_p2 = (tmp_2_nbreadreq_fu_68_p3 & odp_waitListenStatus);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((portOpen_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op28_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((confirmPortStatus_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((portOpen_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op28_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1) | ((confirmPortStatus_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((portOpen_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op28_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (1'b1 == ap_block_state1_io) | (ap_done_reg == 1'b1) | ((confirmPortStatus_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_io = ((openPort_V_V_TREADY == 1'b0) & (ap_predicate_op14_write_state1 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((confirmPortStatus_V_TVALID == 1'b0) & (ap_predicate_op19_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((portOpen_V_V_full_n == 1'b0) & (ap_predicate_op28_write_state2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op14_write_state1 = ((or_ln46_fu_120_p2 == 1'd0) & (tmp_nbwritereq_fu_52_p3 == 1'd1) & (icmp_ln879_fu_94_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op19_read_state1 = (((or_ln46_fu_120_p2 == 1'd1) & (1'd1 == and_ln50_fu_132_p2) & (icmp_ln879_fu_94_p2 == 1'd1)) | ((tmp_nbwritereq_fu_52_p3 == 1'd0) & (1'd1 == and_ln50_fu_132_p2) & (icmp_ln879_fu_94_p2 == 1'd1)));
end

always @ (*) begin
    ap_predicate_op28_write_state2 = (((or_ln46_reg_152 == 1'd1) & (1'd1 == and_ln50_reg_160) & (icmp_ln879_reg_148 == 1'd1)) | ((tmp_reg_156 == 1'd0) & (1'd1 == and_ln50_reg_160) & (icmp_ln879_reg_148 == 1'd1)));
end

assign icmp_ln879_fu_94_p2 = ((openPortWaitTime_V == 32'd0) ? 1'b1 : 1'b0);

assign openPort_V_V_TDATA = 16'd68;

assign or_ln46_fu_120_p2 = (odp_waitListenStatus | odp_listenDone);

assign portOpen_V_V_din = 1'd1;

assign tmp_2_nbreadreq_fu_68_p3 = confirmPortStatus_V_TVALID;

assign tmp_3_fu_138_p1 = confirmPortStatus_V_TDATA[0:0];

assign tmp_nbwritereq_fu_52_p3 = openPort_V_V_TREADY;

endmodule //open_dhcp_port
