// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module extract_ip_meta_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ipDataFifo_V_dout,
        ipDataFifo_V_empty_n,
        ipDataFifo_V_read,
        ipDataMetaFifo_V_dat_din,
        ipDataMetaFifo_V_dat_full_n,
        ipDataMetaFifo_V_dat_write,
        ipDataMetaFifo_V_kee_din,
        ipDataMetaFifo_V_kee_full_n,
        ipDataMetaFifo_V_kee_write,
        ipDataMetaFifo_V_las_din,
        ipDataMetaFifo_V_las_full_n,
        ipDataMetaFifo_V_las_write,
        validIpAddressFifo_V_din,
        validIpAddressFifo_V_full_n,
        validIpAddressFifo_V_write,
        ipv4ProtocolFifo_V_V_din,
        ipv4ProtocolFifo_V_V_full_n,
        ipv4ProtocolFifo_V_V_write,
        myIpAddress_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [576:0] ipDataFifo_V_dout;
input   ipDataFifo_V_empty_n;
output   ipDataFifo_V_read;
output  [511:0] ipDataMetaFifo_V_dat_din;
input   ipDataMetaFifo_V_dat_full_n;
output   ipDataMetaFifo_V_dat_write;
output  [63:0] ipDataMetaFifo_V_kee_din;
input   ipDataMetaFifo_V_kee_full_n;
output   ipDataMetaFifo_V_kee_write;
output  [0:0] ipDataMetaFifo_V_las_din;
input   ipDataMetaFifo_V_las_full_n;
output   ipDataMetaFifo_V_las_write;
output  [0:0] validIpAddressFifo_V_din;
input   validIpAddressFifo_V_full_n;
output   validIpAddressFifo_V_write;
output  [7:0] ipv4ProtocolFifo_V_V_din;
input   ipv4ProtocolFifo_V_V_full_n;
output   ipv4ProtocolFifo_V_V_write;
input  [31:0] myIpAddress_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ipDataFifo_V_read;
reg ipDataMetaFifo_V_dat_write;
reg ipDataMetaFifo_V_kee_write;
reg ipDataMetaFifo_V_las_write;
reg validIpAddressFifo_V_write;
reg ipv4ProtocolFifo_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_108_p3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    io_acc_block_signal_op47;
reg   [0:0] tmp_reg_443;
reg   [0:0] or_ln153_reg_472;
reg    ap_predicate_op53_write_state2;
reg    ap_predicate_op55_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] header_ready_1;
reg   [15:0] header_idx;
reg   [159:0] header_header_V;
reg   [0:0] metaWritten;
reg    ipDataFifo_V_blk_n;
wire    ap_block_pp0_stage0;
reg    ipDataMetaFifo_V_dat_blk_n;
reg    ipDataMetaFifo_V_kee_blk_n;
reg    ipDataMetaFifo_V_las_blk_n;
reg    validIpAddressFifo_V_blk_n;
reg    ipv4ProtocolFifo_V_V_blk_n;
reg   [576:0] tmp14_reg_447;
wire   [15:0] add_ln67_fu_302_p2;
wire   [0:0] header_ready_1_load_load_fu_182_p1;
wire   [0:0] or_ln73_fu_308_p2;
reg   [0:0] or_ln73_reg_467;
wire   [0:0] or_ln153_fu_324_p2;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149;
wire   [15:0] ap_phi_reg_pp0_iter0_phi_ln73_reg_160;
reg   [15:0] ap_phi_reg_pp0_iter1_phi_ln73_reg_160;
wire   [0:0] ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_169;
reg   [0:0] ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_169;
wire   [0:0] and_ln162_fu_401_p2;
reg   [0:0] ap_sig_allocacmp_header_ready_1_load;
wire   [15:0] select_ln162_fu_406_p3;
reg   [15:0] ap_sig_allocacmp_header_idx_load;
wire   [159:0] p_Result_s_fu_290_p2;
wire   [0:0] xor_ln162_fu_395_p2;
wire   [0:0] or_ln162_fu_414_p2;
reg   [0:0] ap_sig_allocacmp_metaWritten_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_last_V_fu_344_p3;
wire   [24:0] Lo_assign_fu_190_p3;
wire   [0:0] trunc_ln414_fu_212_p1;
wire   [0:0] icmp_ln414_fu_206_p2;
wire   [159:0] st4_fu_216_p3;
wire   [159:0] tmp_V_1_fu_198_p1;
wire   [159:0] select_ln414_fu_224_p3;
reg   [159:0] tmp_78_fu_232_p4;
wire   [159:0] select_ln414_2_fu_250_p3;
wire   [159:0] select_ln414_3_fu_258_p3;
wire   [159:0] and_ln414_fu_266_p2;
wire   [159:0] xor_ln414_fu_272_p2;
wire   [159:0] select_ln414_1_fu_242_p3;
wire   [159:0] and_ln414_1_fu_278_p2;
wire   [159:0] and_ln414_2_fu_284_p2;
wire   [0:0] xor_ln153_fu_318_p2;
wire   [31:0] dstIpAddress_V_fu_356_p4;
wire   [0:0] icmp_ln879_fu_366_p2;
wire   [0:0] icmp_ln879_6_fu_371_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_96;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 header_ready_1 = 1'd0;
#0 header_idx = 16'd0;
#0 header_header_V = 160'd1180591620717411303493;
#0 metaWritten = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_96)) begin
        if (((or_ln153_fu_324_p2 == 1'd1) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_169 <= 1'd0;
        end else if (((or_ln153_fu_324_p2 == 1'd0) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_169 <= 1'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_169 <= ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_169;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_96)) begin
        if (((header_ready_1_load_load_fu_182_p1 == 1'd0) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_phi_ln73_reg_160 <= add_ln67_fu_302_p2;
        end else if (((header_ready_1_load_load_fu_182_p1 == 1'd1) & (tmp_nbreadreq_fu_108_p3 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_phi_ln73_reg_160 <= ap_sig_allocacmp_header_idx_load;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_phi_ln73_reg_160 <= ap_phi_reg_pp0_iter0_phi_ln73_reg_160;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (header_ready_1_load_load_fu_182_p1 == 1'd0) & (tmp_nbreadreq_fu_108_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_header_V <= p_Result_s_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_idx <= select_ln162_fu_406_p3;
        header_ready_1 <= and_ln162_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_443 == 1'd1) & (or_ln162_fu_414_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        metaWritten <= xor_ln162_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_108_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln153_reg_472 <= or_ln153_fu_324_p2;
        or_ln73_reg_467 <= or_ln73_fu_308_p2;
        tmp14_reg_447 <= ipDataFifo_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_443 <= tmp_nbreadreq_fu_108_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_nbreadreq_fu_108_p3 == 1'd1)) begin
        if ((header_ready_1_load_load_fu_182_p1 == 1'd0)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = 1'd1;
        end else if ((header_ready_1_load_load_fu_182_p1 == 1'd1)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = 1'd0;
        end else begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149;
        end
    end else begin
        ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_header_idx_load = select_ln162_fu_406_p3;
    end else begin
        ap_sig_allocacmp_header_idx_load = header_idx;
    end
end

always @ (*) begin
    if (((tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_header_ready_1_load = and_ln162_fu_401_p2;
    end else begin
        ap_sig_allocacmp_header_ready_1_load = header_ready_1;
    end
end

always @ (*) begin
    if (((tmp_reg_443 == 1'd1) & (or_ln162_fu_414_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_metaWritten_load = xor_ln162_fu_395_p2;
    end else begin
        ap_sig_allocacmp_metaWritten_load = metaWritten;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_108_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ipDataFifo_V_blk_n = ipDataFifo_V_empty_n;
    end else begin
        ipDataFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_108_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ipDataFifo_V_read = 1'b1;
    end else begin
        ipDataFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ipDataMetaFifo_V_dat_blk_n = ipDataMetaFifo_V_dat_full_n;
    end else begin
        ipDataMetaFifo_V_dat_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ipDataMetaFifo_V_dat_write = 1'b1;
    end else begin
        ipDataMetaFifo_V_dat_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ipDataMetaFifo_V_kee_blk_n = ipDataMetaFifo_V_kee_full_n;
    end else begin
        ipDataMetaFifo_V_kee_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ipDataMetaFifo_V_kee_write = 1'b1;
    end else begin
        ipDataMetaFifo_V_kee_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ipDataMetaFifo_V_las_blk_n = ipDataMetaFifo_V_las_full_n;
    end else begin
        ipDataMetaFifo_V_las_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_443 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ipDataMetaFifo_V_las_write = 1'b1;
    end else begin
        ipDataMetaFifo_V_las_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op55_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ipv4ProtocolFifo_V_V_blk_n = ipv4ProtocolFifo_V_V_full_n;
    end else begin
        ipv4ProtocolFifo_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op55_write_state2 == 1'b1))) begin
        ipv4ProtocolFifo_V_V_write = 1'b1;
    end else begin
        ipv4ProtocolFifo_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op53_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        validIpAddressFifo_V_blk_n = validIpAddressFifo_V_full_n;
    end else begin
        validIpAddressFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op53_write_state2 == 1'b1))) begin
        validIpAddressFifo_V_write = 1'b1;
    end else begin
        validIpAddressFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_190_p3 = {{ap_sig_allocacmp_header_idx_load}, {9'd0}};

assign add_ln67_fu_302_p2 = (16'd1 + ap_sig_allocacmp_header_idx_load);

assign and_ln162_fu_401_p2 = (xor_ln162_fu_395_p2 & or_ln73_reg_467);

assign and_ln414_1_fu_278_p2 = (xor_ln414_fu_272_p2 & header_header_V);

assign and_ln414_2_fu_284_p2 = (select_ln414_1_fu_242_p3 & and_ln414_fu_266_p2);

assign and_ln414_fu_266_p2 = (select_ln414_3_fu_258_p3 & select_ln414_2_fu_250_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ipv4ProtocolFifo_V_V_full_n == 1'b0) & (ap_predicate_op55_write_state2 == 1'b1)) | ((validIpAddressFifo_V_full_n == 1'b0) & (ap_predicate_op53_write_state2 == 1'b1)) | ((tmp_reg_443 == 1'd1) & (io_acc_block_signal_op47 == 1'b0)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_108_p3 == 1'd1) & (ipDataFifo_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ipv4ProtocolFifo_V_V_full_n == 1'b0) & (ap_predicate_op55_write_state2 == 1'b1)) | ((validIpAddressFifo_V_full_n == 1'b0) & (ap_predicate_op53_write_state2 == 1'b1)) | ((tmp_reg_443 == 1'd1) & (io_acc_block_signal_op47 == 1'b0)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_108_p3 == 1'd1) & (ipDataFifo_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ipv4ProtocolFifo_V_V_full_n == 1'b0) & (ap_predicate_op55_write_state2 == 1'b1)) | ((validIpAddressFifo_V_full_n == 1'b0) & (ap_predicate_op53_write_state2 == 1'b1)) | ((tmp_reg_443 == 1'd1) & (io_acc_block_signal_op47 == 1'b0)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_108_p3 == 1'd1) & (ipDataFifo_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_108_p3 == 1'd1) & (ipDataFifo_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ipv4ProtocolFifo_V_V_full_n == 1'b0) & (ap_predicate_op55_write_state2 == 1'b1)) | ((validIpAddressFifo_V_full_n == 1'b0) & (ap_predicate_op53_write_state2 == 1'b1)) | ((tmp_reg_443 == 1'd1) & (io_acc_block_signal_op47 == 1'b0)));
end

always @ (*) begin
    ap_condition_96 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_169 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln73_reg_160 = 'bx;

assign ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149 = 'bx;

always @ (*) begin
    ap_predicate_op53_write_state2 = ((or_ln153_reg_472 == 1'd0) & (tmp_reg_443 == 1'd1));
end

always @ (*) begin
    ap_predicate_op55_write_state2 = ((or_ln153_reg_472 == 1'd0) & (tmp_reg_443 == 1'd1));
end

assign dstIpAddress_V_fu_356_p4 = {{header_header_V[159:128]}};

assign header_ready_1_load_load_fu_182_p1 = ap_sig_allocacmp_header_ready_1_load;

assign icmp_ln414_fu_206_p2 = ((Lo_assign_fu_190_p3 > 25'd159) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_371_p2 = ((dstIpAddress_V_fu_356_p4 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_366_p2 = ((dstIpAddress_V_fu_356_p4 == myIpAddress_V) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op47 = (ipDataMetaFifo_V_las_full_n & ipDataMetaFifo_V_kee_full_n & ipDataMetaFifo_V_dat_full_n);

assign ipDataMetaFifo_V_dat_din = tmp14_reg_447[511:0];

assign ipDataMetaFifo_V_kee_din = {{tmp14_reg_447[575:512]}};

assign ipDataMetaFifo_V_las_din = tmp14_reg_447[32'd576];

assign ipv4ProtocolFifo_V_V_din = {{header_header_V[79:72]}};

assign or_ln153_fu_324_p2 = (xor_ln153_fu_318_p2 | ap_sig_allocacmp_metaWritten_load);

assign or_ln162_fu_414_p2 = (tmp_last_V_fu_344_p3 | ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_169);

assign or_ln73_fu_308_p2 = (ap_sig_allocacmp_header_ready_1_load | ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4);

assign p_Result_s_fu_290_p2 = (and_ln414_2_fu_284_p2 | and_ln414_1_fu_278_p2);

assign select_ln162_fu_406_p3 = ((tmp_last_V_fu_344_p3[0:0] === 1'b1) ? 16'd0 : ap_phi_reg_pp0_iter1_phi_ln73_reg_160);

assign select_ln414_1_fu_242_p3 = ((icmp_ln414_fu_206_p2[0:0] === 1'b1) ? tmp_78_fu_232_p4 : tmp_V_1_fu_198_p1);

assign select_ln414_2_fu_250_p3 = ((icmp_ln414_fu_206_p2[0:0] === 1'b1) ? 160'd730750818665451459101842416358141509827966271488 : 160'd1461501637330902918203684832716283019655932542975);

assign select_ln414_3_fu_258_p3 = ((icmp_ln414_fu_206_p2[0:0] === 1'b1) ? 160'd1 : 160'd1461501637330902918203684832716283019655932542975);

assign select_ln414_fu_224_p3 = ((icmp_ln414_fu_206_p2[0:0] === 1'b1) ? st4_fu_216_p3 : tmp_V_1_fu_198_p1);

assign st4_fu_216_p3 = {{trunc_ln414_fu_212_p1}, {159'd0}};

integer ap_tvar_int_0;

always @ (select_ln414_fu_224_p3) begin
    for (ap_tvar_int_0 = 160 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 159 - 0) begin
            tmp_78_fu_232_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_78_fu_232_p4[ap_tvar_int_0] = select_ln414_fu_224_p3[159 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_1_fu_198_p1 = ipDataFifo_V_dout[159:0];

assign tmp_last_V_fu_344_p3 = tmp14_reg_447[32'd576];

assign tmp_nbreadreq_fu_108_p3 = ipDataFifo_V_empty_n;

assign trunc_ln414_fu_212_p1 = ipDataFifo_V_dout[0:0];

assign validIpAddressFifo_V_din = (icmp_ln879_fu_366_p2 | icmp_ln879_6_fu_371_p2);

assign xor_ln153_fu_318_p2 = (or_ln73_fu_308_p2 ^ 1'd1);

assign xor_ln162_fu_395_p2 = (tmp_last_V_fu_344_p3 ^ 1'd1);

assign xor_ln414_fu_272_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln414_fu_266_p2);

endmodule //extract_ip_meta_512_s
