// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module detect_ipv4_protocol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ipv4ProtocolFifo_V_V_dout,
        ipv4ProtocolFifo_V_V_empty_n,
        ipv4ProtocolFifo_V_V_read,
        ipv4ValidFifo_V_dout,
        ipv4ValidFifo_V_empty_n,
        ipv4ValidFifo_V_read,
        ipDataCutFifo_V_dout,
        ipDataCutFifo_V_empty_n,
        ipDataCutFifo_V_read,
        udpDataFifo_V_din,
        udpDataFifo_V_full_n,
        udpDataFifo_V_write,
        m_axis_tcp_TREADY,
        m_axis_icmp_TREADY,
        m_axis_icmp_TDATA,
        m_axis_icmp_TVALID,
        m_axis_icmp_TKEEP,
        m_axis_icmp_TLAST,
        m_axis_tcp_TDATA,
        m_axis_tcp_TVALID,
        m_axis_tcp_TKEEP,
        m_axis_tcp_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] ipv4ProtocolFifo_V_V_dout;
input   ipv4ProtocolFifo_V_V_empty_n;
output   ipv4ProtocolFifo_V_V_read;
input  [0:0] ipv4ValidFifo_V_dout;
input   ipv4ValidFifo_V_empty_n;
output   ipv4ValidFifo_V_read;
input  [576:0] ipDataCutFifo_V_dout;
input   ipDataCutFifo_V_empty_n;
output   ipDataCutFifo_V_read;
output  [576:0] udpDataFifo_V_din;
input   udpDataFifo_V_full_n;
output   udpDataFifo_V_write;
input   m_axis_tcp_TREADY;
input   m_axis_icmp_TREADY;
output  [511:0] m_axis_icmp_TDATA;
output   m_axis_icmp_TVALID;
output  [63:0] m_axis_icmp_TKEEP;
output  [0:0] m_axis_icmp_TLAST;
output  [511:0] m_axis_tcp_TDATA;
output   m_axis_tcp_TVALID;
output  [63:0] m_axis_tcp_TKEEP;
output  [0:0] m_axis_tcp_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ipv4ProtocolFifo_V_V_read;
reg ipv4ValidFifo_V_read;
reg ipDataCutFifo_V_read;
reg udpDataFifo_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_81_nbreadreq_fu_82_p3;
wire   [0:0] tmp_82_nbreadreq_fu_90_p3;
reg    ap_predicate_op10_read_state1;
reg    ap_predicate_op12_read_state1;
wire   [0:0] tmp_nbreadreq_fu_110_p3;
reg    ap_predicate_op17_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] dip_state_load_reg_225;
reg   [0:0] tmp_reg_241;
reg   [7:0] dip_ipProtocol_V_loa_reg_254;
reg    ap_predicate_op27_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op26_write_state2;
reg    ap_predicate_op31_write_state2;
reg    ap_block_state2_io;
wire    regslice_both_ICMPdataOut_V_data_V_U_apdone_blk;
wire    regslice_both_TCPdataOut_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] dip_state_load_reg_225_pp0_iter1_reg;
reg   [0:0] tmp_reg_241_pp0_iter1_reg;
reg   [7:0] dip_ipProtocol_V_loa_reg_254_pp0_iter1_reg;
reg    ap_predicate_op42_write_state3;
reg    ap_predicate_op45_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] dip_state;
reg   [7:0] dip_ipProtocol_V;
reg    m_axis_icmp_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_tcp_TDATA_blk_n;
reg    ipv4ProtocolFifo_V_V_blk_n;
reg    ipv4ValidFifo_V_blk_n;
reg    ipDataCutFifo_V_blk_n;
reg    udpDataFifo_V_blk_n;
wire   [0:0] tmp_87_read_fu_104_p2;
reg   [576:0] tmp15_reg_245;
wire   [0:0] tmp_86_fu_203_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [511:0] m_axis_icmp_TDATA_int;
reg    m_axis_icmp_TVALID_int;
wire    m_axis_icmp_TREADY_int;
wire    regslice_both_ICMPdataOut_V_data_V_U_vld_out;
wire    regslice_both_ICMPdataOut_V_keep_V_U_apdone_blk;
wire   [63:0] m_axis_icmp_TKEEP_int;
wire    regslice_both_ICMPdataOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_ICMPdataOut_V_keep_V_U_vld_out;
wire    regslice_both_ICMPdataOut_V_last_V_U_apdone_blk;
wire   [0:0] m_axis_icmp_TLAST_int;
wire    regslice_both_ICMPdataOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_ICMPdataOut_V_last_V_U_vld_out;
wire   [511:0] m_axis_tcp_TDATA_int;
reg    m_axis_tcp_TVALID_int;
wire    m_axis_tcp_TREADY_int;
wire    regslice_both_TCPdataOut_V_data_V_U_vld_out;
wire    regslice_both_TCPdataOut_V_keep_V_U_apdone_blk;
wire   [63:0] m_axis_tcp_TKEEP_int;
wire    regslice_both_TCPdataOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_TCPdataOut_V_keep_V_U_vld_out;
wire    regslice_both_TCPdataOut_V_last_V_U_apdone_blk;
wire   [0:0] m_axis_tcp_TLAST_int;
wire    regslice_both_TCPdataOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_TCPdataOut_V_last_V_U_vld_out;
reg    ap_condition_242;
reg    ap_condition_245;
reg    ap_condition_156;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 dip_state = 1'd0;
#0 dip_ipProtocol_V = 8'd0;
end

regslice_both #(
    .DataWidth( 512 ))
regslice_both_ICMPdataOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_icmp_TDATA_int),
    .vld_in(m_axis_icmp_TVALID_int),
    .ack_in(m_axis_icmp_TREADY_int),
    .data_out(m_axis_icmp_TDATA),
    .vld_out(regslice_both_ICMPdataOut_V_data_V_U_vld_out),
    .ack_out(m_axis_icmp_TREADY),
    .apdone_blk(regslice_both_ICMPdataOut_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_ICMPdataOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_icmp_TKEEP_int),
    .vld_in(m_axis_icmp_TVALID_int),
    .ack_in(regslice_both_ICMPdataOut_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_icmp_TKEEP),
    .vld_out(regslice_both_ICMPdataOut_V_keep_V_U_vld_out),
    .ack_out(m_axis_icmp_TREADY),
    .apdone_blk(regslice_both_ICMPdataOut_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_ICMPdataOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_icmp_TLAST_int),
    .vld_in(m_axis_icmp_TVALID_int),
    .ack_in(regslice_both_ICMPdataOut_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_icmp_TLAST),
    .vld_out(regslice_both_ICMPdataOut_V_last_V_U_vld_out),
    .ack_out(m_axis_icmp_TREADY),
    .apdone_blk(regslice_both_ICMPdataOut_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_TCPdataOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_tcp_TDATA_int),
    .vld_in(m_axis_tcp_TVALID_int),
    .ack_in(m_axis_tcp_TREADY_int),
    .data_out(m_axis_tcp_TDATA),
    .vld_out(regslice_both_TCPdataOut_V_data_V_U_vld_out),
    .ack_out(m_axis_tcp_TREADY),
    .apdone_blk(regslice_both_TCPdataOut_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_TCPdataOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_tcp_TKEEP_int),
    .vld_in(m_axis_tcp_TVALID_int),
    .ack_in(regslice_both_TCPdataOut_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_tcp_TKEEP),
    .vld_out(regslice_both_TCPdataOut_V_keep_V_U_vld_out),
    .ack_out(m_axis_tcp_TREADY),
    .apdone_blk(regslice_both_TCPdataOut_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_TCPdataOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_tcp_TLAST_int),
    .vld_in(m_axis_tcp_TVALID_int),
    .ack_in(regslice_both_TCPdataOut_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_tcp_TLAST),
    .vld_out(regslice_both_TCPdataOut_V_last_V_U_vld_out),
    .ack_out(m_axis_tcp_TREADY),
    .apdone_blk(regslice_both_TCPdataOut_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_156)) begin
        if ((1'b1 == ap_condition_245)) begin
            dip_state <= 1'd0;
        end else if ((1'b1 == ap_condition_242)) begin
            dip_state <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_82_nbreadreq_fu_90_p3 == 1'd1) & (tmp_81_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dip_ipProtocol_V <= ipv4ProtocolFifo_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_110_p3 == 1'd1) & (dip_state == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dip_ipProtocol_V_loa_reg_254 <= dip_ipProtocol_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dip_ipProtocol_V_loa_reg_254_pp0_iter1_reg <= dip_ipProtocol_V_loa_reg_254;
        dip_state_load_reg_225 <= dip_state;
        dip_state_load_reg_225_pp0_iter1_reg <= dip_state_load_reg_225;
        tmp_reg_241_pp0_iter1_reg <= tmp_reg_241;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp15_reg_245 <= ipDataCutFifo_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((dip_state == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_241 <= tmp_nbreadreq_fu_110_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ipDataCutFifo_V_blk_n = ipDataCutFifo_V_empty_n;
    end else begin
        ipDataCutFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ipDataCutFifo_V_read = 1'b1;
    end else begin
        ipDataCutFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ipv4ProtocolFifo_V_V_blk_n = ipv4ProtocolFifo_V_V_empty_n;
    end else begin
        ipv4ProtocolFifo_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ipv4ProtocolFifo_V_V_read = 1'b1;
    end else begin
        ipv4ProtocolFifo_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ipv4ValidFifo_V_blk_n = ipv4ValidFifo_V_empty_n;
    end else begin
        ipv4ValidFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ipv4ValidFifo_V_read = 1'b1;
    end else begin
        ipv4ValidFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op31_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op45_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        m_axis_icmp_TDATA_blk_n = m_axis_icmp_TREADY_int;
    end else begin
        m_axis_icmp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op31_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_icmp_TVALID_int = 1'b1;
    end else begin
        m_axis_icmp_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op26_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op42_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        m_axis_tcp_TDATA_blk_n = m_axis_tcp_TREADY_int;
    end else begin
        m_axis_tcp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op26_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_tcp_TVALID_int = 1'b1;
    end else begin
        m_axis_tcp_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op27_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        udpDataFifo_V_blk_n = udpDataFifo_V_full_n;
    end else begin
        udpDataFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op27_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        udpDataFifo_V_write = 1'b1;
    end else begin
        udpDataFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((udpDataFifo_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op27_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_TCPdataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ICMPdataOut_V_data_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_TCPdataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ICMPdataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((udpDataFifo_V_full_n == 1'b0) & (ap_predicate_op27_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_TCPdataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ICMPdataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((udpDataFifo_V_full_n == 1'b0) & (ap_predicate_op27_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((m_axis_icmp_TREADY_int == 1'b0) & (ap_predicate_op31_write_state2 == 1'b1)) | ((m_axis_tcp_TREADY_int == 1'b0) & (ap_predicate_op26_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((udpDataFifo_V_full_n == 1'b0) & (ap_predicate_op27_write_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = (((m_axis_icmp_TREADY_int == 1'b0) & (ap_predicate_op45_write_state3 == 1'b1)) | ((m_axis_tcp_TREADY_int == 1'b0) & (ap_predicate_op42_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_TCPdataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_ICMPdataOut_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_156 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_242 = ((tmp_82_nbreadreq_fu_90_p3 == 1'd1) & (tmp_87_read_fu_104_p2 == 1'd1) & (tmp_81_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0));
end

always @ (*) begin
    ap_condition_245 = ((tmp_nbreadreq_fu_110_p3 == 1'd1) & (tmp_86_fu_203_p3 == 1'd1) & (dip_state == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op10_read_state1 = ((tmp_82_nbreadreq_fu_90_p3 == 1'd1) & (tmp_81_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0));
end

always @ (*) begin
    ap_predicate_op12_read_state1 = ((tmp_82_nbreadreq_fu_90_p3 == 1'd1) & (tmp_81_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0));
end

always @ (*) begin
    ap_predicate_op17_read_state1 = ((tmp_nbreadreq_fu_110_p3 == 1'd1) & (dip_state == 1'd1));
end

always @ (*) begin
    ap_predicate_op26_write_state2 = ((dip_ipProtocol_V_loa_reg_254 == 8'd6) & (tmp_reg_241 == 1'd1) & (dip_state_load_reg_225 == 1'd1));
end

always @ (*) begin
    ap_predicate_op27_write_state2 = ((dip_ipProtocol_V_loa_reg_254 == 8'd17) & (tmp_reg_241 == 1'd1) & (dip_state_load_reg_225 == 1'd1));
end

always @ (*) begin
    ap_predicate_op31_write_state2 = ((dip_ipProtocol_V_loa_reg_254 == 8'd1) & (tmp_reg_241 == 1'd1) & (dip_state_load_reg_225 == 1'd1));
end

always @ (*) begin
    ap_predicate_op42_write_state3 = ((tmp_reg_241_pp0_iter1_reg == 1'd1) & (dip_state_load_reg_225_pp0_iter1_reg == 1'd1) & (dip_ipProtocol_V_loa_reg_254_pp0_iter1_reg == 8'd6));
end

always @ (*) begin
    ap_predicate_op45_write_state3 = ((tmp_reg_241_pp0_iter1_reg == 1'd1) & (dip_state_load_reg_225_pp0_iter1_reg == 1'd1) & (dip_ipProtocol_V_loa_reg_254_pp0_iter1_reg == 8'd1));
end

assign m_axis_icmp_TDATA_int = tmp15_reg_245[511:0];

assign m_axis_icmp_TKEEP_int = {{tmp15_reg_245[575:512]}};

assign m_axis_icmp_TLAST_int = tmp15_reg_245[32'd576];

assign m_axis_icmp_TVALID = regslice_both_ICMPdataOut_V_data_V_U_vld_out;

assign m_axis_tcp_TDATA_int = tmp15_reg_245[511:0];

assign m_axis_tcp_TKEEP_int = {{tmp15_reg_245[575:512]}};

assign m_axis_tcp_TLAST_int = tmp15_reg_245[32'd576];

assign m_axis_tcp_TVALID = regslice_both_TCPdataOut_V_data_V_U_vld_out;

assign tmp_81_nbreadreq_fu_82_p3 = ipv4ProtocolFifo_V_V_empty_n;

assign tmp_82_nbreadreq_fu_90_p3 = ipv4ValidFifo_V_empty_n;

assign tmp_86_fu_203_p3 = ipDataCutFifo_V_dout[32'd576];

assign tmp_87_read_fu_104_p2 = ipv4ValidFifo_V_dout;

assign tmp_nbreadreq_fu_110_p3 = ipDataCutFifo_V_empty_n;

assign udpDataFifo_V_din = tmp15_reg_245;

endmodule //detect_ipv4_protocol
