// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module detect_ipv6_protocol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ipv6DataFifo_V_data_s_dout,
        ipv6DataFifo_V_data_s_empty_n,
        ipv6DataFifo_V_data_s_read,
        ipv6DataFifo_V_keep_s_dout,
        ipv6DataFifo_V_keep_s_empty_n,
        ipv6DataFifo_V_keep_s_read,
        ipv6DataFifo_V_last_s_dout,
        ipv6DataFifo_V_last_s_empty_n,
        ipv6DataFifo_V_last_s_read,
        m_axis_ipv6udp_TREADY,
        m_axis_icmpv6_TREADY,
        m_axis_icmpv6_TDATA,
        m_axis_icmpv6_TVALID,
        m_axis_icmpv6_TKEEP,
        m_axis_icmpv6_TLAST,
        m_axis_ipv6udp_TDATA,
        m_axis_ipv6udp_TVALID,
        m_axis_ipv6udp_TKEEP,
        m_axis_ipv6udp_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] ipv6DataFifo_V_data_s_dout;
input   ipv6DataFifo_V_data_s_empty_n;
output   ipv6DataFifo_V_data_s_read;
input  [63:0] ipv6DataFifo_V_keep_s_dout;
input   ipv6DataFifo_V_keep_s_empty_n;
output   ipv6DataFifo_V_keep_s_read;
input  [0:0] ipv6DataFifo_V_last_s_dout;
input   ipv6DataFifo_V_last_s_empty_n;
output   ipv6DataFifo_V_last_s_read;
input   m_axis_ipv6udp_TREADY;
input   m_axis_icmpv6_TREADY;
output  [511:0] m_axis_icmpv6_TDATA;
output   m_axis_icmpv6_TVALID;
output  [63:0] m_axis_icmpv6_TKEEP;
output  [0:0] m_axis_icmpv6_TLAST;
output  [511:0] m_axis_ipv6udp_TDATA;
output   m_axis_ipv6udp_TVALID;
output  [63:0] m_axis_ipv6udp_TKEEP;
output  [0:0] m_axis_ipv6udp_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ipv6DataFifo_V_data_s_read;
reg ipv6DataFifo_V_keep_s_read;
reg ipv6DataFifo_V_last_s_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op9;
wire   [0:0] tmp_nbreadreq_fu_64_p5;
reg    ap_predicate_op9_read_state1;
wire    io_acc_block_signal_op21;
reg    ap_predicate_op21_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] state_V_load_reg_196;
reg   [0:0] tmp_reg_200;
reg   [0:0] icmp_ln879_7_reg_210;
reg   [0:0] icmp_ln879_9_reg_214;
reg    ap_predicate_op30_write_state2;
reg    ap_predicate_op31_write_state2;
reg   [0:0] icmp_ln879_reg_224;
reg   [0:0] icmp_ln879_8_reg_228;
reg    ap_predicate_op33_write_state2;
reg    ap_predicate_op34_write_state2;
reg    ap_block_state2_io;
wire    regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk;
wire    regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] state_V_load_reg_196_pp0_iter1_reg;
reg   [0:0] tmp_reg_200_pp0_iter1_reg;
reg   [0:0] icmp_ln879_7_reg_210_pp0_iter1_reg;
reg   [0:0] icmp_ln879_9_reg_214_pp0_iter1_reg;
reg    ap_predicate_op42_write_state3;
reg    ap_predicate_op45_write_state3;
reg   [0:0] icmp_ln879_reg_224_pp0_iter1_reg;
reg   [0:0] icmp_ln879_8_reg_228_pp0_iter1_reg;
reg    ap_predicate_op50_write_state3;
reg    ap_predicate_op53_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] state_V;
reg   [7:0] nextHeader_V;
reg    m_axis_icmpv6_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_ipv6udp_TDATA_blk_n;
reg    ipv6DataFifo_V_data_s_blk_n;
reg    ipv6DataFifo_V_keep_s_blk_n;
reg    ipv6DataFifo_V_last_s_blk_n;
reg   [511:0] reg_124;
reg   [63:0] reg_130;
wire   [0:0] grp_fu_120_p1;
reg   [0:0] tmp_last_V_4_reg_204;
wire   [0:0] icmp_ln879_7_fu_160_p2;
wire   [0:0] icmp_ln879_9_fu_166_p2;
reg   [0:0] tmp_last_V_reg_218;
wire   [0:0] icmp_ln879_fu_178_p2;
wire   [0:0] icmp_ln879_8_fu_184_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [7:0] p_Result_i_fu_144_p4;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    m_axis_icmpv6_TVALID_int;
wire    m_axis_icmpv6_TREADY_int;
wire    regslice_both_icmpv6DataOut_V_data_V_U_vld_out;
wire    regslice_both_icmpv6DataOut_V_keep_V_U_apdone_blk;
wire    regslice_both_icmpv6DataOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_icmpv6DataOut_V_keep_V_U_vld_out;
wire    regslice_both_icmpv6DataOut_V_last_V_U_apdone_blk;
reg   [0:0] m_axis_icmpv6_TLAST_int;
wire    regslice_both_icmpv6DataOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_icmpv6DataOut_V_last_V_U_vld_out;
reg    m_axis_ipv6udp_TVALID_int;
wire    m_axis_ipv6udp_TREADY_int;
wire    regslice_both_ipv6UdpDataOut_V_data_V_U_vld_out;
wire    regslice_both_ipv6UdpDataOut_V_keep_V_U_apdone_blk;
wire    regslice_both_ipv6UdpDataOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_ipv6UdpDataOut_V_keep_V_U_vld_out;
wire    regslice_both_ipv6UdpDataOut_V_last_V_U_apdone_blk;
reg   [0:0] m_axis_ipv6udp_TLAST_int;
wire    regslice_both_ipv6UdpDataOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_ipv6UdpDataOut_V_last_V_U_vld_out;
reg    ap_condition_285;
reg    ap_condition_415;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 state_V = 1'd0;
#0 nextHeader_V = 8'd0;
end

regslice_both #(
    .DataWidth( 512 ))
regslice_both_icmpv6DataOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(reg_124),
    .vld_in(m_axis_icmpv6_TVALID_int),
    .ack_in(m_axis_icmpv6_TREADY_int),
    .data_out(m_axis_icmpv6_TDATA),
    .vld_out(regslice_both_icmpv6DataOut_V_data_V_U_vld_out),
    .ack_out(m_axis_icmpv6_TREADY),
    .apdone_blk(regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_icmpv6DataOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(reg_130),
    .vld_in(m_axis_icmpv6_TVALID_int),
    .ack_in(regslice_both_icmpv6DataOut_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_icmpv6_TKEEP),
    .vld_out(regslice_both_icmpv6DataOut_V_keep_V_U_vld_out),
    .ack_out(m_axis_icmpv6_TREADY),
    .apdone_blk(regslice_both_icmpv6DataOut_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_icmpv6DataOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_icmpv6_TLAST_int),
    .vld_in(m_axis_icmpv6_TVALID_int),
    .ack_in(regslice_both_icmpv6DataOut_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_icmpv6_TLAST),
    .vld_out(regslice_both_icmpv6DataOut_V_last_V_U_vld_out),
    .ack_out(m_axis_icmpv6_TREADY),
    .apdone_blk(regslice_both_icmpv6DataOut_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 512 ))
regslice_both_ipv6UdpDataOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(reg_124),
    .vld_in(m_axis_ipv6udp_TVALID_int),
    .ack_in(m_axis_ipv6udp_TREADY_int),
    .data_out(m_axis_ipv6udp_TDATA),
    .vld_out(regslice_both_ipv6UdpDataOut_V_data_V_U_vld_out),
    .ack_out(m_axis_ipv6udp_TREADY),
    .apdone_blk(regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_ipv6UdpDataOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(reg_130),
    .vld_in(m_axis_ipv6udp_TVALID_int),
    .ack_in(regslice_both_ipv6UdpDataOut_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_ipv6udp_TKEEP),
    .vld_out(regslice_both_ipv6UdpDataOut_V_keep_V_U_vld_out),
    .ack_out(m_axis_ipv6udp_TREADY),
    .apdone_blk(regslice_both_ipv6UdpDataOut_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_ipv6UdpDataOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_ipv6udp_TLAST_int),
    .vld_in(m_axis_ipv6udp_TVALID_int),
    .ack_in(regslice_both_ipv6UdpDataOut_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_ipv6udp_TLAST),
    .vld_out(regslice_both_ipv6UdpDataOut_V_last_V_U_vld_out),
    .ack_out(m_axis_ipv6udp_TREADY),
    .apdone_blk(regslice_both_ipv6UdpDataOut_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_415)) begin
        if (((grp_fu_120_p1 == 1'd1) & (state_V == 1'd1))) begin
            state_V <= 1'd0;
        end else if (((grp_fu_120_p1 == 1'd0) & (state_V == 1'd0))) begin
            state_V <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln879_7_reg_210 <= icmp_ln879_7_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln879_7_reg_210_pp0_iter1_reg <= icmp_ln879_7_reg_210;
        icmp_ln879_8_reg_228_pp0_iter1_reg <= icmp_ln879_8_reg_228;
        icmp_ln879_9_reg_214_pp0_iter1_reg <= icmp_ln879_9_reg_214;
        icmp_ln879_reg_224_pp0_iter1_reg <= icmp_ln879_reg_224;
        state_V_load_reg_196 <= state_V;
        state_V_load_reg_196_pp0_iter1_reg <= state_V_load_reg_196;
        tmp_reg_200 <= tmp_nbreadreq_fu_64_p5;
        tmp_reg_200_pp0_iter1_reg <= tmp_reg_200;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_64_p5 == 1'd1) & (icmp_ln879_fu_178_p2 == 1'd0) & (state_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln879_8_reg_228 <= icmp_ln879_8_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_64_p5 == 1'd1) & (icmp_ln879_7_fu_160_p2 == 1'd0) & (state_V == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln879_9_reg_214 <= icmp_ln879_9_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln879_reg_224 <= icmp_ln879_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nextHeader_V <= {{ipv6DataFifo_V_data_s_dout[55:48]}};
        tmp_last_V_4_reg_204 <= ipv6DataFifo_V_last_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_124 <= ipv6DataFifo_V_data_s_dout;
        reg_130 <= ipv6DataFifo_V_keep_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_218 <= ipv6DataFifo_V_last_s_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1)))) begin
        ipv6DataFifo_V_data_s_blk_n = ipv6DataFifo_V_data_s_empty_n;
    end else begin
        ipv6DataFifo_V_data_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ipv6DataFifo_V_data_s_read = 1'b1;
    end else begin
        ipv6DataFifo_V_data_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1)))) begin
        ipv6DataFifo_V_keep_s_blk_n = ipv6DataFifo_V_keep_s_empty_n;
    end else begin
        ipv6DataFifo_V_keep_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ipv6DataFifo_V_keep_s_read = 1'b1;
    end else begin
        ipv6DataFifo_V_keep_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1)))) begin
        ipv6DataFifo_V_last_s_blk_n = ipv6DataFifo_V_last_s_empty_n;
    end else begin
        ipv6DataFifo_V_last_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op21_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ipv6DataFifo_V_last_s_read = 1'b1;
    end else begin
        ipv6DataFifo_V_last_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op31_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op53_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op45_write_state3 == 1'b1)))) begin
        m_axis_icmpv6_TDATA_blk_n = m_axis_icmpv6_TREADY_int;
    end else begin
        m_axis_icmpv6_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_285)) begin
        if ((ap_predicate_op34_write_state2 == 1'b1)) begin
            m_axis_icmpv6_TLAST_int = tmp_last_V_reg_218;
        end else if ((ap_predicate_op31_write_state2 == 1'b1)) begin
            m_axis_icmpv6_TLAST_int = tmp_last_V_4_reg_204;
        end else begin
            m_axis_icmpv6_TLAST_int = 'bx;
        end
    end else begin
        m_axis_icmpv6_TLAST_int = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op31_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axis_icmpv6_TVALID_int = 1'b1;
    end else begin
        m_axis_icmpv6_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op30_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op33_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op50_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op42_write_state3 == 1'b1)))) begin
        m_axis_ipv6udp_TDATA_blk_n = m_axis_ipv6udp_TREADY_int;
    end else begin
        m_axis_ipv6udp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_285)) begin
        if ((ap_predicate_op33_write_state2 == 1'b1)) begin
            m_axis_ipv6udp_TLAST_int = tmp_last_V_reg_218;
        end else if ((ap_predicate_op30_write_state2 == 1'b1)) begin
            m_axis_ipv6udp_TLAST_int = tmp_last_V_4_reg_204;
        end else begin
            m_axis_ipv6udp_TLAST_int = 'bx;
        end
    end else begin
        m_axis_ipv6udp_TLAST_int = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op30_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op33_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axis_ipv6udp_TVALID_int = 1'b1;
    end else begin
        m_axis_ipv6udp_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op21 == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((io_acc_block_signal_op9 == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op21 == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((io_acc_block_signal_op9 == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op21 == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((io_acc_block_signal_op9 == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op21 == 1'b0) & (ap_predicate_op21_read_state1 == 1'b1)) | ((io_acc_block_signal_op9 == 1'b0) & (ap_predicate_op9_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((m_axis_icmpv6_TREADY_int == 1'b0) & (ap_predicate_op31_write_state2 == 1'b1)) | ((m_axis_ipv6udp_TREADY_int == 1'b0) & (ap_predicate_op30_write_state2 == 1'b1)) | ((m_axis_icmpv6_TREADY_int == 1'b0) & (ap_predicate_op34_write_state2 == 1'b1)) | ((m_axis_ipv6udp_TREADY_int == 1'b0) & (ap_predicate_op33_write_state2 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((m_axis_icmpv6_TREADY_int == 1'b0) & (ap_predicate_op53_write_state3 == 1'b1)) | ((m_axis_ipv6udp_TREADY_int == 1'b0) & (ap_predicate_op50_write_state3 == 1'b1)) | ((m_axis_icmpv6_TREADY_int == 1'b0) & (ap_predicate_op45_write_state3 == 1'b1)) | ((m_axis_ipv6udp_TREADY_int == 1'b0) & (ap_predicate_op42_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk == 1'b1) | (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_condition_285 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_415 = ((tmp_nbreadreq_fu_64_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op21_read_state1 = ((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd1));
end

always @ (*) begin
    ap_predicate_op30_write_state2 = ((icmp_ln879_9_reg_214 == 1'd1) & (tmp_reg_200 == 1'd1) & (icmp_ln879_7_reg_210 == 1'd0) & (state_V_load_reg_196 == 1'd0));
end

always @ (*) begin
    ap_predicate_op31_write_state2 = ((icmp_ln879_7_reg_210 == 1'd1) & (tmp_reg_200 == 1'd1) & (state_V_load_reg_196 == 1'd0));
end

always @ (*) begin
    ap_predicate_op33_write_state2 = ((tmp_reg_200 == 1'd1) & (state_V_load_reg_196 == 1'd1) & (icmp_ln879_8_reg_228 == 1'd1) & (icmp_ln879_reg_224 == 1'd0));
end

always @ (*) begin
    ap_predicate_op34_write_state2 = ((tmp_reg_200 == 1'd1) & (state_V_load_reg_196 == 1'd1) & (icmp_ln879_reg_224 == 1'd1));
end

always @ (*) begin
    ap_predicate_op42_write_state3 = ((icmp_ln879_9_reg_214_pp0_iter1_reg == 1'd1) & (tmp_reg_200_pp0_iter1_reg == 1'd1) & (icmp_ln879_7_reg_210_pp0_iter1_reg == 1'd0) & (state_V_load_reg_196_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op45_write_state3 = ((icmp_ln879_7_reg_210_pp0_iter1_reg == 1'd1) & (tmp_reg_200_pp0_iter1_reg == 1'd1) & (state_V_load_reg_196_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op50_write_state3 = ((icmp_ln879_8_reg_228_pp0_iter1_reg == 1'd1) & (tmp_reg_200_pp0_iter1_reg == 1'd1) & (state_V_load_reg_196_pp0_iter1_reg == 1'd1) & (icmp_ln879_reg_224_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op53_write_state3 = ((icmp_ln879_reg_224_pp0_iter1_reg == 1'd1) & (tmp_reg_200_pp0_iter1_reg == 1'd1) & (state_V_load_reg_196_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op9_read_state1 = ((tmp_nbreadreq_fu_64_p5 == 1'd1) & (state_V == 1'd0));
end

assign grp_fu_120_p1 = ipv6DataFifo_V_last_s_dout;

assign icmp_ln879_7_fu_160_p2 = ((p_Result_i_fu_144_p4 == 8'd58) ? 1'b1 : 1'b0);

assign icmp_ln879_8_fu_184_p2 = ((nextHeader_V == 8'd17) ? 1'b1 : 1'b0);

assign icmp_ln879_9_fu_166_p2 = ((p_Result_i_fu_144_p4 == 8'd17) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_178_p2 = ((nextHeader_V == 8'd58) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op21 = (ipv6DataFifo_V_last_s_empty_n & ipv6DataFifo_V_keep_s_empty_n & ipv6DataFifo_V_data_s_empty_n);

assign io_acc_block_signal_op9 = (ipv6DataFifo_V_last_s_empty_n & ipv6DataFifo_V_keep_s_empty_n & ipv6DataFifo_V_data_s_empty_n);

assign m_axis_icmpv6_TVALID = regslice_both_icmpv6DataOut_V_data_V_U_vld_out;

assign m_axis_ipv6udp_TVALID = regslice_both_ipv6UdpDataOut_V_data_V_U_vld_out;

assign p_Result_i_fu_144_p4 = {{ipv6DataFifo_V_data_s_dout[55:48]}};

assign tmp_nbreadreq_fu_64_p5 = (ipv6DataFifo_V_last_s_empty_n & ipv6DataFifo_V_keep_s_empty_n & ipv6DataFifo_V_data_s_empty_n);

endmodule //detect_ipv6_protocol
