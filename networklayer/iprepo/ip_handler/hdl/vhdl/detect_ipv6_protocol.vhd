-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detect_ipv6_protocol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ipv6DataFifo_V_data_s_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    ipv6DataFifo_V_data_s_empty_n : IN STD_LOGIC;
    ipv6DataFifo_V_data_s_read : OUT STD_LOGIC;
    ipv6DataFifo_V_keep_s_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ipv6DataFifo_V_keep_s_empty_n : IN STD_LOGIC;
    ipv6DataFifo_V_keep_s_read : OUT STD_LOGIC;
    ipv6DataFifo_V_last_s_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    ipv6DataFifo_V_last_s_empty_n : IN STD_LOGIC;
    ipv6DataFifo_V_last_s_read : OUT STD_LOGIC;
    m_axis_ipv6udp_TREADY : IN STD_LOGIC;
    m_axis_icmpv6_TREADY : IN STD_LOGIC;
    m_axis_icmpv6_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_icmpv6_TVALID : OUT STD_LOGIC;
    m_axis_icmpv6_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmpv6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_ipv6udp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_ipv6udp_TVALID : OUT STD_LOGIC;
    m_axis_ipv6udp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ipv6udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of detect_ipv6_protocol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv8_3A : STD_LOGIC_VECTOR (7 downto 0) := "00111010";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal io_acc_block_signal_op9 : STD_LOGIC;
    signal tmp_nbreadreq_fu_64_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op9_read_state1 : BOOLEAN;
    signal io_acc_block_signal_op21 : STD_LOGIC;
    signal ap_predicate_op21_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal state_V_load_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_reg_210 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_9_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op30_write_state2 : BOOLEAN;
    signal ap_predicate_op31_write_state2 : BOOLEAN;
    signal icmp_ln879_reg_224 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_8_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op33_write_state2 : BOOLEAN;
    signal ap_predicate_op34_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal state_V_load_reg_196_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_200_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_reg_210_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_9_reg_214_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op42_write_state3 : BOOLEAN;
    signal ap_predicate_op45_write_state3 : BOOLEAN;
    signal icmp_ln879_reg_224_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_8_reg_228_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op50_write_state3 : BOOLEAN;
    signal ap_predicate_op53_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal state_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal nextHeader_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_axis_icmpv6_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_axis_ipv6udp_TDATA_blk_n : STD_LOGIC;
    signal ipv6DataFifo_V_data_s_blk_n : STD_LOGIC;
    signal ipv6DataFifo_V_keep_s_blk_n : STD_LOGIC;
    signal ipv6DataFifo_V_last_s_blk_n : STD_LOGIC;
    signal reg_124 : STD_LOGIC_VECTOR (511 downto 0);
    signal reg_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_120_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_4_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_9_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_218 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_8_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal p_Result_i_fu_144_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal m_axis_icmpv6_TVALID_int : STD_LOGIC;
    signal m_axis_icmpv6_TREADY_int : STD_LOGIC;
    signal regslice_both_icmpv6DataOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_icmpv6DataOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_icmpv6DataOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_icmpv6DataOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_icmpv6DataOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmpv6_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_icmpv6DataOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_icmpv6DataOut_V_last_V_U_vld_out : STD_LOGIC;
    signal m_axis_ipv6udp_TVALID_int : STD_LOGIC;
    signal m_axis_ipv6udp_TREADY_int : STD_LOGIC;
    signal regslice_both_ipv6UdpDataOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ipv6UdpDataOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_ipv6UdpDataOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ipv6UdpDataOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_ipv6UdpDataOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_ipv6udp_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_ipv6UdpDataOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_ipv6UdpDataOut_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_285 : BOOLEAN;
    signal ap_condition_415 : BOOLEAN;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_icmpv6DataOut_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => reg_124,
        vld_in => m_axis_icmpv6_TVALID_int,
        ack_in => m_axis_icmpv6_TREADY_int,
        data_out => m_axis_icmpv6_TDATA,
        vld_out => regslice_both_icmpv6DataOut_V_data_V_U_vld_out,
        ack_out => m_axis_icmpv6_TREADY,
        apdone_blk => regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk);

    regslice_both_icmpv6DataOut_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => reg_130,
        vld_in => m_axis_icmpv6_TVALID_int,
        ack_in => regslice_both_icmpv6DataOut_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_icmpv6_TKEEP,
        vld_out => regslice_both_icmpv6DataOut_V_keep_V_U_vld_out,
        ack_out => m_axis_icmpv6_TREADY,
        apdone_blk => regslice_both_icmpv6DataOut_V_keep_V_U_apdone_blk);

    regslice_both_icmpv6DataOut_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => m_axis_icmpv6_TLAST_int,
        vld_in => m_axis_icmpv6_TVALID_int,
        ack_in => regslice_both_icmpv6DataOut_V_last_V_U_ack_in_dummy,
        data_out => m_axis_icmpv6_TLAST,
        vld_out => regslice_both_icmpv6DataOut_V_last_V_U_vld_out,
        ack_out => m_axis_icmpv6_TREADY,
        apdone_blk => regslice_both_icmpv6DataOut_V_last_V_U_apdone_blk);

    regslice_both_ipv6UdpDataOut_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => reg_124,
        vld_in => m_axis_ipv6udp_TVALID_int,
        ack_in => m_axis_ipv6udp_TREADY_int,
        data_out => m_axis_ipv6udp_TDATA,
        vld_out => regslice_both_ipv6UdpDataOut_V_data_V_U_vld_out,
        ack_out => m_axis_ipv6udp_TREADY,
        apdone_blk => regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk);

    regslice_both_ipv6UdpDataOut_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => reg_130,
        vld_in => m_axis_ipv6udp_TVALID_int,
        ack_in => regslice_both_ipv6UdpDataOut_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_ipv6udp_TKEEP,
        vld_out => regslice_both_ipv6UdpDataOut_V_keep_V_U_vld_out,
        ack_out => m_axis_ipv6udp_TREADY,
        apdone_blk => regslice_both_ipv6UdpDataOut_V_keep_V_U_apdone_blk);

    regslice_both_ipv6UdpDataOut_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => m_axis_ipv6udp_TLAST_int,
        vld_in => m_axis_ipv6udp_TVALID_int,
        ack_in => regslice_both_ipv6UdpDataOut_V_last_V_U_ack_in_dummy,
        data_out => m_axis_ipv6udp_TLAST,
        vld_out => regslice_both_ipv6UdpDataOut_V_last_V_U_vld_out,
        ack_out => m_axis_ipv6udp_TREADY,
        apdone_blk => regslice_both_ipv6UdpDataOut_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    state_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_415)) then
                if (((grp_fu_120_p1 = ap_const_lv1_1) and (state_V = ap_const_lv1_1))) then 
                    state_V <= ap_const_lv1_0;
                elsif (((grp_fu_120_p1 = ap_const_lv1_0) and (state_V = ap_const_lv1_0))) then 
                    state_V <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln879_7_reg_210 <= icmp_ln879_7_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln879_7_reg_210_pp0_iter1_reg <= icmp_ln879_7_reg_210;
                icmp_ln879_8_reg_228_pp0_iter1_reg <= icmp_ln879_8_reg_228;
                icmp_ln879_9_reg_214_pp0_iter1_reg <= icmp_ln879_9_reg_214;
                icmp_ln879_reg_224_pp0_iter1_reg <= icmp_ln879_reg_224;
                state_V_load_reg_196 <= state_V;
                state_V_load_reg_196_pp0_iter1_reg <= state_V_load_reg_196;
                tmp_reg_200 <= tmp_nbreadreq_fu_64_p5;
                tmp_reg_200_pp0_iter1_reg <= tmp_reg_200;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (icmp_ln879_fu_178_p2 = ap_const_lv1_0) and (state_V = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln879_8_reg_228 <= icmp_ln879_8_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (icmp_ln879_7_fu_160_p2 = ap_const_lv1_0) and (state_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln879_9_reg_214 <= icmp_ln879_9_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln879_reg_224 <= icmp_ln879_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nextHeader_V <= ipv6DataFifo_V_data_s_dout(55 downto 48);
                tmp_last_V_4_reg_204 <= ipv6DataFifo_V_last_s_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_124 <= ipv6DataFifo_V_data_s_dout;
                reg_130 <= ipv6DataFifo_V_keep_s_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_reg_218 <= ipv6DataFifo_V_last_s_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter2, io_acc_block_signal_op9, ap_predicate_op9_read_state1, io_acc_block_signal_op21, ap_predicate_op21_read_state1, regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk, regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op9 = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, io_acc_block_signal_op9, ap_predicate_op9_read_state1, io_acc_block_signal_op21, ap_predicate_op21_read_state1, ap_block_state2_io, regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk, regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op9 = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, io_acc_block_signal_op9, ap_predicate_op9_read_state1, io_acc_block_signal_op21, ap_predicate_op21_read_state1, ap_block_state2_io, regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk, regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op9 = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, io_acc_block_signal_op9, ap_predicate_op9_read_state1, io_acc_block_signal_op21, ap_predicate_op21_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((io_acc_block_signal_op21 = ap_const_logic_0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op9 = ap_const_logic_0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(ap_predicate_op30_write_state2, ap_predicate_op31_write_state2, ap_predicate_op33_write_state2, ap_predicate_op34_write_state2, m_axis_icmpv6_TREADY_int, m_axis_ipv6udp_TREADY_int)
    begin
                ap_block_state2_io <= (((m_axis_icmpv6_TREADY_int = ap_const_logic_0) and (ap_predicate_op31_write_state2 = ap_const_boolean_1)) or ((m_axis_ipv6udp_TREADY_int = ap_const_logic_0) and (ap_predicate_op30_write_state2 = ap_const_boolean_1)) or ((m_axis_icmpv6_TREADY_int = ap_const_logic_0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)) or ((m_axis_ipv6udp_TREADY_int = ap_const_logic_0) and (ap_predicate_op33_write_state2 = ap_const_boolean_1)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(ap_predicate_op42_write_state3, ap_predicate_op45_write_state3, ap_predicate_op50_write_state3, ap_predicate_op53_write_state3, m_axis_icmpv6_TREADY_int, m_axis_ipv6udp_TREADY_int)
    begin
                ap_block_state3_io <= (((m_axis_icmpv6_TREADY_int = ap_const_logic_0) and (ap_predicate_op53_write_state3 = ap_const_boolean_1)) or ((m_axis_ipv6udp_TREADY_int = ap_const_logic_0) and (ap_predicate_op50_write_state3 = ap_const_boolean_1)) or ((m_axis_icmpv6_TREADY_int = ap_const_logic_0) and (ap_predicate_op45_write_state3 = ap_const_boolean_1)) or ((m_axis_ipv6udp_TREADY_int = ap_const_logic_0) and (ap_predicate_op42_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk, regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((regslice_both_ipv6UdpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_icmpv6DataOut_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_285_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_285 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_415_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_64_p5, ap_block_pp0_stage0_11001)
    begin
                ap_condition_415 <= ((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op21_read_state1_assign_proc : process(tmp_nbreadreq_fu_64_p5, state_V)
    begin
                ap_predicate_op21_read_state1 <= ((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_1));
    end process;


    ap_predicate_op30_write_state2_assign_proc : process(state_V_load_reg_196, tmp_reg_200, icmp_ln879_7_reg_210, icmp_ln879_9_reg_214)
    begin
                ap_predicate_op30_write_state2 <= ((icmp_ln879_9_reg_214 = ap_const_lv1_1) and (tmp_reg_200 = ap_const_lv1_1) and (icmp_ln879_7_reg_210 = ap_const_lv1_0) and (state_V_load_reg_196 = ap_const_lv1_0));
    end process;


    ap_predicate_op31_write_state2_assign_proc : process(state_V_load_reg_196, tmp_reg_200, icmp_ln879_7_reg_210)
    begin
                ap_predicate_op31_write_state2 <= ((icmp_ln879_7_reg_210 = ap_const_lv1_1) and (tmp_reg_200 = ap_const_lv1_1) and (state_V_load_reg_196 = ap_const_lv1_0));
    end process;


    ap_predicate_op33_write_state2_assign_proc : process(state_V_load_reg_196, tmp_reg_200, icmp_ln879_reg_224, icmp_ln879_8_reg_228)
    begin
                ap_predicate_op33_write_state2 <= ((tmp_reg_200 = ap_const_lv1_1) and (state_V_load_reg_196 = ap_const_lv1_1) and (icmp_ln879_8_reg_228 = ap_const_lv1_1) and (icmp_ln879_reg_224 = ap_const_lv1_0));
    end process;


    ap_predicate_op34_write_state2_assign_proc : process(state_V_load_reg_196, tmp_reg_200, icmp_ln879_reg_224)
    begin
                ap_predicate_op34_write_state2 <= ((tmp_reg_200 = ap_const_lv1_1) and (state_V_load_reg_196 = ap_const_lv1_1) and (icmp_ln879_reg_224 = ap_const_lv1_1));
    end process;


    ap_predicate_op42_write_state3_assign_proc : process(state_V_load_reg_196_pp0_iter1_reg, tmp_reg_200_pp0_iter1_reg, icmp_ln879_7_reg_210_pp0_iter1_reg, icmp_ln879_9_reg_214_pp0_iter1_reg)
    begin
                ap_predicate_op42_write_state3 <= ((icmp_ln879_9_reg_214_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln879_7_reg_210_pp0_iter1_reg = ap_const_lv1_0) and (state_V_load_reg_196_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op45_write_state3_assign_proc : process(state_V_load_reg_196_pp0_iter1_reg, tmp_reg_200_pp0_iter1_reg, icmp_ln879_7_reg_210_pp0_iter1_reg)
    begin
                ap_predicate_op45_write_state3 <= ((icmp_ln879_7_reg_210_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1) and (state_V_load_reg_196_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op50_write_state3_assign_proc : process(state_V_load_reg_196_pp0_iter1_reg, tmp_reg_200_pp0_iter1_reg, icmp_ln879_reg_224_pp0_iter1_reg, icmp_ln879_8_reg_228_pp0_iter1_reg)
    begin
                ap_predicate_op50_write_state3 <= ((icmp_ln879_8_reg_228_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1) and (state_V_load_reg_196_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln879_reg_224_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op53_write_state3_assign_proc : process(state_V_load_reg_196_pp0_iter1_reg, tmp_reg_200_pp0_iter1_reg, icmp_ln879_reg_224_pp0_iter1_reg)
    begin
                ap_predicate_op53_write_state3 <= ((icmp_ln879_reg_224_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_200_pp0_iter1_reg = ap_const_lv1_1) and (state_V_load_reg_196_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op9_read_state1_assign_proc : process(tmp_nbreadreq_fu_64_p5, state_V)
    begin
                ap_predicate_op9_read_state1 <= ((tmp_nbreadreq_fu_64_p5 = ap_const_lv1_1) and (state_V = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_120_p1 <= ipv6DataFifo_V_last_s_dout;
    icmp_ln879_7_fu_160_p2 <= "1" when (p_Result_i_fu_144_p4 = ap_const_lv8_3A) else "0";
    icmp_ln879_8_fu_184_p2 <= "1" when (nextHeader_V = ap_const_lv8_11) else "0";
    icmp_ln879_9_fu_166_p2 <= "1" when (p_Result_i_fu_144_p4 = ap_const_lv8_11) else "0";
    icmp_ln879_fu_178_p2 <= "1" when (nextHeader_V = ap_const_lv8_3A) else "0";
    io_acc_block_signal_op21 <= (ipv6DataFifo_V_last_s_empty_n and ipv6DataFifo_V_keep_s_empty_n and ipv6DataFifo_V_data_s_empty_n);
    io_acc_block_signal_op9 <= (ipv6DataFifo_V_last_s_empty_n and ipv6DataFifo_V_keep_s_empty_n and ipv6DataFifo_V_data_s_empty_n);

    ipv6DataFifo_V_data_s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ipv6DataFifo_V_data_s_empty_n, ap_predicate_op9_read_state1, ap_predicate_op21_read_state1, ap_block_pp0_stage0)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) then 
            ipv6DataFifo_V_data_s_blk_n <= ipv6DataFifo_V_data_s_empty_n;
        else 
            ipv6DataFifo_V_data_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipv6DataFifo_V_data_s_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op9_read_state1, ap_predicate_op21_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ipv6DataFifo_V_data_s_read <= ap_const_logic_1;
        else 
            ipv6DataFifo_V_data_s_read <= ap_const_logic_0;
        end if; 
    end process;


    ipv6DataFifo_V_keep_s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ipv6DataFifo_V_keep_s_empty_n, ap_predicate_op9_read_state1, ap_predicate_op21_read_state1, ap_block_pp0_stage0)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) then 
            ipv6DataFifo_V_keep_s_blk_n <= ipv6DataFifo_V_keep_s_empty_n;
        else 
            ipv6DataFifo_V_keep_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipv6DataFifo_V_keep_s_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op9_read_state1, ap_predicate_op21_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ipv6DataFifo_V_keep_s_read <= ap_const_logic_1;
        else 
            ipv6DataFifo_V_keep_s_read <= ap_const_logic_0;
        end if; 
    end process;


    ipv6DataFifo_V_last_s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ipv6DataFifo_V_last_s_empty_n, ap_predicate_op9_read_state1, ap_predicate_op21_read_state1, ap_block_pp0_stage0)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1)))) then 
            ipv6DataFifo_V_last_s_blk_n <= ipv6DataFifo_V_last_s_empty_n;
        else 
            ipv6DataFifo_V_last_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipv6DataFifo_V_last_s_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op9_read_state1, ap_predicate_op21_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op21_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op9_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ipv6DataFifo_V_last_s_read <= ap_const_logic_1;
        else 
            ipv6DataFifo_V_last_s_read <= ap_const_logic_0;
        end if; 
    end process;


    m_axis_icmpv6_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op31_write_state2, ap_predicate_op34_write_state2, ap_predicate_op45_write_state3, ap_predicate_op53_write_state3, ap_block_pp0_stage0, m_axis_icmpv6_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op31_write_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op53_write_state3 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op45_write_state3 = ap_const_boolean_1)))) then 
            m_axis_icmpv6_TDATA_blk_n <= m_axis_icmpv6_TREADY_int;
        else 
            m_axis_icmpv6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    m_axis_icmpv6_TLAST_int_assign_proc : process(ap_predicate_op31_write_state2, ap_predicate_op34_write_state2, tmp_last_V_4_reg_204, tmp_last_V_reg_218, ap_condition_285)
    begin
        if ((ap_const_boolean_1 = ap_condition_285)) then
            if ((ap_predicate_op34_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmpv6_TLAST_int <= tmp_last_V_reg_218;
            elsif ((ap_predicate_op31_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmpv6_TLAST_int <= tmp_last_V_4_reg_204;
            else 
                m_axis_icmpv6_TLAST_int <= "X";
            end if;
        else 
            m_axis_icmpv6_TLAST_int <= "X";
        end if; 
    end process;

    m_axis_icmpv6_TVALID <= regslice_both_icmpv6DataOut_V_data_V_U_vld_out;

    m_axis_icmpv6_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op31_write_state2, ap_predicate_op34_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op31_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op34_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axis_icmpv6_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_icmpv6_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    m_axis_ipv6udp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op30_write_state2, ap_predicate_op33_write_state2, ap_predicate_op42_write_state3, ap_predicate_op50_write_state3, ap_block_pp0_stage0, m_axis_ipv6udp_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op30_write_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op33_write_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op50_write_state3 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op42_write_state3 = ap_const_boolean_1)))) then 
            m_axis_ipv6udp_TDATA_blk_n <= m_axis_ipv6udp_TREADY_int;
        else 
            m_axis_ipv6udp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    m_axis_ipv6udp_TLAST_int_assign_proc : process(ap_predicate_op30_write_state2, ap_predicate_op33_write_state2, tmp_last_V_4_reg_204, tmp_last_V_reg_218, ap_condition_285)
    begin
        if ((ap_const_boolean_1 = ap_condition_285)) then
            if ((ap_predicate_op33_write_state2 = ap_const_boolean_1)) then 
                m_axis_ipv6udp_TLAST_int <= tmp_last_V_reg_218;
            elsif ((ap_predicate_op30_write_state2 = ap_const_boolean_1)) then 
                m_axis_ipv6udp_TLAST_int <= tmp_last_V_4_reg_204;
            else 
                m_axis_ipv6udp_TLAST_int <= "X";
            end if;
        else 
            m_axis_ipv6udp_TLAST_int <= "X";
        end if; 
    end process;

    m_axis_ipv6udp_TVALID <= regslice_both_ipv6UdpDataOut_V_data_V_U_vld_out;

    m_axis_ipv6udp_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op30_write_state2, ap_predicate_op33_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op30_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op33_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axis_ipv6udp_TVALID_int <= ap_const_logic_1;
        else 
            m_axis_ipv6udp_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_i_fu_144_p4 <= ipv6DataFifo_V_data_s_dout(55 downto 48);
    tmp_nbreadreq_fu_64_p5 <= (0=>(ipv6DataFifo_V_last_s_empty_n and ipv6DataFifo_V_keep_s_empty_n and ipv6DataFifo_V_data_s_empty_n), others=>'-');
end behav;
